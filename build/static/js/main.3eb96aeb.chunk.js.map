{"version":3,"sources":["view/state/actions/actionType.ts","domain/adapters/repositories/IUserRepository.tsx","view/state/action-creators/index.ts","view/state/reducers/loginReducer.ts","view/state/reducers/plantReducer.ts","view/state/store.ts","view/components/formFields.tsx","view/components/User/RegisterForm.tsx","view/pages/LoginPage.tsx","domain/adapters/repositories/IServiceRepository.ts","view/components/Navbar.tsx","domain/adapters/repositories/IPlantRepository.tsx","view/pages/DashBoard.tsx","view/components/User/create.tsx","view/components/User/LoginForm.tsx","view/pages/LandingPage.tsx","view/components/footer.tsx","App.tsx","reportWebVitals.ts","domain/entities/Plant.tsx","core/utils/requestBuilder.ts","application/PlantRepositoryImpl.ts","application/ServiceRepositoryImpl.ts","domain/entities/user.tsx","domain/entities/GardenerPlant.ts","application/UserRepositoryImpl.ts","core/di.ts","index.tsx"],"names":["ActionType","IUserRepository","injectable","logIn","repo","username","password","dispatch","a","loginRequest","signIn","userId","getAuthenticatedUserId","getUserData","user","loginSuccess","push","loginFailed","data","type","LOGIN_REQUEST","LOGIN_SUCCESS","error","LOGIN_FAILED","setIsAuthenticated","status","SET_IS_AUTHENTICATED","logOut","signOut","setUserData","SET_USER_DATA","SIGNOUT","isAuthenticated","getPlants","getAllPlants","plants","setPlants","SET_PLANTS","InitialState","isLoading","loginReducer","state","action","plantReducer","history","createBrowserHistory","reducers","combineReducers","router","connectRouter","form","formReducer","login","plant","store","createStore","applyMiddleware","routerMiddleware","thunk","renderInputField","input","label","meta","touched","className","htmlFor","name","id","placeholder","renderSelectField","children","renderSwitchField","defaultValue","reduxForm","destroyOnUnmount","handleSubmit","userRepo","useInjection","useDispatch","bindActionCreators","actionCreators","submit","values","register","gender","firstname","surname","email","passwordReg","isNotified","onSubmit","Field","component","value","selected","LoginPage","props","useSelector","style","backgroundImage","backgroundRepeat","backgroundSize","IServiceRepository","Navbar","isAuth","console","log","href","size","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","onClick","IPlantRepository","DashBoard","gardenerPlants","role","numberOfPlants","map","maxWidth","nickname","src","image","alt","Create","aria-describedby","LandingPage","plantRepo","fetchPlants","useCallback","useEffect","Carousel","Item","Caption","description","target","rel","Footer","App","myCarousel","document","getElementById","serviceRepo","authenticationStatus","setup","path","exact","render","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Plant","exposition","care","toxicity","frequency","this","requestBuilder","endpoint","protocole","PlantRepositoryImpl","requestUrl","axios","get","plantsData","ServiceRepositoryImpl","token","window","localStorage","getItem","jwtDecode","exp","Date","getTime","setAxiosToken","defaults","headers","common","User","is_notified","GardenerPlant","sunlight","season","topography","location","UserRepositoryImpl","domain","url","parseJwt","unsetAxiosToken","removeTokenFromLocalStorage","userDetails","post","alert","gardenerPlantsData","gardenerPlant","totalNumberOfGardenerPlants","credentials","storeTokenInLocalStorage","setItem","removeItem","JSON","parse","atob","split","container","Container","bind","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.3eb96aeb.chunk.js","sourcesContent":["export enum ActionType {\r\n\r\n\r\n    //LOGIN / USER ACTION TYPES ---------------------------------\r\n    LOGIN_REQUEST = 'LOGIN_REQUEST',\r\n    LOGIN_SUCCESS = \"LOGIN_SUCCESS\",\r\n    LOGIN_FAILED = \"LOGIN_FAILED\",\r\n    SIGNIN = 'SIGNIN',\r\n    REGISTER = 'REGISTER',\r\n    SIGNOUT = 'SIGNOUT',\r\n    SET_IS_AUTHENTICATED = 'SET_IS_AUTHENTICATED',\r\n    GET_USER_DATA = 'GET_USER_DATA',\r\n    SET_USER_DATA = 'SET_USER_DATA',\r\n\r\n    //PLANT ACTION TYPES ---------------------------------\r\n\r\n    SET_PLANTS = 'SET_PLANTS',\r\n\r\n\r\n\r\n\r\n    TOGGLE_IS_NOTIFIED = 'TOGGLE_IS_NOTIFIED',\r\n    UPDATE_INPUT = 'UPDATE_INPUT',\r\n    CLEAR_INPUT = 'CLEAR_INPUT',\r\n    USE_INJECTION = 'USE_INJECTION',\r\n}","import { injectable } from \"inversify\";\r\nimport { registerFormData } from \"../../../application/UserRepositoryImpl\";\r\nimport User from \"../../entities/user\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IUserRepository {\r\n    abstract signIn(username: string, password: string):void;\r\n    abstract register({gender, firstname, surname,email, password, isNotified }: registerFormData):Promise<void>;\r\n    abstract signOut():void;\r\n    abstract getUserData(id: number | null): Promise<User | undefined> ;\r\n    abstract getAuthenticatedUserId(): number | null;\r\n}","import { ActionType } from \"../actions/actionType\"\r\nimport { Dispatch } from \"redux\";\r\nimport IUserRepository from \"../../../domain/adapters/repositories/IUserRepository\";\r\nimport User from \"../../../domain/entities/user\";\r\nimport { push, replace } from 'connected-react-router'\r\nimport { Action } from \"../actions/actionInterfaces\";\r\nimport { IPlant } from \"../../../domain/entities/Plant\";\r\nimport IPlantRepository from \"../../../domain/adapters/repositories/IPlantRepository\";\r\n\r\n\r\nexport interface LoginData {\r\n    username: string,\r\n    password: string,\r\n}\r\n\r\n  \r\nexport const logIn = ({username, password}, repo: IUserRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        dispatch(loginRequest({username, password}));\r\n        await repo.signIn(username, password);\r\n        \r\n        const userId: number | null = repo.getAuthenticatedUserId();\r\n        const user: User|undefined = await repo.getUserData(userId);\r\n        if (user){\r\n            dispatch(loginSuccess(user));\r\n            dispatch(push('/dashboard'));\r\n          }else {\r\n              dispatch(loginFailed('une erreur est survenue'))\r\n          }\r\n      }\r\n  }\r\n\r\nexport function loginRequest(data: LoginData): Action{\r\n    return { \r\n        type: ActionType.LOGIN_REQUEST, \r\n        data : data\r\n    };\r\n  }\r\n  \r\n  export function loginSuccess(user: User): Action {\r\n    return { \r\n        type: ActionType.LOGIN_SUCCESS, \r\n        user: user,\r\n    };\r\n  }\r\n  \r\n  export function loginFailed(error: string): Action {\r\n    return { \r\n        type: ActionType.LOGIN_FAILED, \r\n        error: error\r\n    };\r\n  }\r\n  export const setIsAuthenticated = (status: boolean) => {\r\n    return {\r\n        type: ActionType.SET_IS_AUTHENTICATED,\r\n        status: status\r\n    }\r\n}\r\nexport const logOut = (repo: IUserRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        repo.signOut();\r\n        dispatch(signOut());\r\n        dispatch(push('/'));\r\n    }\r\n}\r\nexport const setUserData = (user: User) =>  ({\r\n        type: ActionType.SET_USER_DATA,\r\n        user: user\r\n    })\r\nexport const signOut = () =>  ({\r\n        type: ActionType.SIGNOUT,\r\n        isAuthenticated: false\r\n    })\r\n\r\n\r\n\r\n// PLANTS ACTIONS ------------------------------------------------------\r\n\r\nexport const getPlants = (repo: IPlantRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        const plants: IPlant[] | undefined = await  repo.getAllPlants();\r\n        dispatch(setPlants(plants));\r\n    }\r\n}\r\n\r\nexport const setPlants = (plants: IPlant[] | undefined) =>  ({\r\n    type: ActionType.SET_PLANTS,\r\n    plants: plants\r\n})\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { Action } from \"../actions/actionInterfaces\";\r\nimport { ActionType } from \"../actions/actionType\";\r\n\r\ninterface LoginState{\r\n    isAuthenticated: boolean,\r\n    user: any,\r\n    error: string | null,\r\n    isLoading: boolean\r\n}\r\n\r\nconst InitialState: LoginState= {\r\n    isAuthenticated: false,\r\n    user: null,\r\n    error: null,\r\n    isLoading: false\r\n}\r\n\r\nconst loginReducer = (state: LoginState = InitialState , action: Action): LoginState => {\r\n    switch (action.type) {\r\n        case ActionType.LOGIN_REQUEST: \r\n        return {\r\n            ...state, \r\n            isLoading: true\r\n        }\r\n        case ActionType.LOGIN_SUCCESS:\r\n            return {\r\n                ...state, \r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                user: action.user\r\n            }\r\n        case ActionType.LOGIN_FAILED:\r\n            return {\r\n                ...state, \r\n                isLoading: false, \r\n                error: action.error\r\n            }\r\n        case ActionType.SIGNOUT:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case ActionType.SET_IS_AUTHENTICATED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: action.status\r\n        }\r\n        case ActionType.SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            }\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default loginReducer;\r\n\r\n","import { AnyAction } from \"redux\";\r\nimport { IPlant } from \"../../../domain/entities/Plant\";\r\n\r\nimport { Action } from \"../actions/actionInterfaces\";\r\nimport { ActionType } from \"../actions/actionType\";\r\n\r\ninterface PlantState{\r\n    plants: IPlant[];\r\n}\r\n\r\nconst InitialState: PlantState= {\r\n    plants: []\r\n}\r\n\r\nconst plantReducer = (state: PlantState = InitialState , action: Action): PlantState => {\r\n    switch (action.type) {\r\n        case ActionType.SET_PLANTS: \r\n        return {\r\n            ...state, \r\n            plants: action.plants\r\n        }\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default plantReducer;\r\n\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createBrowserHistory } from 'history';\r\nimport {\r\n    ConnectedRouter,\r\n    connectRouter,\r\n    routerMiddleware\r\n  }from 'connected-react-router';\r\n// import userReducer from \"./reducers/userReducer\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport loginReducer from \"./reducers/loginReducer\";\r\nimport plantReducer from \"./reducers/plantReducer\";\r\n\r\n\r\n\r\n\r\nexport const history = createBrowserHistory();\r\nconst reducers =  combineReducers({\r\n  router: connectRouter(history),\r\n  form: formReducer,\r\n  // user: userReducer,\r\n  login: loginReducer,\r\n  plant: plantReducer\r\n  /* Add your reducers here */\r\n})\r\nconst store = createStore(\r\n  reducers,\r\n  applyMiddleware(routerMiddleware(history), thunk)\r\n);\r\n\r\n    \r\n    export default store;\r\n    export type State = ReturnType<typeof reducers>;\r\n    // Infer the `RootState` and `AppDispatch` types from the store itself\r\n//     export type RootState = ReturnType<typeof store.getState>\r\n// // Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\n//     export type AppDispatch = typeof store.dispatch \r\n    ","\r\nexport const renderInputField = ({input,type, label, meta: {touched, error} }:any) => (\r\n    <div className=\"form-group text-light\">\r\n        <label htmlFor={input.name} className=\"form-label mt-4 mr-4 float-start\">{label}</label>\r\n        <input {...input} type={ type } id={input.name} className=\"form-control rounded\" placeholder={label}/>\r\n        {touched && error &&\r\n        <small className='error'>{error}</small>}\r\n    </div>\r\n);\r\nexport const renderSelectField = ({input, type, label, children, meta: {touched, error} }:any) => (\r\n    <div className=\"form-group field text-light\">\r\n        <label htmlFor={input.name} className=\"form-label mt-4 float-start\">{label}</label>\r\n        <select {...input} className='form-select rounded'>\r\n            {children}\r\n        </select>\r\n        {touched && (error && <small className=\"help is-danger\">{error}</small>)}\r\n    </div>\r\n);\r\nexport const renderSwitchField = ({input, type, label, children, meta: {touched, error}, defaultValue }:any) => (\r\n    <div className=\"form-check form-switch mt-4 text-light\">\r\n        <input {...input} className=\"form-check-input \"  type={type} id={input.name} defaultValue={defaultValue} name='isNotified' />\r\n        <label className=\"form-check-label float-start ml-5\" htmlFor={input.name} >{label}</label>\r\n    </div>\r\n);","import { useInjection } from 'inversify-react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field} from 'redux-form'\r\nimport IUserRepository from '../../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../../state';\r\nimport { renderInputField, renderSelectField, renderSwitchField } from '../formFields';\r\n\r\n\r\n    \r\n    const RegisterForm = ({handleSubmit}) => {\r\n        \r\n        const userRepo: IUserRepository = useInjection(IUserRepository);\r\n        const dispatch = useDispatch();\r\n        const { logIn } = bindActionCreators(actionCreators, dispatch);\r\n\r\n        const submit = async (values) => {\r\n            await userRepo.register({gender: values.gender, firstname: values.firstname, surname: values.surname, email:values.email, password: values.passwordReg, isNotified:values.isNotified});\r\n            logIn({username:values.email, password:values.passwordReg}, userRepo)\r\n        }\r\n        \r\n    // console.log(props.onsubmit)\r\n    return(\r\n        <div className='register-form mx-5 w-50'>\r\n            <h2 className='text-light mb-5 fw-light '>Créer un compte utilisateur</h2>\r\n            <form onSubmit={handleSubmit(submit)}>\r\n                <div className=\"form-group\">\r\n                    <Field name='gender' component={renderSelectField} label='Civilité'>\r\n                        <option value='' children=\"Choisir une option\" selected></option>\r\n                        <option value='Madame' children='Madame'></option>\r\n                        <option value='Monsieur' children='Monsieur'></option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='firstname' component={renderInputField} label='Prénom' type='text'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='surname' component={renderInputField} label='Nom' type='text'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='email' component={renderInputField} label='Adresse e-mail' type='email'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='passwordReg' component={renderInputField} label='Mot de passe' type='password'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='passwordReg2' component={renderInputField} label='Confirmez votre mot de passe' type='password'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='isNotified' component={renderSwitchField} label='Je souhaite recevoir les noficiations' type='checkbox' defaultValue={false} />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-success my-5 rounded\">Connexion</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'register',\r\n    destroyOnUnmount: true,\r\n    \r\n})(RegisterForm)\r\n\r\n// export default LoginForm;","\r\nimport { useInjection } from 'inversify-react';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionCreators, State } from '../state/index';\r\nimport  { bindActionCreators } from 'redux';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { registerFormData } from '../../application/UserRepositoryImpl';\r\nimport LoginForm from '../components/User/LoginForm';\r\nimport RegisterForm from '../components/User/RegisterForm';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst LoginPage = (props) => {\r\n    \r\n    const userRepo = useInjection(IUserRepository);\r\n\r\n    // const dispatch = useDispatch();\r\n    // const { signIn, loginRequest, logIn } = bindActionCreators(actionCreators, dispatch);\r\n    const state = useSelector((state: State ) => state.login);\r\n    // console.log('state initial' + state.credentials.isNotified);\r\n    // const isAuth = useSelector((state: State ) => state.user.isAuthenticated);\r\n    return (\r\n    \r\n        <div className='bg-transparent p-5' style={{ \r\n            backgroundImage: `url(\"https://bergamotte.imgix.net/z049fzgxm50nzio6q6ri06wzq7op?ixlib=rails-4.2.0&auto=format%2Ccompress&fit=crop&q=65&ar=1%3A1&w=560\")`,\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundSize: 'cover',}}>\r\n\r\n            <div className='p-5'>\r\n                <div className=\"jumbotron jumbotron-fluid\">\r\n                    <div className=\"container-fluid text-center\"> \r\n                    <h1 className=\"display-3\">DRINK UP !</h1>\r\n                    <p className=\"lead text-25 pb-4 fw-bold text-dark\">Vos plantes n'auront plus jamais soif !</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n           <div className=' position-relative container pt-5'>\r\n                <div className=\"position-absolute top-0 start-0 bottom-0 end-0 bg-dark  opacity-75 \"></div>\r\n\r\n                <div className=' position-relative d-flex justify-content-between  pt-5'>\r\n                    {/* <LoginForm /> */}\r\n                    <RegisterForm />\r\n                    \r\n                </div> \r\n        </div>\r\n\r\n     </div>\r\n     );\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n\r\n\r\n                    {/*<h2 className='text-light mb-5 fw-light'>Créer un compte utilisateur</h2>\r\n                    <div className=\"text-light\">\r\n                        <form onSubmit={async (e: React.FormEvent<HTMLFormElement>) => {\r\n                            e.preventDefault();\r\n                            \r\n                            const username: string = e.currentTarget.email.value\r\n                            const password: string = e.currentTarget.passwordReg.value\r\n                            // console.log(username)\r\n                            await userRepo.register({gender: e.currentTarget.gender.value, firstname: e.currentTarget.firstname.value, surname: e.currentTarget.surname.value, email: e.currentTarget.email.value, password: e.currentTarget.passwordReg.value, isNotified: Boolean(e.currentTarget.isNotified.value)});\r\n                            \r\n                            signIn(username, password, userRepo);\r\n                            }}> \r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"gender\" className=\"form-label mt-4 float-start\">Civilité</label>\r\n                                <select className=\"form-select\" id=\"gender\" name ='gender'>\r\n                                    <option value=\"\" disabled selected>Choisir un option</option>\r\n                                    <option>Monsieur</option>\r\n                                    <option>Madame</option>\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"firstname\" aria-required className=\"form-label mt-4 mr-4 float-start\">Prénom</label>\r\n                                <input type=\"text\" value={ state.credentials.firstname } onChange= {(e: React.FormEvent<HTMLInputElement>) => { \r\n                                    // console.log(e.currentTarget.name)\r\n                                    updateInput\r\n                                    ( e.currentTarget.value, e.currentTarget.name)}} className=\"form-control\" id=\"firstname\" aria-describedby=\"emailHelp\" placeholder=\"Entrez votre prénom\" name ='firstname' />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"surname\" className=\"form-label mt-4 mr-4 float-start\">Nom</label>\r\n                                <input type=\"text\" value={ state.credentials.surname } onChange= {(e: React.FormEvent<HTMLInputElement>) => updateInput( e.currentTarget.value, e.currentTarget.name)} className=\"form-control\" id=\"surname\" aria-describedby=\"emailHelp\" placeholder=\"Entrez votre nom\" name ='surname' />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"email\" className=\"form-label mt-4 mr-4 float-start\">Adresse E-mail</label>\r\n                                <input type=\"email\" value={ state.credentials.credentialsname } onChange= {(e: React.FormEvent<HTMLInputElement>) => updateInput( e.currentTarget.value, e.currentTarget.name)} className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Entrez votre adresse email\" name ='email' />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"passwordReg\" className=\"form-label mt-4 float-start\">Mot de passe</label>\r\n                                <input type=\"password\" value={ state.credentials.passwordReg}  onChange= {(e: React.FormEvent<HTMLInputElement>) => updateInput(e.currentTarget.value,  e.currentTarget.name)} className=\"form-control\" id=\"passwordReg\" placeholder=\"Entrez votre mot de passe\" name ='passwordReg'/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"passwordReg2\" className=\"form-label mt-4 float-start\">Confirmer votre mot de passe</label>\r\n                                <input type=\"password\" value={ state.credentials.passwordReg2}  onChange= {(e: React.FormEvent<HTMLInputElement>) => updateInput(e.currentTarget.value,  e.currentTarget.name)} className=\"form-control\" id=\"passwordReg2\" placeholder=\"Entrez votre mot de passe\"  name ='passwordReg2'/>\r\n                            </div>\r\n\r\n                            <div className=\"form-check form-switch mt-4\">\r\n                                <input className=\"form-check-input \" type=\"checkbox\" id=\"isNotified\" value='false' name='isNotified' onChange={(e) => {\r\n                                    e.preventDefault();\r\n                                    const initialValue: boolean = Boolean(e.currentTarget.value);\r\n                                    // console.log('inital' + initialValue) /\r\n                                    // console.log(state.credentials.isNotified);\r\n                                    console.log(state)\r\n                                    console.log('valeur donnée à la foncction' + (e.currentTarget.value))\r\n\r\n                                    toggleIsNotified(e.currentTarget.value);\r\n                                    // toggleIsNotified(Boolean(state.credentials.isNotified.value));\r\n                                    \r\n                                    }}/>\r\n                                \r\n                                <label className=\"form-check-label float-start ml-5\" htmlFor=\"isNotified\" >J'active les notifications</label>\r\n                            </div>\r\n                            \r\n                            <button type=\"submit\" className=\"btn btn-success my-5\">Connexion</button>\r\n                        </form>\r\n                    </div>*/}","import { injectable } from \"inversify\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IServiceRepository {\r\n    abstract setup():void;\r\n    abstract isAuthenticated(): boolean\r\n}","\r\nimport { useInjection } from 'inversify-react';\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../state';\r\nimport { State } from '../state/store';\r\n\r\nimport { SiWeightsandbiases } from \"react-icons/si\";\r\n\r\n\r\n\r\nconst Navbar = () => {\r\n    \r\n    const userRepo = useInjection(IUserRepository);\r\n\r\n    const dispatch = useDispatch();\r\n    const { logOut } = bindActionCreators(actionCreators, dispatch);\r\n    const isAuth: boolean = useSelector((state: State) => state.login.isAuthenticated);\r\n    console.log(isAuth)\r\n\r\n    return(\r\n\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand d-flex flex-column align-items-center\" href=\"#\">\r\n                    <span className=\"text-success\"><SiWeightsandbiases size={45} /></span>\r\n                    <small className=\"text-success fs-6\">Drink up</small>\r\n                \r\n                </a>\r\n              \r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarColor02\" aria-controls=\"navbarColor02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n                    <ul className=\"navbar-nav me-auto\">\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Nos Plantes</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Guide pratique</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Nous contacter</a>\r\n                        </li>\r\n                    </ul>\r\n                    {!isAuth && <>\r\n                    <ul className=' navbar-nav ml-auto'>\r\n                        <li className=\"nav-item\">\r\n                            <button onClick={() => {}} className=\"btn btn-success rounded\">Connexion</button>\r\n                        </li>\r\n                    </ul>\r\n                    </>}\r\n                    {isAuth && <>\r\n                    <ul className=' navbar-nav ml-auto'>\r\n                        <li className=\"nav-item\">\r\n                            <button onClick={() => logOut(userRepo)} className=\"btn btn-outline-success\">Deconnexion</button>\r\n                        </li>\r\n                    </ul>\r\n                    </>}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import { injectable } from \"inversify\";\r\nimport { registerFormData } from \"../../../application/UserRepositoryImpl\";\r\nimport Plant from \"../../entities/Plant\";\r\nimport User from \"../../entities/user\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IPlantRepository {\r\n    abstract getAllPlants(): Promise<Plant[] | undefined> ;\r\n    \r\n}","\r\nimport { useInjection } from 'inversify-react';\r\nimport React, { useEffect } from 'react';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionCreators} from '../state/index';\r\nimport  {bindActionCreators } from 'redux';\r\n\r\n\r\nimport IPlantRepository from '../../domain/adapters/repositories/IPlantRepository';\r\nimport { IGardenerPlant } from '../../domain/entities/GardenerPlant';\r\nimport {State} from '../state/store'\r\n\r\n\r\n\r\nconst DashBoard = () => {\r\n\r\n    const userRepo: IUserRepository = useInjection(IUserRepository);\r\n    const plantRepo: IPlantRepository = useInjection(IPlantRepository)\r\n    const userId: number | null = userRepo.getAuthenticatedUserId();\r\n    const dispatch = useDispatch();\r\n    const { setUserData} = bindActionCreators(actionCreators, dispatch);\r\n    // getUserData(userId, userRepo);\r\n    // console.log(userId)\r\n    // useEffect(() =>   {\r\n    //     if(userId) {\r\n    //         const user: any = userRepo.getUserData(userId);\r\n    //         setUserData(user)\r\n    //         // conole.log(plantRepo.getAllPlants())\r\n    //     }\r\n    // }, []);\r\n\r\n    const user = useSelector((state: State) => state.login.user);\r\n    const isAuth = useSelector((state: State ) => state.login.isAuthenticated);\r\n    const isLoading = useSelector((state: State ) => state.login.isLoading);\r\n    const errorMsg = useSelector((state: State ) => state.login.error);\r\n    const plants: IGardenerPlant[] = user.gardenerPlants\r\n\r\n    console.log(isLoading)\r\n    return (\r\n        \r\n        <div className='' id=\"dashboard\">\r\n        {(isLoading &&(\r\n            <>\r\n            <div className=\"spinner-border\" role=\"status\">\r\n                <span className=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n            </>\r\n        ) )} ||\r\n\r\n        {(isAuth && (\r\n            <>\r\n            <div className=\"d-flex hero\">\r\n\r\n                <div className=\"w-50 bg-transparent\">\r\n                    <div className=\"my-5 mx-5 \">\r\n                        <h1 className=\"display-6\">Bienvenue <br/>dans votre Serre Virtuelle</h1>\r\n                        <p className=\"lead mt-5 fw-bold\">{user.firstname}&nbsp;{user.surname}</p>\r\n                        <p className=\"py-4\">Depuis votre espace serre virtuelle, vous pouvez gérer l'arrosage de toutes vos plantes en un click !</p>\r\n                    </div>\r\n                    <div>\r\n                        <a href=\"#\" className=\"btn btn-success rounded\">Ajouter une plante</a>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='w-50'  style={{ \r\n                    backgroundImage: `url(\"https://images.pexels.com/photos/776656/pexels-photo-776656.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\")`,\r\n                    backgroundRepeat: 'no-repeat',\r\n                    backgroundSize: 'cover',}}>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"container stats\">\r\n                <h2 className=\"py-5 \">Vos données en un clin d'oeil !</h2>\r\n                <div className=\"d-flex justify-content-evenly mb-3\">\r\n                    \r\n                        <div className=\"stat-item bg-success rounded-circle d-flex flex-column justify-content-center align-items-center shadow px-2 text-light\">\r\n                            <p className=\"fw-bold  text-light\">Nombre de plantes adorées</p>\r\n                            <span className=\"fs-1 fw-bold \">{user.numberOfPlants}</span>\r\n                        </div>\r\n                    \r\n                   \r\n                        <div className=\"stat-item bg-success rounded-circle d-flex flex-column justify-content-center align-items-center shadow px-2 text-light\">\r\n                            <p className=\"fw-bold  text-light\">Nombre de plantes assoiffées</p>\r\n                            <span className=\"fs-1 fw-bold \">{user.numberOfPlants}</span>\r\n                        </div>\r\n                  \r\n                   \r\n                        <div className=\"stat-item bg-success rounded-circle d-flex flex-column justify-content-center align-items-center shadow px-2 text-light\">\r\n                            <p className=\"fw-bold  text-light\">Nombre de plantes en péril</p>\r\n                            <span className=\"fs-1 fw-bold \">{user.numberOfPlants}</span>\r\n                        </div>\r\n                    \r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"serre py-5\" > \r\n                <h2>Mes plantes</h2>\r\n                <div className=\"d-flex justify-content-start py-5 container\">\r\n                    {plants.map((plant) => {\r\n                    return <div>\r\n                                <div className=\"card relative\" style={{maxWidth: '20rem'}}>\r\n                                    <h5  className=\"bg-dark text-light py-1\">{plant.nickname}</h5>\r\n                                    <img src={plant.image} className=\"card-img-top\" alt=\"...\" />\r\n                                    <div className=\"card-body\">\r\n                                        <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\r\n                                        <a href=\"#\" className=\"btn btn-success\">Go somewhere</a>\r\n                                    </div>\r\n                                    <span className=\"text-dark\">Prochaine date d'arrosage: 21/12/2021</span>\r\n                                    <i className=\"bi bi-arrow-down-right-circle text-success\">hello</i>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n        \r\n        </> \r\n        )) || (\r\n        <h1>connexion</h1>\r\n        )\r\n    }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashBoard;","import React from 'react';\r\n\r\n\r\nconst Create = () => {\r\n\r\n\r\n    return(\r\n        <div>\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"exampleInputEmail1\" className=\"form-label mt-4\">Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" /> \r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"exampleInputPassword1\" className=\"form-label mt-4\">Password</label>\r\n                    <input type=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Create;","import { useInjection } from 'inversify-react';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field} from 'redux-form'\r\nimport IUserRepository from '../../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../../state';\r\nimport { loginFailed } from '../../state/action-creators';\r\nimport { renderInputField } from '../formFields';\r\n\r\n\r\n    \r\n    const LoginForm = ({handleSubmit}) => {\r\n        \r\n        const userRepo: IUserRepository = useInjection(IUserRepository);\r\n        const dispatch = useDispatch();\r\n        const { logIn} = bindActionCreators(actionCreators, dispatch);\r\n\r\n\r\n        const submit = (values) => {\r\n            logIn({username: values.username, password: values.password}, userRepo)\r\n        }\r\n        \r\n    return(\r\n        // <div className='d-flex justify-content-center'>\r\n\r\n            <div className='login-form mx-5 '>\r\n                <h2 className='text-light mb-5 fw-light'>Accès à votre serre virtuelle</h2>\r\n                <form onSubmit={handleSubmit(submit)}>\r\n                    <div className=\"form-group\">\r\n                        <Field name='username' component={renderInputField} label='Adresse e-mail' type='email' />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='password' component={renderInputField} label='Mot de passe' type='password' />\r\n                    </div>\r\n                    <div className=\"py-2 d-flex justify-content-start\">\r\n                        <a href=\"#\"  className=\"text-white\"><small>Mot de passe oublié ?</small></a>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-outline-light my-5 rounded\">Connexion</button>\r\n                </form>\r\n            </div>\r\n        // </div>\r\n        );\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'login',\r\n    destroyOnUnmount: true,\r\n})(LoginForm)\r\n\r\n// export default LoginForm;","\r\n\r\nimport { useInjection } from 'inversify-react';\r\nimport { useCallback, useEffect } from 'react';\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport IPlantRepository from '../../domain/adapters/repositories/IPlantRepository';\r\nimport LoginForm from '../components/User/LoginForm'\r\nimport { actionCreators, State } from '../state';\r\nimport { BsPersonCircle } from \"react-icons/bs\";\r\nimport { BsFlower2 } from \"react-icons/bs\";\r\nimport { BsClipboardData } from \"react-icons/bs\";\r\n\r\nimport { FaPagelines } from \"react-icons/fa\";\r\n\r\n\r\n\r\nconst LandingPage = (props) => { \r\n\r\n    \r\n    // const plants: Plant[] = await ==plantRepo.getAllPlants();\r\n    const plantRepo = useInjection(IPlantRepository);\r\n\r\n    const dispatch = useDispatch();\r\n    const { getPlants} = bindActionCreators(actionCreators, dispatch);\r\n    const plants = useSelector((state: State ) => state.plant.plants);\r\n    // console.log('state initial' + state.credentials.isNotified);\r\n    // const isAuth = useSelector((state: State ) => state.user.isAuthenticated);\r\n\r\n\r\n    const fetchPlants = useCallback( async () => {\r\n            // const plants: Plant[] | undefined = await plantRepo.getAllPlants();\r\n            getPlants(plantRepo);\r\n            // console.log(plants)\r\n            // return plants;\r\n    }, []);\r\n\r\n    \r\n\r\n    useEffect( () =>   {\r\n        // const fetchPlants = async () => {\r\n        //     const plants: Plant[] | undefined = await plantRepo.getAllPlants();\r\n        // }\r\n        fetchPlants()\r\n        // .catch(console.error)\r\n    }, [fetchPlants]);\r\n\r\n\r\n    // const plants = fetchPlants();\r\n    console.log (plants)\r\n\r\n    return(\r\n        <div id=\"landing-page\" className=\"landing-page\">\r\n\r\n\r\n            <section className=\"d-flex justify-content-center align-items-center hero \" >\r\n                <div className=\"text-white \">\r\n                    <h1 className=\"main-title mb-4\">DRINK UP !</h1>\r\n\r\n                    <p className=\"lead \">Vos plantes vous mennent la vie dure ? Drink up est l'application qu'il vous pour que vos plantes ne manquent plus jamais d'eau. Rejoignez-vous pour <span className=\"fw-bold\">une expérience unique</span>une expérience unique.... enfin presque !</p>\r\n                    <div className=\"py-5 d-flex justify-content-center gap-5\">\r\n\r\n                        <a href=\"#\" className=\"btn fw-bold border-white btn-success rounded \">Découvrir !</a>\r\n\r\n                        <a href=\"#\" className=\"btn fw-bold  btn-outline-light rounded\">Créer un compte</a>\r\n                        </div>\r\n                   \r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"display bg-dark py-4 px-4\">\r\n                <div className=\"row\">\r\n                    <div className=\"catalogue col-8 \">\r\n                    <div className=\"d-flex justify-content-between py-4\">\r\n                        <h2 className=\"text-start text-light fw-light mr-5\">Notre catalogue de plantes</h2>\r\n                        <a href=\"#\" className=\"btn btn-sm  btn-outline-success rounded\">Nos plantes</a>\r\n                    </div>\r\n                    <Carousel>\r\n                    {plants.map((plant) => {\r\n                    return <Carousel.Item>\r\n                                <img\r\n                                className=\"rounded\"\r\n                                src={plant.image}\r\n                                />\r\n                                <Carousel.Caption>\r\n                                    <div className =\"d-flex flex-column align-items-stretch justify-content-between\">\r\n                                        <div>\r\n                                            <h3 className=\"py-5 display-3 fw-bold text-white\">{plant.name}</h3>\r\n                                            <p className=\"carousel-description mb-5 fw-medium fs-4 \">{plant.description}</p>\r\n                                        </div>\r\n                                        <div className=\"\">\r\n                                            <a href=\"#\" className=\"btn fw-bold border-white btn-success rounded\">Consulter</a>\r\n                                        </div>\r\n                                    </div> \r\n                                </Carousel.Caption>\r\n                            </Carousel.Item>\r\n                    })}\r\n                            \r\n                        </Carousel>\r\n                    </div>\r\n                    <div className=\"login-form col-4 d-flex align-items-end\">\r\n                        <LoginForm />\r\n\r\n\r\n                    </div>\r\n            \r\n                </div>\r\n\r\n            </section>\r\n\r\n\r\n        <section className=\"easy-steps py-5 px-4\">\r\n            \r\n            <div className=\"row \">\r\n                <div className=\"col-12 h-auto\">\r\n                    <div className=\"d-flex justify-content-center gap-3 align-items-center pb-5\">\r\n                        <h2 className=\"fw-normal\">Créer votre serre virtuelle</h2>\r\n                        <span className=\"fw-bold text-success py-2\"><FaPagelines size={45} />...en toute simplicité !</span>\r\n                    </div>\r\n                    <a href=\"#\" className=\"btn fw-bold  btn-outline-success rounded mb-5\">Je crée ma serre virtuelle</a>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"row procedure-cards py-2 \">\r\n                \r\n                <div className=\"col-4 d-flex justify-content-center\">\r\n                    <div className=\" card rounded shadow\" style={{maxWidth: \"20rem\"}}>\r\n                        <div className=\"card-header bg-success fw-bold text-light py-2\"><BsPersonCircle size={35} /></div>\r\n                        <div className=\"card-body\">\r\n                    \r\n                            <h4 className=\"card-title\">Je créer mon compte</h4>\r\n                            <p className=\"card-text\">La sécurité et la confidentialité de vos données sont notre priorité.<br/>\r\n                            <a className=\"link-success\" href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">Politique de confidentialité</a>\r\n                            \r\n                           </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-4 d-flex justify-content-center\">\r\n                    <div className=\" card rounded shadow\" style={{maxWidth: \"20rem\"}}>\r\n                        <div className=\"card-header bg-success fw-bold text-light py-2\"><BsFlower2 size={35} /></div>\r\n                        <div className=\"card-body\">\r\n                            <h4 className=\"card-title\">J'ajoute une plante</h4>\r\n                            <p className=\"card-text\">Vous pouvez ajouter facilement des plantes dans votre serre virtuelle en quelques clicks!</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-4 d-flex justify-content-center\">\r\n                    <div className=\" card rounded shadow\" style={{maxWidth: \"20rem\"}}>\r\n                        <div className=\"card-header bg-success fw-bold text-light py-2\"><BsClipboardData size={35} /></div>\r\n                        <div className=\"card-body\">\r\n                            <h4 className=\"card-title\">Je gère mes plantes</h4>\r\n                            <p className=\"card-text\">Grâce à votre tableau de board vous pouvez facilement gérer les plantes de votre serre virtuelle</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n                {/* </div> */}\r\n                 \r\n                    {/* <div className=\"col-4\">\r\n                        <img className=\"w-75\" src=\"https://images.unsplash.com/photo-1566664981274-ef2008590fe5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1074&q=80\" alt=\"image d'une serre de jardin\" />\r\n                    </div> */}\r\n                {/* </div> */}\r\n\r\n        </section>\r\n        \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage","\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport { BsFillEnvelopeFill } from \"react-icons/bs\";\r\nimport { BsFillTelephoneForwardFill } from \"react-icons/bs\";\r\n\r\n\r\nconst Footer = () => {\r\n    \r\n    return(\r\n\r\n       \r\n        <footer className=\"text-center text-lg-start text-muted \">\r\n        \r\n          <section className=\" main-footer pt-4 bg-success\">\r\n            <div className=\"container text-center text-md-start mt-2 text-white\">\r\n              <div className=\"row\">\r\n\r\n                <div className=\"col-md-3 col-lg-4 col-xl-3 mx-auto mb-4 \">\r\n                  <h6 className=\"text-uppercase fw-bold mb-4\">Drink up !</h6>\r\n                  <p> Vos plantes nous diront merci ! Notre inteface intuitive vous permettra d'assurer l'arrosage de vos plantes en toute facilité. </p>\r\n                </div>\r\n \r\n                <div className=\"col-md-3 col-lg-2 col-xl-2 mx-auto mb-4\">\r\n                  <h6 className=\"text-uppercase fw-bold mb-4\"> Accès rapides</h6>\r\n                  <p>\r\n                    <a href=\"#!\" className=\"link-light\">Nos plantes</a>\r\n                  </p>\r\n                  <p>\r\n                    <a href=\"#!\" className=\"link-light\">Nous contacter</a>\r\n                  </p>\r\n                  <p>\r\n                    <a href=\"#!\" className=\"link-light\">Politique de confidentialité</a>\r\n                  </p>\r\n                </div>\r\n               \r\n                <div className=\"col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0 mb-4\">\r\n                  <h6 className=\"text-uppercase fw-bold mb-4\">\r\n                    Informations de contact\r\n                  </h6>\r\n                  <div className=\"d-flex justify-content-start\">\r\n                     <BsFillHouseDoorFill size={22} /> \r\n                     <p className=\"mx-2\">69 Route de la verdure</p>\r\n                  </div>\r\n                  <div className=\"d-flex justify-content-start\">\r\n                     <BsFillEnvelopeFill size={22} /> \r\n                     <p className=\"mx-2\">drink-up@gmail.com</p>\r\n                  </div>\r\n                  <div className=\"d-flex justify-content-start\">\r\n                     <BsFillTelephoneForwardFill size={22} /> \r\n                     <p className=\"mx-2\">06 30 93 62 65</p>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          \r\n         \r\n        \r\n          {/* <!-- Copyright --> */}\r\n          <div className=\"text-center p-4 bg-dark\">\r\n            © 2021 Copyright:\r\n            <a className=\"text-reset fw-bold\" >Drink up!</a>\r\n          </div>\r\n          {/* <!-- Copyright --> */}\r\n          </section>\r\n        </footer>\r\n        \r\n    )\r\n}\r\n\r\nexport default Footer;","import './App.css';\r\nimport LoginPage from './view/pages/LoginPage';\r\nimport {BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {history} from './view/state/store';\r\nimport { useInjection } from 'inversify-react';\r\nimport IServiceRepository from './domain/adapters/repositories/IServiceRepository';\r\nimport Navbar from './view/components/Navbar';\r\nimport { ConnectedRouter} from 'connected-react-router';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from './view/state';\r\nimport { State } from './view/state/store';\r\nimport DashBoard from './view/pages/DashBoard';\r\nimport Create from './view/components/User/create';\r\nimport LandingPage from './view/pages/LandingPage';\r\nimport Footer from './view/components/footer';\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const myCarousel = document.getElementById('olivier')\r\n  console.log(myCarousel)\r\n\r\n// myCarousel.addEventListener('slide.bs.carousel', function () {\r\n//   // do something...\r\n// })\r\n \r\n  const serviceRepo = useInjection(IServiceRepository);\r\n\r\n  //1 - Vérfiie le statut de connexion de l'utilisateur dans le state à l'ouverture de l'application\r\n  const authenticationStatus: boolean = serviceRepo.isAuthenticated();\r\n  console.log('authentifié au lancement application => ' + authenticationStatus)\r\n\r\n   //2 - Vérfie si un token exite dans le local storage du  navigateur et s'il est valide !\r\n  serviceRepo.setup();\r\n\r\n  // 3 - Mise à jour du state en fonction du statut de connexion\r\n  const dispatch = useDispatch();\r\n  const { setIsAuthenticated} = bindActionCreators(actionCreators, dispatch);  \r\n  // const state = useSelector((state: State) => state);\r\n\r\n  // console.log((state));\r\n  setIsAuthenticated(authenticationStatus);\r\n  const isAuthenticated: boolean = useSelector((state: State) => state.login.isAuthenticated);\r\n  console.log('Etat du status de connexion dans state => ' + isAuthenticated)\r\n\r\n\r\n  return (  \r\n    \r\n      <ConnectedRouter history= {history}>\r\n        <Navbar/>\r\n        <main className=\"App\">\r\n          <Switch>\r\n            <Route path='/' exact component={LandingPage}/>\r\n            <Route path='/login' exact component={LoginPage}/>\r\n            {/* {isAuthenticated} ? {userRoutes}  */}\r\n            <Route path='/dashboard' render={props => {return isAuthenticated ?  <DashBoard /> : <Redirect to='/' />;}} />\r\n            <Route path='/users/create' render={props => {return isAuthenticated ?  <Create /> : <Redirect to='/' />;}} />\r\n          </Switch>\r\n        </main>\r\n        <Footer/>\r\n      </ConnectedRouter>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals =  (onPerfEntry: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","\r\n\r\n\r\nexport interface IPlant {\r\n    id: number;\r\n    name: string;\r\n    image: string;\r\n    description: string;\r\n    exposition: string;\r\n    care: string;\r\n    toxicity: string;\r\n    frequency: boolean;\r\n    type: string;\r\n}\r\n\r\n\r\nexport default class Plant {\r\n\r\n    id: number;\r\n    name: string;\r\n    image: string;\r\n    description: string;\r\n    exposition: string;\r\n    care: string;\r\n    toxicity: string;\r\n    frequency: boolean;\r\n    type: string;\r\n\r\n    constructor(id: number, name: string, image: string, description: string, exposition: string, care: string,  toxicity: string, frequency: boolean, type: string){\r\n        this.id = id;\r\n        this.name = name;\r\n        this.image = image;\r\n        this.description = description;\r\n        this.exposition = exposition;\r\n        this.care = care;\r\n        this.toxicity = toxicity;\r\n        this.frequency = frequency;\r\n        this.type = type;\r\n    }\r\n}\r\n\r\n","export const requestBuilder = (endpoint: string): string => {\r\n    const protocole: string = \"http://\";\r\n    const domain: string = \"drink-up-apiplatform.test:8080\";\r\n    const request: string = protocole + domain + endpoint;\r\n    return request;\r\n}","import { injectable } from \"inversify\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport IPlantRepository from \"../domain/adapters/repositories/IPlantRepository\";\r\nimport Plant from \"../domain/entities/Plant\";\r\nimport { requestBuilder } from \"../core/utils/requestBuilder\";\r\n\r\n\r\n\r\n@injectable()\r\nexport default class PlantRepositoryImpl implements IPlantRepository {\r\n\r\n    \r\n    public getAllPlants = async (): Promise<Plant[] | undefined> => {\r\n        \r\n        const requestUrl: string = requestBuilder(\"/api/plants\")\r\n\r\n        try {\r\n            const data: any = (await axios.get<AxiosResponse>(requestUrl)).data\r\n            // console.log(data['hydra:member'])\r\n            const plantsData: Plant[] = data['hydra:member']\r\n            const plants: Plant[] = plantsData.map( function (plant) {\r\n                return new Plant (plant.id, plant.name, plant.image, plant.description, plant.exposition, plant.care, plant.toxicity,plant.frequency, plant.type)\r\n            })\r\n            return plants;\r\n        } catch (error) {\r\n            \r\n        }\r\n        return;\r\n    }\r\n}\r\n\r\n","import { injectable } from \"inversify\";\r\nimport axios from \"axios\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport IServiceRepository from \"../domain/adapters/repositories/IServiceRepository\";\r\n\r\n\r\n@injectable()\r\nexport default class ServiceRepositoryImpl implements IServiceRepository {\r\n\r\n    // private protocole: string = 'http://';\r\n    // private domain: string = 'drink-up-apiplatform.test:8080';\r\n    // private url: string = this.protocole + this.domain;\r\n\r\n    public setup(){\r\n\r\n        //Vérification existence et validité du token\r\n        const token: string | null | undefined = window.localStorage.getItem('authToken');\r\n\r\n        if ((token !== \"undefined\" && token !== null )){\r\n        const {exp: expiration}: any = jwtDecode(token);\r\n\r\n         if(expiration * 1000 > new Date().getTime()){\r\n            this.setAxiosToken(token);\r\n            }  \r\n        }\r\n    }\r\n\r\n    private setAxiosToken (token:string): void {\r\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\r\n    }\r\n\r\n    public isAuthenticated = (): boolean => {\r\n        const token: any = window.localStorage.getItem('authToken');\r\n\r\n        if (token !== \"undefined\" && token !== null ){\r\n            const {exp: expiration}: any = jwtDecode(token);\r\n            \r\n            if(expiration * 1000 > new Date().getTime()){\r\n                return true;\r\n            }\r\n            return false\r\n        }\r\n        return false;\r\n    }\r\n}","import GardenerPlant from \"./GardenerPlant\";\r\n\r\nexport default class User {\r\n\r\n    id: number;\r\n    gender: string;\r\n    firstname: string;\r\n    surname: string;\r\n    is_notified: boolean;\r\n    gardenerPlants: GardenerPlant[];\r\n    numberOfPlants: number;\r\n\r\n    constructor(id: number, gender: string, firstname: string, surname: string, is_notified: boolean, gardenerPlants:GardenerPlant[], numberOfPlants: number){\r\n        this.id = id;\r\n        this.gender = gender;\r\n        this.firstname = firstname;\r\n        this.surname = surname;\r\n        this.is_notified = is_notified;\r\n        this.gardenerPlants = gardenerPlants;\r\n        this.numberOfPlants = numberOfPlants;\r\n    }\r\n}\r\n\r\n","import Plant from \"./Plant\";\r\n\r\nexport default class GardenerPlant implements IGardenerPlant {\r\n\r\n    id: number;\r\n    nickname: string;\r\n    sunlight: string;\r\n    size: string;\r\n    season: string;\r\n    topography: string;\r\n    location: string;\r\n    frequency: number;\r\n    image: string;\r\n\r\n    \r\n\r\n    constructor(id: number, nickname: string, sunlight: string, size: string, season: string, topography: string,  location: string, frequency: number, image: string){\r\n        this.id = id;\r\n        this.nickname = nickname;\r\n        this.sunlight = sunlight;\r\n        this.size = size;\r\n        this.season = season;\r\n        this.topography = topography;\r\n        this.location = location;\r\n        this.frequency = frequency;\r\n        this.image = image;\r\n    }\r\n}\r\n\r\nexport interface IGardenerPlant {\r\n    id: number;\r\n    nickname: string;\r\n    sunlight: string;\r\n    size: string;\r\n    season: string;\r\n    topography: string;\r\n    location: string;\r\n    frequency: number;\r\n    image: string;\r\n}\r\n\r\n","import IUserRepository from \"../domain/adapters/repositories/IUserRepository\";\r\nimport User from \"../domain/entities/user\";\r\nimport { injectable } from \"inversify\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport {requestBuilder} from \"../core/utils/requestBuilder\";\r\nimport GardenerPlant, { IGardenerPlant } from \"../domain/entities/GardenerPlant\";\r\n\r\n@injectable()\r\nexport default class UserRepositoryImpl implements IUserRepository {\r\n\r\n        private protocole: string = 'http://';\r\n        private domain: string = 'drink-up-apiplatform.test:8080';\r\n        private url: string = this.protocole + this.domain;\r\n\r\n        public getAuthenticatedUserId = () :number | null =>  {\r\n                const token: string | null = window.localStorage.getItem('authToken');\r\n\r\n                if(token){\r\n                        const data = this.parseJwt(token);\r\n                        const userId: number = data.id;\r\n                        return  userId;\r\n                }\r\n                return null;\r\n        }\r\n        public signOut = () => {\r\n                this.unsetAxiosToken();\r\n                this.removeTokenFromLocalStorage();\r\n        }\r\n        public async signIn (username: string, password: string){\r\n            \r\n            const requestUrl: string = requestBuilder(\"/api/login_check\");\r\n            const credentials: any = {username, password};\r\n            try {\r\n                   \r\n                const data: any = (await axios.post<AxiosResponse>(requestUrl, credentials)).data\r\n                const token: string = data.token\r\n                    \r\n            this.setAxiosToken(token);\r\n            this.storeTokenInLocalStorage(token);\r\n\r\n            } catch (error: any) {\r\n                return  alert (error)\r\n            }\r\n        }\r\n\r\n\r\n        public  register = async ({email, password, gender, firstname, surname, isNotified}: registerFormData): Promise<void> => {\r\n             \r\n                const apiEndPoint: string = '/api/users'  \r\n                const userDetails:  registerFormData = {email, password, gender, firstname, surname, isNotified  };\r\n                // console.log(userDetails);\r\n                // console.log(userDetails);\r\n                \r\n                try {\r\n                    const data: any = (await axios.post(this.url + apiEndPoint, userDetails)).data\r\n                } catch (error) {\r\n                        return  alert (error)\r\n                }\r\n\r\n        }\r\n        private storeTokenInLocalStorage (token: string):void {\r\n            window.localStorage.setItem('authToken', token);\r\n        }\r\n        private removeTokenFromLocalStorage ():void {\r\n                \r\n                window.localStorage.removeItem('authToken');\r\n        }\r\n        private setAxiosToken (token:string): void {\r\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\r\n        }\r\n        private unsetAxiosToken (): void {\r\n                delete axios.defaults.headers.common['Authorization'];\r\n        }\r\n\r\n        private parseJwt(token:string){\r\n                try {\r\n                        return JSON.parse(atob(token.split('.')[1]));    \r\n                } catch (error) {\r\n                        return null;     \r\n                }\r\n        }\r\n        public  getUserData = async (id:number | null): Promise<User | undefined> => {\r\n\r\n                const requestUrl: string = requestBuilder('/api/users/'+ id)\r\n\r\n                try {\r\n                        const data: any= (await axios.get<any>(requestUrl)).data;\r\n                        const gardenerPlantsData: IGardenerPlant[] = data.gardenerPlants;\r\n                        const gardenerPlants: GardenerPlant [] = gardenerPlantsData.map(function(gardenerPlant){\r\n                                \r\n                                return new GardenerPlant(gardenerPlant.id, gardenerPlant.nickname, gardenerPlant.sunlight, gardenerPlant.size, gardenerPlant.season, gardenerPlant.topography,gardenerPlant.location, gardenerPlant['plant'].frequency, gardenerPlant['plant'].image)\r\n                        })\r\n\r\n\r\n                        const user: User | undefined = new User(data.id, data.gender, data.firstname, data.surname, data.is_notified, gardenerPlants, data.totalNumberOfGardenerPlants);\r\n                       \r\n                        return user;\r\n\r\n                }catch(error){\r\n                             \r\n                }\r\n        }\r\n        \r\n}\r\nexport interface registerFormData {\r\n        email: string,\r\n        password: string,\r\n        gender: string,\r\n        firstname: string,\r\n        surname: string,\r\n        isNotified: boolean\r\n        }\r\n\r\n      ","import { Container } from \"inversify\";\r\nimport PlantRepositoryImpl from \"../application/PlantRepositoryImpl\";\r\nimport ServiceRepositoryImpl from \"../application/ServiceRepositoryImpl\";\r\nimport UserRepositoryImpl from \"../application/UserRepositoryImpl\";\r\nimport IPlantRepository from \"../domain/adapters/repositories/IPlantRepository\";\r\nimport IServiceRepository from \"../domain/adapters/repositories/IServiceRepository\";\r\nimport IUserRepository from \"../domain/adapters/repositories/IUserRepository\";\r\n\r\n\r\nconst container = new Container();\r\n\r\ncontainer.bind<IUserRepository>(IUserRepository).to(UserRepositoryImpl);\r\ncontainer.bind<IServiceRepository>(IServiceRepository).to(ServiceRepositoryImpl);\r\ncontainer.bind<IPlantRepository>(IPlantRepository).to(PlantRepositoryImpl);\r\n\r\n\r\nexport default container;","import \"reflect-metadata\"\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { Provider as Container }from 'inversify-react';\r\nimport container from './core/di';\r\nimport store from \"./view/state/store\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Container container={container}>\r\n        <Provider store = {store}>\r\n          <App />\r\n        </Provider>\r\n      </Container>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(() => {});"],"sourceRoot":""}