{"version":3,"sources":["view/state/actions/actionType.ts","view/state/action-creators/index.ts","view/state/reducers/userReducer.ts","view/state/store.ts","domain/adapters/repositories/IUserRepository.tsx","view/pages/LoginPage.tsx","domain/adapters/repositories/IServiceRepository.ts","view/components/Navbar.tsx","view/pages/DashBoard.tsx","App.tsx","reportWebVitals.ts","application/ServiceRepositoryImpl.ts","domain/entities/user.tsx","application/UserRepositoryImpl.ts","core/di.ts","index.tsx"],"names":["ActionType","signIn","username","password","repo","event","preventDefault","dispatch","a","setIsAuthenticated","replace","status","type","SET_IS_AUTHENTICATED","signOut","push","updateInput","value","inputName","UPDATE_INPUT","clearInput","CLEAR_INPUT","inputValue","getUserData","id","user","GET_USER_DATA","InitialState","isAuthenticated","credentials","userReducer","state","action","SIGNIN","SIGNOUT","name","history","createBrowserHistory","reducers","combineReducers","router","connectRouter","store","createStore","applyMiddleware","routerMiddleware","thunk","IUserRepository","injectable","LoginPage","userRepo","useInjection","useDispatch","bindActionCreators","actionCreators","useSelector","className","onSubmit","e","currentTarget","htmlFor","onChange","aria-describedby","placeholder","IServiceRepository","Navbar","isAuth","href","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","onClick","DashBoard","userId","getAuthenticatedUserId","useEffect","firstname","surname","App","serviceRepo","authenticationStatus","console","log","setup","path","exact","component","render","props","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ServiceRepositoryImpl","token","window","localStorage","getItem","jwtDecode","exp","Date","getTime","this","setAxiosToken","axios","defaults","headers","common","User","gender","is_notified","UserRepositoryImpl","protocole","domain","url","parseJwt","unsetAxiosToken","removeTokenFromLocalStorage","apiEndPoint","get","response","data","post","storeTokenInLocalStorage","setItem","removeItem","JSON","parse","atob","split","error","container","Container","bind","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ee8918e.chunk.js","sourcesContent":["export enum ActionType {\r\n    SIGNIN = 'SIGNIN',\r\n    SIGNOUT = 'SIGNOUT',\r\n    SET_IS_AUTHENTICATED = 'SET_IS_AUTHENTICATED',\r\n    UPDATE_INPUT = 'UPDATE_INPUT',\r\n    CLEAR_INPUT = 'CLEAR_INPUT',\r\n    USE_INJECTION = 'USE_INJECTION',\r\n    GET_USER_DATA = 'GET_USER_DATA'\r\n}","import { ActionType } from \"../actions/actionType\"\r\nimport { Dispatch } from \"redux\";\r\nimport { Action } from \"../actions/actions\";\r\nimport React from \"react\";\r\nimport IUserRepository from \"../../../domain/adapters/repositories/IUserRepository\";\r\nimport User from \"../../../domain/entities/user\";\r\nimport { push, replace } from 'connected-react-router'\r\nimport { report } from \"process\";\r\n\r\n\r\nexport const signIn = ( username: string, password: string, repo: IUserRepository, event:React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault()\r\n    return async (dispatch: Dispatch) =>  {\r\n        await repo.signIn(username, password);\r\n        dispatch(setIsAuthenticated(true));\r\n        dispatch(replace('/dashboard'));\r\n    }\r\n}\r\nexport const setIsAuthenticated = (status: boolean) => ({\r\n    type: ActionType.SET_IS_AUTHENTICATED,\r\n    status: status\r\n    \r\n})\r\nexport const signOut = (repo: IUserRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        repo.signOut();\r\n        dispatch(setIsAuthenticated(false));\r\n        dispatch(push('/'));\r\n    }\r\n}\r\nexport const updateInput = (value: string, inputName: string) =>  {\r\n    return (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type: ActionType.UPDATE_INPUT,\r\n            value: value,\r\n            inputName: inputName\r\n        })\r\n    }\r\n}\r\nexport const clearInput = () =>  {\r\n    return (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type: ActionType.CLEAR_INPUT,\r\n            inputValue: ''\r\n        })\r\n    }\r\n}\r\nexport const getUserData = (id: number | null, repo: IUserRepository) =>  {\r\n    return async (dispatch: Dispatch) => {\r\n        const user: Promise<User|null> = await repo.getUserData(id)\r\n        dispatch({\r\n            type: ActionType.GET_USER_DATA,\r\n            user: user\r\n        })\r\n    }\r\n}\r\n\r\n","import { Action } from \"../actions/actions\";\r\nimport { ActionType } from \"../actions/actionType\";\r\n\r\nconst InitialState: any = {\r\n    isAuthenticated: false,\r\n    credentials:  {\r\n        username:'',\r\n        password: ''\r\n    },\r\n    user: {},\r\n    inputValue: '',\r\n}\r\n\r\nconst userReducer = (state = InitialState , action: Action) => {\r\n    switch (action.type) {\r\n        case ActionType.SIGNIN:\r\n            return {\r\n                ...state,\r\n                username: action.username\r\n            }\r\n        case ActionType.SIGNOUT:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: action.isAuthenticated\r\n            }\r\n        case ActionType.SET_IS_AUTHENTICATED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: action.status\r\n            }\r\n        case ActionType.GET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            }\r\n        case ActionType.UPDATE_INPUT:\r\n            const name = action.inputName\r\n            return {\r\n                ...state,\r\n                credentials: {[name]: action.value}\r\n             };\r\n        case ActionType.CLEAR_INPUT:\r\n            return {\r\n                ...state,\r\n                inputValue: action.inputValue\r\n             };\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n\r\n}\r\n\r\nexport default userReducer;","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\n// import reducers from \"./reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createBrowserHistory } from 'history';\r\nimport {\r\n    ConnectedRouter,\r\n    connectRouter,\r\n    routerMiddleware\r\n  }from 'connected-react-router';\r\nimport userReducer from \"./reducers/userReducer\";\r\n\r\n\r\n\r\nexport const history = createBrowserHistory();\r\nconst reducers =  combineReducers({\r\n  router: connectRouter(history),\r\n  user: userReducer,\r\n  /* Add your reducers here */\r\n})\r\nconst store = createStore(\r\n  reducers,\r\n  applyMiddleware(routerMiddleware(history), thunk)\r\n);\r\n// const history = createBrowserHistory();\r\n// const store = createStore(\r\n//     reducers,\r\n//     {},\r\n//     applyMiddleware(thunk, routerMiddleware(history)));\r\n    \r\n    export default store;\r\n    export type State = ReturnType<typeof reducers>;\r\n    ","import { injectable } from \"inversify\";\r\nimport User from \"../../entities/user\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IUserRepository {\r\n    abstract signIn(username: string, password: string):void;\r\n    abstract signOut():void;\r\n    abstract getUserData(id: number | null): any ;\r\n    abstract getAuthenticatedUserId(): number | null;\r\n}","\r\nimport { useInjection } from 'inversify-react';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionCreators, State } from '../state/index';\r\nimport  { bindActionCreators } from 'redux';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\n\r\n\r\n\r\n\r\nconst LoginPage = ({isAuthenticated}: any) => {\r\n    \r\n    const userRepo = useInjection(IUserRepository);\r\n\r\n    const dispatch = useDispatch();\r\n    const { signIn , updateInput } = bindActionCreators(actionCreators, dispatch);\r\n\r\n    const state = useSelector((state: State ) => state.user);\r\n    const isAuth = useSelector((state: State ) => state.user.isAuthenticated);\r\n\r\n   \r\n\r\n    return (\r\n        <div className='pt-2 container w-50'>\r\n           <h1 className ='py-5'>Formulaire de connexion</h1>\r\n            <form onSubmit={(e: React.FormEvent<HTMLFormElement>) => signIn(e.currentTarget.username.value,e.currentTarget.password.value, userRepo, e)}> \r\n            <div className=\"form-group d-flex justify-content-center\">\r\n                <label htmlFor=\"username\" className=\"form-label mt-4 mr-4\">Adresse email</label>\r\n                <input type=\"email\" value={ state.credentials.username } onChange= {(e: React.FormEvent<HTMLInputElement>) => updateInput( e.currentTarget.value, e.currentTarget.name)} className=\"form-control\" id=\"username\" aria-describedby=\"emailHelp\" placeholder=\"Entrez votre adresse email\" />\r\n                {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n            </div>\r\n            <div className=\"form-group d-flex justify-content-center mt-4\">\r\n                <label htmlFor=\"password\" className=\"form-label mt-4 \">Mot de passe</label>\r\n                <input type=\"password\" value={ state.credentials.password}  onChange= {(e: React.FormEvent<HTMLInputElement>) => updateInput(e.currentTarget.value,  e.currentTarget.name)} className=\"form-control\" id=\"password\" placeholder=\"Entrez votre mot de passe\" />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success my-5\">Connexion</button>\r\n            </form>\r\n     </div>\r\n     );\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n","import { injectable } from \"inversify\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IServiceRepository {\r\n    abstract setup():void;\r\n    abstract isAuthenticated(): boolean\r\n}","\r\nimport { useInjection } from 'inversify-react';\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../state';\r\nimport { State } from '../state/reducers';\r\n\r\n\r\nconst Navbar = () => {\r\n    \r\n    const userRepo = useInjection(IUserRepository);\r\n\r\n    const dispatch = useDispatch();\r\n    const { signOut } = bindActionCreators(actionCreators, dispatch);\r\n    const isAuth: boolean = useSelector((state: State) => state.user.isAuthenticated);\r\n\r\n    return(\r\n\r\n\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">Drink Up !</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarColor02\" aria-controls=\"navbarColor02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n                    <ul className=\"navbar-nav me-auto\">\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Nos Plantes</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"#\">Pricing</a>\r\n                        </li>\r\n                    </ul>\r\n                    {isAuth && <>\r\n                    <ul className=' navbar-nav ml-auto'>\r\n                        <li className=\"nav-item\">\r\n                            <button onClick={() => signOut(userRepo)} className=\"btn btn-success\">Deconnexion</button>\r\n                        </li>\r\n                    </ul>\r\n                    </>}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","\r\nimport { useInjection } from 'inversify-react';\r\nimport React, { useEffect } from 'react';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionCreators} from '../state/index';\r\nimport  { $CombinedState, bindActionCreators } from 'redux';\r\nimport { State } from '../state/reducers';\r\n\r\n\r\n\r\nconst DashBoard = () => {\r\n\r\n    const userRepo: IUserRepository = useInjection(IUserRepository);\r\n    const userId: number | null = userRepo.getAuthenticatedUserId();\r\n    \r\n     useEffect(() =>  {\r\n            getUserData(userId, userRepo);\r\n      }, []);\r\n    \r\n      \r\n      const dispatch = useDispatch();\r\n      const { getUserData } = bindActionCreators(actionCreators, dispatch);\r\n      \r\n      const user = useSelector((state: State) => state.user.user);\r\n      const isAuth = useSelector((state: State) => state.user.isAuthenticated);\r\n    //   console.log('dashboard page ' +  isAuth )\r\n    //   console.log(user)\r\n    \r\n    return (\r\n        <div>\r\n        {(isAuth && (\r\n            <>\r\n            <h1>Dashboard</h1>\r\n            <div className=\"\">\r\n                <h2>{user.firstname}</h2>\r\n                <h2>{user.surname}</h2>\r\n            </div>\r\n        </> \r\n        )) || (\r\n        <h1>connexion</h1>\r\n        )\r\n    }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashBoard;","import './App.css';\nimport LoginPage from './view/pages/LoginPage';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport store from './view/state/store';\nimport {history} from './view/state/store';\nimport dashBoard from './view/pages/DashBoard';\nimport { useInjection } from 'inversify-react';\nimport IServiceRepository from './domain/adapters/repositories/IServiceRepository';\nimport Navbar from './view/components/Navbar';\nimport { ConnectedRouter,} from 'connected-react-router';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from './view/state';\nimport { State } from './view/state/reducers';\nimport DashBoard from './view/pages/DashBoard';\n\n\n\n\n\nfunction App() {\n \n  const serviceRepo = useInjection(IServiceRepository);\n\n  //1 - Vérfiie le statut de connexion de l'utilisateur dans le state à l'ouverture de l'application\n  const authenticationStatus = serviceRepo.isAuthenticated();\n  console.log('authentifié au lancement application => ' + authenticationStatus)\n\n   //2 - Vérfie si un token exite dans le local storage du  navigateur et s'il est valide !\n  serviceRepo.setup();\n\n  // 3 - Mise à jour du state en fonction du statut de connexion\n  const dispatch = useDispatch();\n  const { setIsAuthenticated} = bindActionCreators(actionCreators, dispatch);  \n  setIsAuthenticated(authenticationStatus);\n\n    const isAuthenticated: boolean = useSelector((state: State ) => state.user.isAuthenticated);\nconsole.log('Etat du status de connexion dans state => ' + isAuthenticated)\n\n\n  return (  \n    \n      <ConnectedRouter history= {history}>\n        <Navbar/>\n        <main className=\"App\">\n          <Switch>\n            <Route path='/' exact component={LoginPage}/>\n            <Route path='/dashboard' render={props => {\n              return isAuthenticated ?  <DashBoard /> : <Redirect to='/' />;\n            }}\n            />\n          </Switch>\n        </main>\n      </ConnectedRouter>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals =  (onPerfEntry: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { injectable } from \"inversify\";\r\nimport axios from \"axios\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport IServiceRepository from \"../domain/adapters/repositories/IServiceRepository\";\r\n\r\n\r\n@injectable()\r\nexport default class ServiceRepositoryImpl implements IServiceRepository {\r\n\r\n    // private protocole: string = 'http://';\r\n    // private domain: string = 'drink-up-apiplatform.test:8080';\r\n    // private url: string = this.protocole + this.domain;\r\n\r\n    public setup(){\r\n\r\n        //Vérification existence et validité du token\r\n        const token: string | null | undefined = window.localStorage.getItem('authToken');\r\n\r\n        if ((token != \"undefined\" && token != null )){\r\n        const {exp: expiration}: any = jwtDecode(token);\r\n\r\n         if(expiration * 1000 > new Date().getTime()){\r\n            this.setAxiosToken(token);\r\n            }  \r\n        }\r\n    }\r\n\r\n    private setAxiosToken (token:string): void {\r\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\r\n    }\r\n\r\n    public isAuthenticated = (): boolean => {\r\n        const token: any = window.localStorage.getItem('authToken');\r\n\r\n        if (token != \"undefined\" && token != null ){\r\n            const {exp: expiration}: any = jwtDecode(token);\r\n            \r\n            if(expiration * 1000 > new Date().getTime()){\r\n                return true;\r\n            }\r\n            return false\r\n        }\r\n            return false;\r\n    }\r\n}","\r\nexport default class User {\r\n\r\n    id: number;\r\n    gender: string;\r\n    firstname: string;\r\n    surname: string;\r\n    is_notified: boolean;\r\n\r\n    constructor(id: number, gender: string, firstname: string, surname: string, is_notified: boolean){\r\n        this.id = id;\r\n        this.gender = gender;\r\n        this.firstname = firstname;\r\n        this.surname = surname;\r\n        this.is_notified = is_notified;\r\n    }\r\n}\r\n\r\n","import IUserRepository from \"../domain/adapters/repositories/IUserRepository\";\r\nimport User from \"../domain/entities/user\";\r\nimport { injectable } from \"inversify\";\r\nimport axios from \"axios\";\r\nimport { collapseTextChangeRangesAcrossMultipleVersions } from \"typescript\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport store from \"../view/state/store\";\r\nimport {history} from '../view/state/store';\r\n\r\n\r\n@injectable()\r\nexport default class UserRepositoryImpl implements IUserRepository {\r\n\r\n        private protocole: string = 'http://';\r\n        private domain: string = 'drink-up-apiplatform.test:8080';\r\n        private url: string = this.protocole + this.domain;\r\n\r\n        public getAuthenticatedUserId = () :number | null =>  {\r\n                const token: string | null = window.localStorage.getItem('authToken');\r\n                if(token){\r\n                        const data = this.parseJwt(token);\r\n                        const userId: number = data.id;\r\n                        return  userId;\r\n                }\r\n                return null;\r\n        }\r\n\r\n        public signOut = () => {\r\n                this.unsetAxiosToken();\r\n                this.removeTokenFromLocalStorage();\r\n        }\r\n\r\n        public async signIn (username : string, password: string){\r\n\r\n            const apiEndPoint: string = '/api/login_check'\r\n            const credentials: object = {username, password};\r\n\r\n            try {\r\n            const data: any = await axios.post<Response>(this.url + apiEndPoint, credentials).then(response => response.data);\r\n            const token: string = data.token\r\n            this.setAxiosToken(token);\r\n            this.storeTokenInLocalStorage(token);\r\n            } catch (error: any) {\r\n                console.log('there was an error');  \r\n            }\r\n\r\n        }\r\n        private storeTokenInLocalStorage (token: string):void {\r\n            window.localStorage.setItem('authToken', token);\r\n        }\r\n        private removeTokenFromLocalStorage ():void {\r\n                console.log('removed from storage')\r\n                window.localStorage.removeItem('authToken');\r\n        }\r\n        private setAxiosToken (token:string): void {\r\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\r\n        }\r\n        private unsetAxiosToken (): void {\r\n                delete axios.defaults.headers.common['Authorization'];\r\n        }\r\n\r\n        private parseJwt(token:string){\r\n                try {\r\n                        return JSON.parse(atob(token.split('.')[1]));    \r\n                } catch (error) {\r\n                        return null;     \r\n                }\r\n        }\r\n        public  getUserData = async (id:number | null): Promise<any> => {\r\n\r\n                const apiEndPoint: string = '/api/users/'+ id\r\n\r\n                try {\r\n                        const data: any= await axios.get<any>(this.url + apiEndPoint).then(response => response.data);\r\n                        const user: User = new User(data.id, data.gender, data.firstname, data.surname, data.is_notified);\r\n                        \r\n                        return user;\r\n\r\n                }catch(error){\r\n                        \r\n                        console.log(error)\r\n                }\r\n                return null;\r\n        }      \r\n        }","import { Container } from \"inversify\";\r\nimport ServiceRepositoryImpl from \"../application/ServiceRepositoryImpl\";\r\nimport UserRepositoryImpl from \"../application/UserRepositoryImpl\";\r\nimport IServiceRepository from \"../domain/adapters/repositories/IServiceRepository\";\r\nimport IUserRepository from \"../domain/adapters/repositories/IUserRepository\";\r\n\r\n\r\nconst container = new Container();\r\n\r\ncontainer.bind<IUserRepository>(IUserRepository).to(UserRepositoryImpl);\r\ncontainer.bind<IServiceRepository>(IServiceRepository).to(ServiceRepositoryImpl);\r\n\r\n\r\nexport default container;","import \"reflect-metadata\"\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { Provider as Container }from 'inversify-react';\nimport container from './core/di';\nimport store from \"./view/state/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Container container={container}>\n        <Provider store = {store}>\n          <App />\n        </Provider>\n      </Container>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(() => {});"],"sourceRoot":""}