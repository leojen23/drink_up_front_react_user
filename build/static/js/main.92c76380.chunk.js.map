{"version":3,"sources":["view/state/actions/actionType.ts","view/state/reducers/loginReducer.ts","view/state/reducers/plantReducer.ts","view/state/reducers/paginationReducer.ts","view/state/reducers/gardenerPlantReducer.ts","view/state/store.ts","domain/adapters/repositories/IServiceRepository.ts","domain/adapters/repositories/IUserRepository.tsx","domain/entities/user.tsx","core/utils/requestBuilder.ts","domain/entities/GardenerPlant.ts","core/utils/corsHeadersSetter.ts","application/UserRepositoryImpl.ts","view/state/action-creators/index.ts","view/components/Navbar.tsx","view/components/formFields.tsx","view/components/User/LoginForm.tsx","domain/adapters/repositories/IGardenerPlantRepository.ts","view/pages/DashBoard.tsx","domain/adapters/repositories/IPlantRepository.tsx","view/components/plant/showPlantModal.tsx","view/pages/LandingPage.tsx","view/components/footer.tsx","view/components/User/RegisterForm.tsx","view/pages/RegisterPage.tsx","view/components/Pagination.tsx","view/pages/CataloguePage.tsx","view/components/gardenerPlant/CreateGardenerPlant.tsx","view/pages/CreateGardenerPlantPage.tsx","view/components/gardenerPlant/UpdateGardenerPlantForm.tsx","view/pages/GardenerPlantPage.tsx","App.tsx","reportWebVitals.ts","application/GardenerPlantRepositoryImpl.ts","domain/entities/Plant.tsx","application/PlantRepositoryImpl.ts","application/ServiceRepositoryImpl.ts","core/di.ts","index.tsx"],"names":["ActionType","InitialState","isAuthenticated","user","error","isLoading","loginReducer","state","action","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILED","GET_USER_DATA_REQUEST","GET_USER_DATA_SUCCESS","newState","GET_USER_DATA_FAILURE","SIGNOUT","SET_IS_AUTHENTICATED","status","CREATE_GARDENER_PLANT_REQUEST","CREATE_GARDENER_PLANT_SUCCESS","REMOVE_GARDENER_PLANT","plants","modal","id","image","name","description","exposition","care","toxicity","frequency","pagination","plantReducer","GET_PLANTS_REQUEST","GET_PLANTS_SUCCESS","GET_PLANTS_FAILURE","SET_PLANTS","SET_MODAL","plant","currentPage","paginationReducer","SET_CURRENT_PAGE","gardenerPlantReducer","history","createBrowserHistory","reducers","combineReducers","router","connectRouter","form","formReducer","login","gardenerPlant","store","createStore","applyMiddleware","routerMiddleware","thunk","IServiceRepository","injectable","IUserRepository","User","gender","firstname","surname","isNotified","gardenerPlants","numberOfPlants","numberOfOnDayWaterings","numberOfLateWaterings","numberOfUpToDateWaterings","this","requestBuilder","endpoint","protocole","GardenerPlant","nickname","sunlight","size","season","topography","location","cataloguePlantId","cataloguePlantName","nextWateringDate","lastWateringDate","wateringStatus","wateringFrequency","numberOfLateDays","corsHeadersSetter","axios","defaults","headers","post","UserRepositoryImpl","getAuthenticatedUserId","token","window","localStorage","getItem","parseJwt","signOut","unsetAxiosToken","removeTokenFromLocalStorage","register","a","email","password","requestUrl","userDetails","data","toast","success","delay","console","log","getUserData","get","gardenerPlantsData","map","moment","format","is_notified","totalNumberOfGardenerPlants","numberOnDayWaterings","water","userIRI","plantIRI","wateringDate","gardenerPlantDetails","put","username","credentials","setAxiosToken","storeTokenInLocalStorage","setItem","removeItem","common","JSON","parse","atob","split","logIn","repo","dispatch","loginRequest","signIn","userId","loginSuccess","push","loginFailed","setIsAuthenticated","logOut","fetchUserData","getUserDataRequest","getUserDataSuccess","getUserDataFailure","waterPlant","userRepo","getState","fetchPlants","getPlantsRequest","getAllPlants","getPlantsSuccess","getPlantsFailure","createGardenerPlant","registerGardenerPlant","updateGardenerPlant","gardenerPlantId","removeGardenerPlant","gardernerPlantId","deleteGardenerPlant","setCurrentPage","setModal","Navbar","useInjection","useDispatch","bindActionCreators","actionCreators","useSelector","isAuth","className","to","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","onClick","renderInputField","input","label","meta","touched","htmlFor","required","placeholder","renderSelectField","children","renderSwitchField","defaultValue","renderHiddenField","reduxForm","destroyOnUnmount","handleSubmit","onSubmit","values","Field","component","href","IGardenerPlantRepository","DashBoard","gardenerPlantRepo","Moment","useEffect","role","scope","data-toggle","data-placement","title","length","style","maxWidth","src","alt","confirmAlert","message","buttons","confirmValidation","IPlantRepository","ShowPlantModal","props","Modal","aria-labelledby","centered","Header","closeButton","Title","Body","LandingPage","plantRepo","useState","modalShow","setModalShow","useLocation","pathname","hash","key","scrollTo","setTimeout","replace","element","document","getElementById","scrollIntoView","Carousel","Item","Caption","Button","variant","show","onHide","target","rel","Footer","submit","passwordReg","value","selected","RegisterPage","Pagination","itemsPerPage","onPageChange","pageCount","Math","ceil","pages","i","page","getData","items","start","slice","CataloguePage","paginatedPlants","Accordion","flush","eventKey","toString","enableReinitialize","plantId","CreateGardenerPlantPage","initialValues","GardenerPlantPage","useParams","Object","keys","filter","parseInt","App","myCarousel","serviceRepo","authenticationStatus","setup","path","exact","render","position","POSITION","BOTTOM_RIGHT","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GardenerPlantRepositoryImpl","delete","Plant","PlantRepositoryImpl","plantsData","ServiceRepositoryImpl","jwtDecode","exp","Date","getTime","container","Container","bind","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.92c76380.chunk.js","sourcesContent":["export enum ActionType {\r\n    //LOGIN / USER ACTION TYPES ---------------------------------\r\n    LOGIN_REQUEST = 'LOGIN_REQUEST',\r\n    LOGIN_SUCCESS = \"LOGIN_SUCCESS\",\r\n    LOGIN_FAILED = \"LOGIN_FAILED\",\r\n    SIGNIN = 'SIGNIN',\r\n    REGISTER = 'REGISTER',\r\n    SIGNOUT = 'SIGNOUT',\r\n    SET_IS_AUTHENTICATED = 'SET_IS_AUTHENTICATED',\r\n    GET_USER_DATA_REQUEST = 'GET_USER_DATA_REQUEST',\r\n    GET_USER_DATA_SUCCESS = 'GET_USER_DATA_SUCCESS',\r\n    GET_USER_DATA_FAILURE = 'GET_USER_DATA_FAILURE',\r\n    WATER_PLANT ='WATER_PLANT',\r\n\r\n    //PLANT ACTION TYPES ---------------------------------\r\n\r\n    SET_PLANTS = 'SET_PLANTS',\r\n    SET_MODAL = 'SET_MODAL',\r\n    GET_PLANTS_REQUEST = 'GET_PLANTS_REQUEST',\r\n    GET_PLANTS_SUCCESS = 'GET_PLANTS_SUCCESS',\r\n    GET_PLANTS_FAILURE = 'GET_PLANTS_FAILURE',\r\n\r\n\r\n    //GARDNERPLANT ACTION TYPES ---------------------------------\r\n\r\n    CREATE_GARDENER_PLANT_REQUEST = 'CREATE_GARDENER_PLANT_REQUEST',\r\n    CREATE_GARDENER_PLANT_SUCCESS = 'CREATE_GARDENER_PLANT_SUCCESS',\r\n    CREATE_GARDENER_PLANT_FAILURE = 'CREATE_GARDENER_PLANT_FAILURE',\r\n    REMOVE_GARDENER_PLANT =\"REMOVE_GARDENER_PLANT\",\r\n\r\n\r\n    //PAGINATION ACTION TYPES ---------------------------------\r\n\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n}","import { AnyAction } from \"redux\";\r\nimport User from \"../../../domain/entities/user\";\r\n\r\nimport { Action } from \"../actions/actionInterfaces\";\r\nimport { ActionType } from \"../actions/actionType\";\r\n\r\ninterface LoginState{\r\n    isAuthenticated: boolean,\r\n    user: any,\r\n    error: string | null,\r\n    isLoading: boolean\r\n}\r\n\r\nconst InitialState: LoginState= {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    error: '',\r\n    isLoading: true\r\n}\r\n\r\nconst loginReducer = (state: LoginState = InitialState , action: Action): LoginState => {\r\n    switch (action.type) {\r\n        case ActionType.LOGIN_REQUEST: \r\n        return {\r\n            ...state, \r\n            isLoading: true\r\n        }\r\n        case ActionType.LOGIN_SUCCESS:\r\n            return {\r\n                ...state, \r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                user: action.user\r\n            }\r\n        case ActionType.LOGIN_FAILED:\r\n            return {\r\n                ...state, \r\n                isLoading: false, \r\n                error: action.error\r\n            }\r\n        case ActionType.GET_USER_DATA_REQUEST: \r\n        return {\r\n            ...state, \r\n            isLoading: true\r\n        }\r\n        case ActionType.GET_USER_DATA_SUCCESS:\r\n        \r\n            let newState: LoginState = {\r\n                ...state, \r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                user: action.user\r\n            }\r\n            // console.log(newState)\r\n            return newState\r\n        case ActionType.GET_USER_DATA_FAILURE:\r\n            return {\r\n                ...state, \r\n                isLoading: false, \r\n                error: action.error\r\n            }\r\n        case ActionType.SIGNOUT:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case ActionType.SET_IS_AUTHENTICATED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: action.status\r\n        }\r\n\r\n        case ActionType.CREATE_GARDENER_PLANT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n        }\r\n        case ActionType.CREATE_GARDENER_PLANT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n        }\r\n        case ActionType.REMOVE_GARDENER_PLANT:\r\n            return {\r\n                ...state,\r\n                \r\n        }\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default loginReducer;\r\n\r\n","\r\nimport { IPlant } from \"../../../domain/entities/Plant\";\r\nimport { Action } from \"../actions/actionInterfaces\";\r\nimport { ActionType } from \"../actions/actionType\";\r\n\r\ninterface PlantState{\r\n    plants: IPlant[];\r\n    modal: IPlant\r\n    pagination: {\r\n    }\r\n    isLoading: boolean\r\n    error: string\r\n}\r\n\r\nconst InitialState: PlantState= {\r\n    plants: [],\r\n    modal: {\r\n        id: 0 ,\r\n        image: '',\r\n        name:'',\r\n        description:'',\r\n        exposition: '',\r\n        care:'',\r\n        toxicity: '',\r\n        frequency:0,\r\n        type: '',\r\n    },\r\n    pagination:{},\r\n    isLoading: false,\r\n    error: \"\"\r\n}\r\n\r\nconst plantReducer = (state: PlantState = InitialState , action: Action): PlantState => {\r\n    switch (action.type) {\r\n        \r\n        case ActionType.GET_PLANTS_REQUEST: \r\n        return {\r\n            ...state, \r\n            isLoading: true\r\n        }\r\n        case ActionType.GET_PLANTS_SUCCESS: \r\n        return {\r\n            ...state, \r\n            plants: action.plants,\r\n            isLoading: false\r\n        }\r\n        case ActionType.GET_PLANTS_FAILURE: \r\n        return {\r\n            ...state, \r\n            error: action.error\r\n        }\r\n\r\n\r\n        case ActionType.SET_PLANTS: \r\n        return {\r\n            ...state, \r\n            plants: action.plants\r\n        }\r\n        case ActionType.SET_MODAL: \r\n        return {\r\n            ...state, \r\n            modal:action.plant\r\n        }\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default plantReducer;\r\n\r\n","import { Action } from \"../actions/actionInterfaces\";\r\nimport { ActionType } from \"../actions/actionType\";\r\n\r\ninterface PaginationState{\r\n    currentPage: number;\r\n} \r\n\r\nconst InitialState: PaginationState= {\r\n    currentPage: 1\r\n}\r\n\r\nconst paginationReducer = (state: PaginationState = InitialState , action: Action): PaginationState => {\r\n    switch (action.type) {\r\n        \r\n        case ActionType.SET_CURRENT_PAGE: \r\n        return {\r\n            ...state, \r\n            currentPage: action.currentPage\r\n        }\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default paginationReducer;\r\n\r\n","import { actionTypes } from \"redux-form\"\r\nimport { Action } from \"../actions/actionInterfaces\"\r\nimport { ActionType } from \"../actions/actionType\"\r\n\r\ninterface GardenerPlantState{\r\n    isLoading: boolean\r\n    error: string\r\n}\r\n\r\nconst InitialState: GardenerPlantState= {\r\n    isLoading: true,\r\n    error: \"\"\r\n}\r\n\r\nconst gardenerPlantReducer = (state: GardenerPlantState = InitialState , action: Action): GardenerPlantState => {\r\n    switch (action.type) {\r\n        \r\n//         case ActionType.CREATE_GARDENER_PLANT_REQUEST: \r\n//         return {\r\n//             ...state, \r\n//             isLoading: false\r\n//            }  \r\n//         case ActionType.CREATE_GARDENER_PLANT_SUCCESS: \r\n//            return {\r\n//             ...state, \r\n//             isLoading: false\r\n//            }   \r\n//         case ActionType.CREATE_GARDENER_PLANT_FAILURE: \r\n//            return {\r\n//             ...state, \r\n//             error: action.error\r\n//            }   \r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default gardenerPlantReducer;\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createBrowserHistory } from 'history';\r\nimport {\r\n    ConnectedRouter,\r\n    connectRouter,\r\n    routerMiddleware\r\n  }from 'connected-react-router';\r\n// import userReducer from \"./reducers/userReducer\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport loginReducer from \"./reducers/loginReducer\";\r\nimport plantReducer from \"./reducers/plantReducer\";\r\nimport paginationReducer from \"./reducers/paginationReducer\";\r\nimport gardenerPlantReducer from \"./reducers/gardenerPlantReducer\";\r\n\r\n\r\n\r\nexport const history = createBrowserHistory();\r\nconst reducers =  combineReducers({\r\n  router: connectRouter(history),\r\n  form: formReducer,\r\n  login: loginReducer,\r\n  plant: plantReducer,\r\n  pagination: paginationReducer,\r\n  gardenerPlant: gardenerPlantReducer\r\n})\r\nconst store = createStore(\r\n  reducers,\r\n  applyMiddleware(routerMiddleware(history), thunk)\r\n);\r\n\r\n    \r\nexport default store;\r\nexport type State = ReturnType<typeof reducers>;\r\n    // Infer the `RootState` and `AppDispatch` types from the store itself\r\n//     export type RootState = ReturnType<typeof store.getState>\r\n// // Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\n//     export type AppDispatch = typeof store.dispatch \r\n    ","import { injectable } from \"inversify\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IServiceRepository {\r\n    abstract setup():void;\r\n    abstract isAuthenticated(): boolean\r\n}","import { injectable } from \"inversify\";\r\nimport { registerFormData } from \"../../../application/UserRepositoryImpl\";\r\nimport { IGardenerPlant } from \"../../entities/GardenerPlant\";\r\nimport User from \"../../entities/user\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IUserRepository {\r\n    abstract signIn(username: string, password: string):void;\r\n    abstract register({gender, firstname, surname,email, password, isNotified }: registerFormData):Promise<void>;\r\n    abstract signOut():void;\r\n    abstract getUserData(id: number | undefined): Promise<User | undefined> ;\r\n    abstract getAuthenticatedUserId(): number | undefined;\r\n    abstract water (gardenerPlant:IGardenerPlant, userIRI: string, plantIRI: string, wateringDate: string): Promise<void>;\r\n}","import GardenerPlant from \"./GardenerPlant\";\r\n\r\nexport interface IUser {\r\n    id: number;\r\n    gender: string;\r\n    firstname: string;\r\n    surname: string;\r\n    isNotified: boolean;\r\n    gardenerPlants: GardenerPlant[];\r\n    numberOfPlants: number;\r\n    numberOfOnDayWaterings: number;\r\n    numberOfLateWaterings: number;\r\n    numberOfUpToDateWaterings: number;\r\n}\r\nexport default class User {\r\n\r\n    id: number;\r\n    gender: string;\r\n    firstname: string;\r\n    surname: string;\r\n    isNotified: boolean;\r\n    gardenerPlants: GardenerPlant[];\r\n    numberOfPlants: number;\r\n    numberOfOnDayWaterings: number;\r\n    numberOfLateWaterings: number;\r\n    numberOfUpToDateWaterings: number;\r\n\r\n    constructor(id: number, gender: string, firstname: string, surname: string, isNotified: boolean, gardenerPlants:GardenerPlant[], numberOfPlants: number, numberOfOnDayWaterings: number, numberOfLateWaterings: number, numberOfUpToDateWaterings: number){\r\n        this.id = id;\r\n        this.gender = gender;\r\n        this.firstname = firstname;\r\n        this.surname = surname;\r\n        this.isNotified = isNotified;\r\n        this.gardenerPlants = gardenerPlants;\r\n        this.numberOfPlants = numberOfPlants;\r\n        this.numberOfOnDayWaterings = numberOfOnDayWaterings;\r\n        this.numberOfLateWaterings = numberOfLateWaterings;\r\n        this.numberOfUpToDateWaterings = numberOfUpToDateWaterings;\r\n    }\r\n}\r\n\r\n","export const requestBuilder = (endpoint: string): string => {\r\n    const protocole: string = \"https://\";\r\n    const domain: string = \"api.cda2-devops-olivier.simplon-roanne.com\";\r\n    const request: string = protocole + domain + endpoint;\r\n    return request;\r\n}\r\n// export const requestBuilder = (endpoint: string): string => {\r\n//     const protocole: string = \"http://\";\r\n//     const domain: string = \"drink-up-apiplatform.test:8080\";\r\n//     const request: string = protocole + domain + endpoint;\r\n//     return request;\r\n// }","export interface IGardenerPlant {\r\n    id: number;\r\n    nickname: string;\r\n    sunlight: string;\r\n    size: string;\r\n    season: string;\r\n    topography: string;\r\n    location: string;\r\n    frequency: number;\r\n    image: string;\r\n    cataloguePlantId: number;\r\n    cataloguePlantName: string;\r\n    nextWateringDate: string;\r\n    lastWateringDate: string;\r\n    wateringStatus: number;\r\n    wateringFrequency: number;\r\n    numberOfLateDays: number;\r\n}\r\nexport default class GardenerPlant implements IGardenerPlant {\r\n\r\n    id: number;\r\n    nickname: string;\r\n    sunlight: string;\r\n    size: string;\r\n    season: string;\r\n    topography: string;\r\n    location: string;\r\n    frequency: number;\r\n    image: string;\r\n    cataloguePlantId: number;\r\n    cataloguePlantName: string;\r\n    nextWateringDate: string;\r\n    lastWateringDate: string;\r\n    wateringStatus: number;\r\n    wateringFrequency: number;\r\n    numberOfLateDays: number;\r\n\r\n    constructor(id: number, nickname: string, sunlight: string, size: string, season: string, topography: string,  location: string, frequency: number, image: string, cataloguePlantId: number,  cataloguePlantName: string, nextWateringDate: string,  lastWateringDate: string, wateringStatus: number,  wateringFrequency: number, numberOfLateDays: number){\r\n        this.id = id;\r\n        this.nickname = nickname;\r\n        this.sunlight = sunlight;\r\n        this.size = size;\r\n        this.season = season;\r\n        this.topography = topography;\r\n        this.location = location;\r\n        this.frequency = frequency;\r\n        this.image = image;\r\n        this.cataloguePlantId = cataloguePlantId;\r\n        this.cataloguePlantName = cataloguePlantName;\r\n        this.nextWateringDate = nextWateringDate\r\n        this.lastWateringDate = lastWateringDate\r\n        this.wateringStatus = wateringStatus\r\n        this.wateringFrequency = wateringFrequency\r\n        this.numberOfLateDays = numberOfLateDays\r\n    }\r\n}\r\n\r\n\r\n","export const corsHeadersSetter = (axios): void => {\r\n    axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\r\n}","import IUserRepository from \"../domain/adapters/repositories/IUserRepository\";\r\nimport User, { IUser } from \"../domain/entities/user\";\r\nimport { injectable } from \"inversify\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport {requestBuilder} from \"../core/utils/requestBuilder\";\r\nimport GardenerPlant, { IGardenerPlant } from \"../domain/entities/GardenerPlant\";\r\nimport { toast } from \"react-toastify\";\r\nimport { isConstructorDeclaration } from \"typescript\";\r\nimport moment from \"moment\";\r\nimport { corsHeadersSetter } from \"../core/utils/corsHeadersSetter\";\r\n\r\ncorsHeadersSetter(axios)\r\n@injectable()\r\nexport default class UserRepositoryImpl implements IUserRepository {\r\n\r\n        // const requestUrl = requestBuilder('/api/gardener_plants/' + gardenerPlant.id);\r\n\r\n        // private protocole: string = 'http://';\r\n        // private domain: string = 'drink-up-apiplatform.test:8080';\r\n        // private url: string = this.protocole + this.domain;\r\n        // const requestUrl:string = requestBuilder('/api/users');\r\n\r\n        public getAuthenticatedUserId = () :number | undefined =>  {\r\n                const token: string | null = window.localStorage.getItem('authToken');\r\n\r\n                if(token){\r\n                        const data = this.parseJwt(token);\r\n                        const userId: number = data.id;\r\n                        return  userId;\r\n                }\r\n                return undefined;\r\n        }\r\n        public signOut = () => {\r\n                this.unsetAxiosToken();\r\n                this.removeTokenFromLocalStorage();\r\n        }\r\n\r\n        public async signIn (username: string, password: string){\r\n            \r\n            const requestUrl: string = requestBuilder(\"/api/login_check\");\r\n            const credentials: userCredentials = {username, password};\r\n            try {\r\n                    const data: any = (await axios.post<AxiosResponse>(requestUrl, credentials)).data\r\n                    const token: string = data.token\r\n            this.setAxiosToken(token);\r\n            this.storeTokenInLocalStorage(token);\r\n\r\n            } catch (error: any) {\r\n                toast.error('une erreur est survenue, vérifier vos identifiants de connexion', { delay: 2000 })\r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n        public  register = async ({email, password, gender, firstname, surname, isNotified}: registerFormData): Promise<void> => {\r\n             \r\n                // const apiEndPoint: string = '/api/users'  \r\n                const requestUrl:string = requestBuilder('/api/users');\r\n                const userDetails:  registerFormData = {email, password, gender, firstname, surname, isNotified  };\r\n                \r\n                try {\r\n                        // console.log('ppl')\r\n                    const data: any = (await axios.post(requestUrl, userDetails)).data\r\n                    toast.success('Votre compte a été créé avec succès !', { delay: 2000 })\r\n                } catch (error) {\r\n                        toast.error(\"Une erreur s'est produite lors de la création de votre compte !\", { delay: 2000 })\r\n                        console.log(error)\r\n                }\r\n\r\n        }\r\n        private storeTokenInLocalStorage (token: string):void {\r\n            window.localStorage.setItem('authToken', token);\r\n        }\r\n        private removeTokenFromLocalStorage ():void {\r\n                \r\n                window.localStorage.removeItem('authToken');\r\n        }\r\n        private setAxiosToken (token:string): void {\r\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\r\n        }\r\n        private unsetAxiosToken (): void {\r\n                delete axios.defaults.headers.common['Authorization'];\r\n        }\r\n\r\n        private parseJwt(token:string){\r\n                try {\r\n                        return JSON.parse(atob(token.split('.')[1]));    \r\n                } catch (error) {\r\n                        return null;     \r\n                }\r\n        }\r\n        public  getUserData = async (id:number | undefined): Promise<User | undefined> => {\r\n\r\n                const requestUrl: string = requestBuilder('/api/users/'+ id)\r\n                try {\r\n                        const data: any= (await axios.get<any>(requestUrl)).data;\r\n                        const gardenerPlantsData: IGardenerPlant[] = data.gardenerPlants;\r\n                        const gardenerPlants: IGardenerPlant [] = gardenerPlantsData.map(function(gardenerPlant){\r\n                                \r\n                                return new GardenerPlant(gardenerPlant.id, gardenerPlant.nickname, gardenerPlant.sunlight, gardenerPlant.size, gardenerPlant.season, gardenerPlant.topography,gardenerPlant.location, gardenerPlant['plant'].frequency, gardenerPlant['plant'].image, gardenerPlant['plant'].id, gardenerPlant['plant'].name, gardenerPlant.nextWateringDate, moment(gardenerPlant.lastWateringDate).format('YYYY-MM-DD'), gardenerPlant.wateringStatus, gardenerPlant.wateringFrequency, gardenerPlant.numberOfLateDays)\r\n                        })\r\nconsole.log(gardenerPlants);\r\n                        const user: IUser | undefined = new User(data.id, data.gender, data.firstname, data.surname, data.is_notified, gardenerPlants, data.totalNumberOfGardenerPlants, data.numberOnDayWaterings, data.numberOfLateWaterings, data.numberOfUpToDateWaterings);\r\n\r\n                        return user;\r\n\r\n                }catch(error){\r\n                   console.log(error)           \r\n                }\r\n        }\r\n        \r\n        public water = async (gardenerPlant: IGardenerPlant, userIRI: string, plantIRI:string, wateringDate: string): Promise<void> => {\r\n\r\n                const requestUrl = requestBuilder('/api/gardener_plants/' + gardenerPlant.id);\r\n                const gardenerPlantDetails = {user: userIRI, plant:plantIRI , nickname: gardenerPlant.nickname, sunlight: gardenerPlant.sunlight, size: gardenerPlant.size, season:gardenerPlant.season, topography:gardenerPlant.topography, location: gardenerPlant.location, lastWateringDate: wateringDate };\r\n        \r\n                try {\r\n                        const data: any = (await axios.put(requestUrl, gardenerPlantDetails)).data\r\n                        \r\n                } catch (error) {\r\n                    toast.error('Une erreur est survenue lors de la modification de votre plante', { delay: 2000 })\r\n                     console.log(error)\r\n                }\r\n            }\r\n\r\n        \r\n}\r\nexport interface registerFormData {\r\n        email: string,\r\n        password: string,\r\n        gender: string,\r\n        firstname: string,\r\n        surname: string,\r\n        isNotified: boolean\r\n}\r\n\r\nexport interface userCredentials {\r\n        username: string\r\n        password: string\r\n}","import { ActionType } from \"../actions/actionType\"\r\nimport { Dispatch } from \"redux\";\r\nimport IUserRepository from \"../../../domain/adapters/repositories/IUserRepository\";\r\nimport User, { IUser } from \"../../../domain/entities/user\";\r\nimport { push, replace } from 'connected-react-router'\r\nimport { Action } from \"../actions/actionInterfaces\";\r\nimport { IPlant } from \"../../../domain/entities/Plant\";\r\nimport IPlantRepository from \"../../../domain/adapters/repositories/IPlantRepository\";\r\nimport { useInjection } from \"inversify-react\";\r\nimport IGardenerPlantRepository from \"../../../domain/adapters/repositories/IGardenerPlantRepository\";\r\nimport { registerGardenerPlantFormData, updateGardenerPlantFormData } from \"../../../application/GardenerPlantRepositoryImpl\";\r\nimport { toast } from \"react-toastify\";\r\nimport UserRepositoryImpl from \"../../../application/UserRepositoryImpl\";\r\nimport { IGardenerPlant } from \"../../../domain/entities/GardenerPlant\";\r\n\r\n// const userRepo: IUserRepository = useInjection(IUserRepository);\r\n\r\nexport interface LoginData {\r\n    username: string,\r\n    password: string,\r\n}\r\n\r\nexport const logIn = ({username, password}, repo: IUserRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        dispatch(loginRequest({username, password}));\r\n        await repo.signIn(username, password);\r\n\r\n        const userId: number | undefined = repo.getAuthenticatedUserId();\r\n        const user: User|undefined = await repo.getUserData(userId);\r\n        \r\n        if (user){\r\n            dispatch(loginSuccess(user));\r\n            dispatch(push('/serre-virtuelle'));\r\n            toast.success('Vous êtes connecté(e) à votre serre virtuelle !', { delay: 2000 })\r\n          }else {\r\n              dispatch(loginFailed('une erreur est survenue'))\r\n          }\r\n      }\r\n  }\r\nexport function loginRequest(data: LoginData): Action{\r\n    return { \r\n        type: ActionType.LOGIN_REQUEST\r\n    };\r\n  }\r\nexport function loginSuccess(user: User): Action {\r\n    return { \r\n        type: ActionType.LOGIN_SUCCESS, \r\n        user: user,\r\n    };\r\n}\r\nexport function loginFailed(error: string): Action {\r\n    return { \r\n        type: ActionType.LOGIN_FAILED, \r\n        error: error\r\n    };\r\n}\r\nexport const setIsAuthenticated = (status: boolean) => {\r\n    return {\r\n        type: ActionType.SET_IS_AUTHENTICATED,\r\n        status: status\r\n    }\r\n}\r\nexport const logOut = (repo: IUserRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        repo.signOut();\r\n        dispatch(signOut());\r\n        dispatch(push('/'));\r\n        toast.success('Vous êtes désormais deconnecté(e)', { delay: 1000 })\r\n    }\r\n}\r\nexport const signOut = () =>  ({\r\n        type: ActionType.SIGNOUT,\r\n        isAuthenticated: false\r\n    })\r\n\r\nexport const fetchUserData = (userId: number | undefined, repo: IUserRepository) => {\r\n\r\n    return async (dispatch: Dispatch) =>  {\r\n        dispatch(getUserDataRequest())\r\n        const user: IUser | undefined = await repo.getUserData(userId);\r\n        dispatch(getUserDataSuccess(user));\r\n        // console.log('ça marche aussi')\r\n    }\r\n}\r\n\r\nexport const getUserDataRequest = () =>  ({\r\n    type: ActionType.GET_USER_DATA_REQUEST,\r\n})\r\nexport const getUserDataSuccess= (user: IUser | undefined) =>  ({\r\n    type: ActionType.GET_USER_DATA_SUCCESS,\r\n    user: user\r\n})\r\nexport const getUserDataFailure = (error: string) =>  ({\r\n    type: ActionType.GET_USER_DATA_FAILURE,\r\n    error: error\r\n})\r\n\r\nexport const waterPlant = (gardenerPlant: IGardenerPlant, userRepo: IUserRepository, wateringDate: string) => {\r\n    return async (dispatch: Dispatch, getState) => {\r\n\r\n        const state = getState('login')\r\n        const userId = state.login.user.id\r\n        const userIRI = \"/api/users/\" + userId;\r\n        const plantIRI = \"/api/plants/\" + gardenerPlant.cataloguePlantId;\r\n        await userRepo.water(gardenerPlant, userIRI, plantIRI, wateringDate)\r\n        const user: IUser | undefined = await userRepo.getUserData(userId);\r\n        dispatch(getUserDataSuccess(user));\r\n        toast.success('Votre plante a été arrosée et vous remercie !', { delay: 1000 })\r\n    }\r\n}\r\n\r\n\r\n// PLANTS ACTIONS -------------------------------------------------------------------\r\nexport const fetchPlants = (repo: IPlantRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        dispatch(getPlantsRequest())\r\n        const plants: IPlant[] | undefined = await  repo.getAllPlants();\r\n        dispatch(getPlantsSuccess(plants));\r\n    }\r\n}\r\nexport const getPlantsRequest = () =>  ({\r\n    type: ActionType.GET_PLANTS_REQUEST,\r\n})\r\nexport const getPlantsSuccess = (plants: IPlant[] | undefined) =>  ({\r\n    type: ActionType.GET_PLANTS_SUCCESS,\r\n    plants: plants\r\n})\r\nexport const getPlantsFailure = (error: string) =>  ({\r\n    type: ActionType.GET_PLANTS_FAILURE,\r\n    error: error\r\n})\r\n\r\n\r\n\r\n\r\n// GARDENER PLANTS ACTIONS -------------------------------------------------------------------\r\nexport const createGardenerPlant = ({user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate}: registerGardenerPlantFormData, repo: IGardenerPlantRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n\r\n        await repo.registerGardenerPlant({user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate})\r\n        dispatch(push('/serre-virtuelle'));\r\n    }\r\n}\r\nexport const updateGardenerPlant = (gardenerPlantId: number, {user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate}: updateGardenerPlantFormData, repo: IGardenerPlantRepository) => {\r\n    \r\n    return async (dispatch: Dispatch) => {\r\n\r\n        await repo.updateGardenerPlant(gardenerPlantId, {user:user, plant:plant, nickname: nickname, sunlight: sunlight, size: size, season: season, topography: topography, location: location, lastWateringDate: lastWateringDate})\r\n        dispatch(push('/serre-virtuelle'));\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport const removeGardenerPlant = (gardernerPlantId: number, repo: IGardenerPlantRepository, userId) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        await repo.deleteGardenerPlant(gardernerPlantId)\r\n        const userRepo = new UserRepositoryImpl();\r\n        const user: IUser | undefined = await userRepo.getUserData(userId);\r\n        dispatch(getUserDataSuccess(user));\r\n    }\r\n}\r\n\r\n// PAGINATION ACTIONS -------------------------------------------------------------------\r\nexport const setCurrentPage = (currentPage: number) =>  ({\r\n    type: ActionType.SET_CURRENT_PAGE,\r\n    currentPage: currentPage\r\n})\r\n\r\n// LANDING PAGE MODAL ACTIONS -------------------------------------------------------------------\r\nexport const setModal = (plant: IPlant) =>  ({\r\n    type: ActionType.SET_MODAL,\r\n    plant: plant\r\n})","\r\nimport { useInjection } from 'inversify-react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../state';\r\nimport { State } from '../state/store';\r\nimport { SiWeightsandbiases } from \"react-icons/si\";\r\nimport {BrowserRouter as Router, Switch, Route, Redirect, NavLink, Link} from \"react-router-dom\";\r\nimport User from '../../domain/entities/user';\r\nimport { FaPagelines } from \"react-icons/fa\";\r\n\r\n\r\nconst Navbar = () => {\r\n    \r\n  \r\n    const userRepo = useInjection(IUserRepository);\r\n    const dispatch = useDispatch();\r\n    const { logOut } = bindActionCreators(actionCreators, dispatch);\r\n    const user: User = useSelector((state: State) => state.login.user);\r\n    const isAuth: boolean = useSelector((state: State) => state.login.isAuthenticated);\r\n    \r\n\r\n    return(\r\n        <div className=\"\">\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand d-flex flex-column align-items-center\" to=\"/\">\r\n                        <span className=\"text-success\"><SiWeightsandbiases size={45} /></span>\r\n                        <small className=\"text-success fs-6\">Drink up</small>\r\n                    </Link>\r\n                \r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#main-nav\" aria-controls=\"main-nav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"main-nav\">\r\n                        <ul className=\"navbar-nav me-auto\">\r\n                            {isAuth && <>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link \" to=\"/serre-virtuelle\">Ma serre virtuelle</Link>\r\n                            </li>\r\n                            </>}\r\n                            <li className=\"nav-item\" aria-current=\"page\">\r\n                                <Link className=\"nav-link \"  to=\"/catalogue\">Nos Plantes</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"#\">Guide pratique</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"#\">Nous contacter</Link>\r\n                            </li>\r\n\r\n                        </ul>\r\n                        {!isAuth && <>\r\n                        <ul className=' navbar-nav ml-auto'>\r\n                            <li className=\"nav-item\">\r\n                                <Link to=\"/#presentation-login\" onClick={() => {}} className=\"btn btn-success rounded w-auto\">Connexion</Link>\r\n                            </li>\r\n                        </ul>\r\n                        </>}\r\n                        {isAuth && <>\r\n                        <div className=\"text-dark bg-light d-flex justify-content-center align-items-center p-2 border rounded-circle m-3\">\r\n                            <span className=\"text-dark fw-normal fs-3\">{user.numberOfPlants}</span>\r\n                            <span className=\"text-dark\"><FaPagelines size={25} /></span>\r\n                        </div>\r\n                        <ul className=' navbar-nav ml-auto '>\r\n                            <li className=\"nav-item\">\r\n                                <button onClick={() => {logOut(userRepo)}}className=\"btn btn-outline-success rounded w-auto\">Deconnexion</button>\r\n                            </li>\r\n                        </ul>\r\n                        </>}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","\r\n\r\nimport DatePicker from \"react-widgets/DatePicker\";\r\n\r\nexport const renderInputField = ({input, type, label, meta: {touched, error} }:any) => (\r\n    <div className=\"form-group\">\r\n        <div className=\"form-group text-light\">\r\n            <label htmlFor={input.name} className=\"form-label mt-4 mr-4 float-start\">{label}</label>\r\n            <input {...input} required type={ type } id={input.name} className=\"form-control rounded\" placeholder={label}/>\r\n            {touched && error &&\r\n            <small className='error'>{error}</small>}\r\n        </div>\r\n    </div>\r\n);\r\nexport const renderSelectField = ({input, type, label, children, meta: {touched, error} }:any) => (\r\n    <div className=\"form-group field text-light\">\r\n        <label htmlFor={input.name} className=\"form-label mt-4 float-start\">{label}</label>\r\n        <select {...input} className='form-select rounded'>\r\n            {children}\r\n        </select>\r\n        {touched && (error && <small className=\"help is-danger\">{error}</small>)}\r\n    </div>\r\n);\r\nexport const renderSwitchField = ({input, type, label, meta: {touched, error}, defaultValue }:any) => (\r\n    <div className=\"form-check form-switch mt-4 text-light\">\r\n        <input {...input} className=\"form-check-input \"  type={type} id={input.name} defaultValue={defaultValue} name='isNotified' />\r\n        <label className=\"form-check-label float-start ml-5\" htmlFor={input.name} >{label}</label>\r\n    </div>\r\n);\r\n\r\nexport const renderHiddenField = ({input, type, meta: {touched, error} }:any) => (\r\n    <div className=\"form-group text-light\">\r\n        <input {...input} type={ type } id={input.name} className=\"form-control rounded\"/>\r\n        {touched && error &&\r\n        <small className='error'>{error}</small>}\r\n    </div>\r\n);\r\n\r\nexport const renderDateTimePicker1 = ({ input: { onChange, value }, showTime }) =>\r\n  <DatePicker \r\n  />\r\n\r\n\r\n\r\n// export const renderDatePicker = ({ input: { onChange, value}, label, showTime }) =>\r\n// <div className=\"form-group text-light\">\r\n//     <input {...input} type={ type } id={input.name} className=\"form-control rounded\"/>{touched && error && <small className='error'>{error}</small>}\r\n//     <label className=\"form-check-label float-start mt-4 ml-5 mb-2\" htmlFor={\"wateringDate\"} >{label}</label>\r\n//     <DatePicker className=\"py-2\"  defaultValue={new Date()} valueEditFormat={{ dateStyle: \"short\" }} valueDisplayFormat={{ dateStyle: \"medium\" }}/>\r\n// </div>\r\n\r\n\r\n\r\n\r\n\r\n// export const renderDatePicker2 = ({input, placeholder, defaultValue, meta: {touched, error} }) =>\r\n// <div className=\"form-group text-light\">\r\n//    <label className=\"form-check-label float-start mt-4 ml-5 mb-2\" htmlFor={\"wateringDate\"} /> \r\n//     <div>\r\n//         <DatePicker {...input} defaultValue={new Date()} dateForm=\"MM/DD/YYYY\" selected={input.value} valueEditFormat={{ dateStyle: \"short\" }} valueDisplayFormat={{ dateStyle: \"medium\" }} />\r\n//         {touched && error && <span>{error}</span>}\r\n//     </div>\r\n//   </div>\r\n\r\n","import { useInjection } from 'inversify-react';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field} from 'redux-form'\r\nimport IUserRepository from '../../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../../state';\r\nimport { renderInputField } from '../formFields';\r\nimport { BsPersonCircle } from \"react-icons/bs\";\r\n\r\n    \r\n    const LoginForm = ({handleSubmit}) => {\r\n        \r\n        const dispatch = useDispatch();\r\n        const { logIn} = bindActionCreators(actionCreators, dispatch);\r\n        const userRepo: IUserRepository = useInjection(IUserRepository);\r\n\r\n        const submit = (values) => {\r\n            \r\n            logIn({username: values.username, password: values.password}, userRepo);\r\n        }\r\n\r\n\r\n        const required = value => value ? undefined : 'Required'\r\n        // const email = value =>\r\n        // value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        // 'Format d/email non valide' : undefined\r\n        // const maxLength = max => value =>\r\n        // value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n        // const maxLength15 = maxLength(15)\r\n        \r\n    return(\r\n        <div className='login-form mt-5 d-flex flex-column ' id=\"login-form\">\r\n            <div className=\"d-flex justify-content-center mb-3\">\r\n                <span className=\"text-light fw-normal\"><BsPersonCircle size={50} /></span>\r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit(submit)}>\r\n\r\n                <Field \r\n                name='username' \r\n                component={renderInputField} \r\n                label='Adresse e-mail' \r\n                type='email'\r\n                // validate={required}\r\n                 />\r\n                \r\n                <Field \r\n                name='password' \r\n                component={renderInputField} \r\n                label='Mot de passe' \r\n                type='password' />\r\n\r\n                <div className=\"py-2 d-flex justify-content-start\">\r\n                    <a href=\"#\"  className=\"text-white\"><small>Mot de passe oublié ?</small></a>\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"btn btn-outline-light my-5 rounded w-auto\">Connexion</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'login',\r\n    destroyOnUnmount: true,\r\n})(LoginForm)\r\n\r\n// export default LoginForm;","import { injectable } from \"inversify\";\r\nimport { registerGardenerPlantFormData, updateGardenerPlantFormData } from \"../../../application/GardenerPlantRepositoryImpl\";\r\nimport GardenerPlant, { IGardenerPlant } from \"../../entities/GardenerPlant\";\r\n\r\n@injectable()\r\nexport default abstract class IGardenerPlantRepository {\r\n\r\n    abstract registerGardenerPlant(gardenerPlantDetails:registerGardenerPlantFormData): Promise<void>\r\n    abstract updateGardenerPlant (gardenerPlantId:number, gardenerPlantDetails:updateGardenerPlantFormData): Promise<void>;\r\n    abstract deleteGardenerPlant(gardenerPlantId:number): Promise<void>\r\n    \r\n}","\r\nimport { useInjection } from 'inversify-react';\r\nimport React, { useEffect } from 'react';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionCreators} from '../state/index';\r\nimport  {bindActionCreators } from 'redux';\r\nimport { IGardenerPlant } from '../../domain/entities/GardenerPlant';\r\nimport {State} from '../state/store'\r\nimport LoginForm from '../components/User/LoginForm';\r\nimport User from '../../domain/entities/user';\r\nimport {  BsFillEmojiWinkFill, BsFillEyeFill, BsFillTrashFill, BsFillPencilFill, BsFillDropletFill, BsEmojiWink} from \"react-icons/bs\";\r\nimport { FaPagelines } from \"react-icons/fa\";\r\nimport IGardenerPlantRepository from '../../domain/adapters/repositories/IGardenerPlantRepository';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\nimport Moment from 'moment';\r\n\r\n\r\nconst DashBoard = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const {fetchUserData, removeGardenerPlant, waterPlant} = bindActionCreators(actionCreators, dispatch);\r\n    const userRepo: IUserRepository = useInjection(IUserRepository);\r\n    const gardenerPlantRepo: IGardenerPlantRepository = useInjection(IGardenerPlantRepository);\r\n\r\n    const userId: number | undefined = userRepo.getAuthenticatedUserId();\r\n    const user: User = useSelector((state: State) => state.login.user);\r\n    const isAuth: boolean = useSelector((state: State ) => state.login.isAuthenticated);\r\n    const isLoading: boolean = useSelector((state: State ) => state.login.isLoading);\r\n    const errorMsg: string | null  = useSelector((state: State ) => state.login.error);\r\n    const gardenerPlants: IGardenerPlant[] = user.gardenerPlants\r\n    const wateringDate: string = Moment().format('DD-MM-YYYY')\r\n\r\n\r\n    useEffect( () =>   {\r\n        fetchUserData(userId, userRepo)\r\n    }, []);\r\n\r\n    const confirmValidation = (gardenerPlant, userId) => {\r\n        confirmAlert({\r\n            title: 'Confirmation de suppression',\r\n            message: 'Souhaitez-vous supprimer cette plante de votre serre virtuelle.',\r\n            buttons: [\r\n            {\r\n                label: 'Oui',\r\n                onClick: () =>  removeGardenerPlant(gardenerPlant.id, gardenerPlantRepo, userId )\r\n            },\r\n            {\r\n                label: 'Non',\r\n                onClick: () => {}\r\n            }\r\n            ]\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className='' id=\"dashboard\">\r\n            {isLoading ? (\r\n            <div className =\"d-flex justify-content-center align-items-center spinner \">\r\n                <div className=\"spinner-border text-success \" role=\"status\"></div>\r\n            </div>\r\n                ) : (\r\n            <div> {isAuth ? (\r\n                <>\r\n                <section className=\"hero container-fluid bg-dark border-top border-light \">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-xl-6 hero-left py-5  my-xl-5\">\r\n                            <div className=\"mx-5 text-light\">\r\n                                <h1 className=\"display-6 text-light\">Bienvenue <br/>dans votre Serre Virtuelle</h1>\r\n                                <p className=\"lead mt-5 fw-bold fs-3\">{user.firstname}&nbsp;{user.surname}</p>\r\n                                <p className=\"py-4 lead \">Depuis votre espace serre virtuelle, vous pouvez gérer l'arrosage de toutes vos plantes en un click !</p>\r\n                            </div>\r\n                            <div>\r\n                                <Link to=\"/plantes/ajout\" className=\"btn btn-success rounded\">Ajouter une plante</Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='hero-right col-12 d-none col-xl-6 d-xl-block '></div>\r\n                    </div>\r\n                </section>\r\n\r\n                <section className=\"container stats py-5\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <div className=\"pb-sm-5 d-flex flex-column flex-xl-row justify-content-center align-items-center gap-4\">\r\n                                <span className=\"text-success\"><BsFillEmojiWinkFill size={50} /></span>\r\n                                <h2 className=\" \">L'état de vos plantes en un clin d'oeil !</h2>    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-xl-6 d-flex flex-column flex-md-row justify-content-evenly align-items-center mb-3 mb-md-5\">\r\n                            <div className=\"stat-item d-flex justify-content-center align-items-center\">\r\n                                <div className=\" rounded-circle d-flex flex-column border border-2 border-success justify-content-center align-items-center  px-2 h-75 w-75\">\r\n                                    <p className=\"fw-bold text-success\">Plantes<br/> arrosées</p>\r\n                                    <span className=\"fs-1 fw-bold text-success\">{user.numberOfUpToDateWaterings}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"stat-item d-flex justify-content-center align-items-center\">\r\n                                <div className=\" rounded-circle d-flex flex-column border border-2 border-warning justify-content-center align-items-center  px-2 h-75 w-75\">\r\n                                    <p className=\"fw-bold text-warning\">Plantes assoifées</p>\r\n                                    <span className=\"fs-1 fw-bold text-warning\">{user.numberOfOnDayWaterings}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"stat-item d-flex justify-content-center align-items-center\">\r\n                                <div className=\" rounded-circle d-flex flex-column border border-2 border-danger  justify-content-center align-items-center  px-2 h-75 w-75\">\r\n                                    <p className=\"fw-bold text-danger\">Plantes<br/> en péril</p>\r\n                                    <span className=\"fs-1 fw-bold text-danger\">{user.numberOfLateWaterings}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12 col-xl-6 px-4 d-none d-md-block\">\r\n                            <table className=\"table\">\r\n                                <thead className=\"bg-dark \">\r\n                                    <tr className='text-white'>\r\n                                        <th scope=\"col\">Plante</th>\r\n                                        <th scope=\"col\">Arrosage prévu</th>\r\n                                        <th scope=\"col\">Arroser</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {gardenerPlants.map((gardenerPlant) => {\r\n                                    \r\n                                     if(gardenerPlant.wateringStatus == 3) {\r\n                                         return  <tr key={gardenerPlant.id} className=\"\">\r\n                                         <th scope=\"row\">{gardenerPlant.nickname}</th>\r\n                                         <td className=\" fw-normal\">{gardenerPlant.nextWateringDate}</td>\r\n                                         <button onClick={() => waterPlant(gardenerPlant, userRepo, wateringDate)} type=\"button\" className=\"btn btn-error bg-transparent border-0 mt-3\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Arroser ma plante\">\r\n                                        <BsFillDropletFill size={25} className=\"text-danger\"/>\r\n                                        </button>\r\n                                     </tr>\r\n                                     } else if(gardenerPlant.wateringStatus == 2) {\r\n                                        return  <tr key={gardenerPlant.id} className=\"\">\r\n                                        <th scope=\"row\">{gardenerPlant.nickname}</th>\r\n                                        <td className=\" fw-normal\">{gardenerPlant.nextWateringDate}</td>\r\n                                        <button onClick={() => waterPlant(gardenerPlant, userRepo, wateringDate)} type=\"button\" className=\"btn btn-error bg-transparent border-0 mt-3\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Arroser ma plante\">\r\n                                       <BsFillDropletFill size={25} className=\"text-warning\"/>\r\n                                       </button>\r\n                                    </tr>\r\n                                    } \r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n\r\n                <section className=\"serre py-5 container-fluid\" > \r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\" col-12 pb-5 d-flex flex-column flex-xl-row justify-content-center align-items-center gap-4 \">\r\n                                <span className=\"text-white\"><FaPagelines size={50} /></span>\r\n                                <h2 className=\"text-white display-6 fw-bold \">Toutes les plantes de votre serre virtuelle</h2>    \r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Affichage quand la serre virtuelle est vide  */}\r\n                        { gardenerPlants.length == 0 ? (\r\n                            <div className =\" row d-flex justify-content-center align-items-center\">\r\n                            <div className=\"col-12 border border-2 py-5 bg-light rounded \">\r\n                                <div className=\"mb-4\">\r\n                                    <p className=\"text-dark fw-bolder  fs-3 mx-5\">Votre serre virtuelle est actuellement vide ! </p>\r\n                                    <span className=\"text-success\"><BsEmojiWink size={50} /></span>\r\n                                </div>\r\n                                <div>\r\n                                    <Link to=\"/plantes/ajout\" className=\"btn btn-success rounded\">Ajouter une plante</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>) : \r\n\r\n                        // Affichage lorsque la serre virtuelle contient au moins une plante\r\n                        (<div className=\"row\">\r\n                        {gardenerPlants.map((gardenerPlant) => {\r\n                            return <div className=\"col-12 col-md-6 col-xl-3 d-flex justify-content-center rounded mb-3 mb-lg-5 mb-xl-3\">\r\n                                        <div key={gardenerPlant.id} className=\"card border-0 shadow rounded\" style={{maxWidth: '20rem'}}>\r\n\r\n                                            <div className=\"card-header bg-dark d-flex justify-content-center rounded-top align-items-center  \">\r\n                                                <h5  className=\"text-light mb-0 py-2\">{gardenerPlant.nickname}</h5>\r\n                                            </div>\r\n                                            <div className=\"position-relative\">\r\n                                                <span className=\"badge bg-success position-absolute bottom-0 end-0 \">{gardenerPlant.cataloguePlantName}</span>\r\n                                                <img src={gardenerPlant.image} className=\"card-img-top \" alt=\"...\" />\r\n                                            </div>\r\n                                        \r\n\r\n                                            <div className=\"card-body bg-dark py-2\">\r\n                                                <div className=\"d-flex justify-content-around align-items-center bg-transparent\">\r\n                                                    <Link to={'#'} className=\"btn btn-success  bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Voir la plante\">\r\n                                                        <BsFillEyeFill size={25} className=\"text-light\"/>\r\n                                                    </Link>\r\n                                                    <Link to={`/plantes/modification/${gardenerPlant.id}`} className=\"btn btn-success  bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Modifier les paramètres de ma plante\">\r\n                                                        <BsFillPencilFill size={25} className=\"text-light\"/>\r\n                                                    </Link>\r\n                                                    <button onClick={() => confirmValidation(gardenerPlant, userId)}type=\"button\" className=\"btn btn-success bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"*Supprimer la plante de ma serre virtuelle\">\r\n                                                    <BsFillTrashFill size={25} className=\"text-light\"/>\r\n                                                    </button>\r\n\r\n                                                    {gardenerPlant.wateringStatus == 1 ? \r\n                                                        <div className=\"bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Je n'ai pas soif !\">\r\n                                                        <BsFillDropletFill size={25} className=\"text-success\"/>\r\n                                                        </div> \r\n                                                    : gardenerPlant.wateringStatus == 2 ? \r\n                                                        <button onClick={() => waterPlant(gardenerPlant, userRepo, wateringDate)} type=\"button\" className=\"btn btn-error bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Arroser ma plante\">\r\n                                                        <BsFillDropletFill size={25} className=\"text-warning\"/>\r\n                                                        </button>\r\n                                                        : \r\n                                                        <button onClick={() => waterPlant(gardenerPlant, userRepo, wateringDate)} type=\"button\" className=\"btn btn-error bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Arroser ma plante\">\r\n                                                        <BsFillDropletFill size={25} className=\"text-danger\"/>\r\n                                                        </button> }\r\n                                                </div>\r\n                                            </div>\r\n                                            {gardenerPlant.wateringStatus == 1 ?\r\n                                            <div className=\"card-footer d-flex justify-content-center bg-success\">\r\n                                                <small className=\"text-white fw-bold\">Prochain arrosage le : <em>{gardenerPlant.nextWateringDate}</em> </small>\r\n                                            </div>\r\n                                            : gardenerPlant.wateringStatus == 2 ?\r\n                                            <div className=\"card-footer d-flex justify-content-center  bg-warning\">\r\n                                                <small className=\"text-white fw-bold\">C'est mon jour d'arrosage !</small>\r\n                                            </div>\r\n                                            :\r\n                                            <div className=\"card-footer d-flex justify-content-center bg-danger\">\r\n                                                {gardenerPlant.numberOfLateDays == 1 ? \r\n                                                <small className=\"text-white fw-bold\">Vous avez {gardenerPlant.numberOfLateDays} jour de retard</small>\r\n                                                :\r\n                                                <small className=\"text-white fw-bold\">Vous avez {gardenerPlant.numberOfLateDays} jours de retard</small>\r\n                                                }\r\n                                            </div>\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                })}\r\n                        </div>)}\r\n                    </div>\r\n                </section>\r\n                </>\r\n                ) : (\r\n                <LoginForm />\r\n                )}\r\n            </div>\r\n        )}    \r\n    </div>   \r\n    );\r\n}\r\n\r\nexport default DashBoard;\r\n\r\n\r\n","import { injectable } from \"inversify\";\r\nimport { registerFormData } from \"../../../application/UserRepositoryImpl\";\r\nimport Plant from \"../../entities/Plant\";\r\nimport User from \"../../entities/user\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IPlantRepository {\r\n    abstract getAllPlants(): Promise<Plant[] | undefined> ;\r\n    \r\n}","import Modal from 'react-bootstrap/Modal'\r\nimport ModalDialog from 'react-bootstrap/ModalDialog'\r\nimport ModalHeader from 'react-bootstrap/ModalHeader'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { BsFillSunFill, BsFillHeartFill, BsFillHandThumbsUpFill, BsInfoCircleFill} from \"react-icons/bs\";\r\nimport { useSelector } from 'react-redux';\r\nimport { State } from '../../state';\r\n\r\n\r\nfunction ShowPlantModal(props) {\r\n    \r\n    const plant = useSelector((state: State ) => state.plant.modal);\r\n    // console.log(modal)\r\n\r\n   \r\n    return (\r\n            <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby={\"modal-\" + plant.name}\r\n            centered\r\n            className=\"\"\r\n          >\r\n            <Modal.Header closeButton className=\"bg-success\">\r\n              <Modal.Title id={\"modal-\" + plant.name}>\r\n              <h4 className=\"text-light fs-2\">{plant.name}</h4>\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <img src={plant.image} className=\"img-fluid h-100 d-none d-xl-block\" alt={plant.name} />        \r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 d-flex flex-column justify-content-start fs-6\">\r\n                        <div className=\"d-flex justify-content-start gap-3\">\r\n                            <span className=\"text-success\"><BsFillHandThumbsUpFill size={20}/></span>\r\n                            <div>\r\n                                <span className=\"fw-bold text-dark\">Description</span>\r\n                                <p >{plant.description}</p>  \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-start gap-3\">\r\n                            <span className=\"text-success\"><BsFillSunFill size={20}/></span>\r\n                            <div>\r\n                                <span className=\"fw-bold text-dark\">Exposition</span>\r\n                                <p >{plant.exposition}</p>  \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-start gap-3\">\r\n                            <span className=\"text-success\"><BsFillHeartFill size={20}/></span>\r\n                            <div>\r\n                                <span className=\"fw-bold text-dark\">Entretien</span>\r\n                                <p >{plant.care}</p>  \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-start gap-3\">\r\n                            <span className=\"text-success\"><BsInfoCircleFill size={20}/></span>\r\n                            <div>\r\n                                <span className=\"fw-bold text-dark\">Toxicité</span>\r\n                                <p >{plant.toxicity}</p>  \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n          </Modal>\r\n\r\n\r\n\r\n);\r\n}\r\n  \r\n\r\n  export default ShowPlantModal\r\n  \r\n//   function App() {\r\n//     const [modalShow, setModalShow] = React.useState(false);\r\n  \r\n//     return (\r\n//       <>\r\n//         <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n//           Launch vertically centered modal\r\n//         </Button>\r\n  \r\n//         <MyVerticallyCenteredModal\r\n//           show={modalShow}\r\n//           onHide={() => setModalShow(false)}\r\n//         />\r\n//       </>\r\n//     );\r\n//   }\r\n  \r\n//   render(<App />);","\r\n\r\nimport { useInjection } from 'inversify-react';\r\nimport { useEffect, useState } from 'react';\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport IPlantRepository from '../../domain/adapters/repositories/IPlantRepository';\r\nimport LoginForm from '../components/User/LoginForm'\r\nimport { actionCreators, State } from '../state';\r\nimport { BsPersonCircle, BsFlower2, BsClipboardData } from \"react-icons/bs\";\r\nimport { FaPagelines } from \"react-icons/fa\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport ShowPlantModal from '../components/plant/showPlantModal';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\n\r\n\r\nconst LandingPage = () => { \r\n\r\n    const dispatch = useDispatch();\r\n    const { fetchPlants, setModal, fetchUserData} = bindActionCreators(actionCreators, dispatch);\r\n    const plants = useSelector((state: State ) => state.plant.plants);\r\n    const isLoading = useSelector((state: State ) => state.plant.isLoading);\r\n    const isAuth: boolean = useSelector((state: State ) => state.login.isAuthenticated);\r\n   \r\n    \r\n    const plantRepo = useInjection(IPlantRepository);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const {pathname, hash, key} = useLocation()\r\n    console.log(hash);\r\n    \r\n    useEffect( () =>   {\r\n        fetchPlants(plantRepo);\r\n        if (hash === '') {\r\n            window.scrollTo(0, 0);\r\n          }\r\n          // else scroll to id\r\n          else {\r\n            setTimeout(() => {\r\n              const id:string = hash.replace('#', '');\r\n              const element = document.getElementById(id);\r\n              if (element) {\r\n                element.scrollIntoView();\r\n              }\r\n            }, 0);\r\n          }\r\n    }, [pathname, hash, key]);\r\n  \r\n    return(\r\n        <div id=\"landing-page\" className=\"landing-page\">\r\n\r\n            <section className=\"hero d-flex justify-content-center py-4 py-md-5\" >\r\n                <div className=\"text-white row\">\r\n                    <div className='col-12'>\r\n                        <h1 className=\"main-title my-5 text-white \">DRINK UP !</h1>\r\n                        <p className=\"lead fw-normal mx-5\">Vos plantes vous mennent la vie dure ? <br/> \r\n                        <span className=\"fw-bold text-success fs-2\"> Drink up !</span> est l'application qu'il vous faut pour que vos plantes ne manquent plus jamais d'eau. <br/> \r\n                        Rejoignez-nous pour <span className=\"fw-bold text-success fs-2\">une expérience unique</span>.... enfin presque !</p>\r\n                        <div className=\"py-5 px-5 d-flex flex-column flex-sm-row align-items-center justify-content-center gap-3 gap-sm-5\">\r\n                            <Link to=\"/catalogue\" className=\"btn fw-bold border-white btn-success rounded \">Découvrir nos plantes</Link>\r\n                            <Link to=\"/enregistrement\" className={`btn fw-bold btn-outline-light rounded ${isAuth ? \"d-none\" : \"\"}`}>Créer un compte</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"presentation-login section-padding bg-dark px-4 \" id=\"presentation-login\">\r\n                <div className= {`row d-flex ${isAuth ? \"mx-5\" : \"\"}`}>\r\n                    <div className= {`catalogue col-12 col-lg-8 h-auto ${isAuth ? \" col-lg-12\" : \"\"}`}>\r\n                        <div className=\"d-flex flex-column flex-lg-row align-items-center align-items-lg-center justify-content-lg-between pb-4 pb-lg-2\">\r\n                            <h2 className=\"section-heading text-center d-flex text-sm-start text-light fw-light mb-4\">Notre catalogue de plantes</h2>\r\n                            <Link to=\"/catalogue\" className=\"btn btn-outline-success  w-auto rounded mb-4\">Toutes nos plantes</Link>\r\n                        </div>\r\n\r\n                        {isLoading ? (\r\n                        <div className =\"d-flex justify-content-center align-items-center mt-5\">\r\n                            <div className=\"d-flex flex-column align-items-center py-5\">\r\n                                <div className=\"spinner-border text-white mb-5  \" role=\"status\"></div>\r\n                                <span className=\"visually text-light fs-4\">Nous chargeons notre catalogue de plantes !</span>\r\n                            </div>\r\n                        </div>\r\n                        ) : (\r\n\r\n                        <Carousel>\r\n                            {plants.map((plant) => {\r\n                            return <Carousel.Item key={plant.id}>\r\n                            <img className=\"rounded\" src={plant.image} />\r\n                            <Carousel.Caption>\r\n                                <div className =\"d-flex flex-column align-items-stretch justify-content-between\">\r\n                                    <div>\r\n                                        <h3 className=\"py-5 display-3 fw-bold text-white\">{plant.name}</h3>\r\n                                        <p className=\"carousel-description mb-5 fw-normal\">{plant.description}</p>\r\n                                    </div>\r\n                                    <div className=\"\">\r\n                                        <Button variant=\"primary\" className=\"btn fw-bold border-white btn-success rounded w-auto\"  onClick={() => {\r\n                                            setModal(plant)\r\n                                            setModalShow(true)} \r\n                                        } >Consulter</Button>\r\n\r\n                                        {/* Modal de presentation de la plante  */}\r\n                                        < ShowPlantModal show={modalShow} onHide={() => setModalShow(false)} />\r\n                                    </div>\r\n                                </div> \r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>})}\r\n                            \r\n                        </Carousel>)}                  \r\n                    </div>\r\n                    {!isAuth ? (\r\n                    <div className=\"login-form col-12 col-lg-4 d-flex justify-content-center align-items-end px-4 px-lg-5\">\r\n                        <LoginForm  />\r\n                    </div>\r\n                    ) : (\r\n                    <div className=\"\"></div>\r\n                    )\r\n                }\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"easy-steps py-5 px-4\">\r\n                \r\n                <div className=\"row \">\r\n                    <div className=\"col-12 h-auto mb-5\">\r\n                        <div className=\"d-flex flex-column flex-xl-row justify-content-center gap-3 align-items-center\">\r\n                            <h2 className=\"section-heading fw-normal\">Créer votre serre virtuelle</h2>\r\n                            <span className=\"fw-bold text-success py-2\"><FaPagelines size={45} />...en toute simplicité !</span>\r\n                        </div>\r\n                        <Link to={'/enregistrement'} className=\"btn btn-success rounded mt-4\">Je crée ma serre virtuelle</Link>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"row procedure-cards py-3 \">\r\n                    <div className=\"col-12 col-sm-4 col-xl-4 mb-5 d-flex justify-content-center\">\r\n                        <div className=\" card rounded shadow\" style={{maxWidth: \"20rem\"}}>\r\n                            <div className=\"card-header bg-success fw-bold text-light py-2\"><BsPersonCircle size={35} /></div>\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">Je créer mon compte</h4>\r\n                                <p className=\"card-text\">La sécurité et la confidentialité de vos données sont notre priorité.<br/>\r\n                                <a className=\"link-success\" href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">Politique de confidentialité</a>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 mb-3 col-sm-4 mb-5  d-flex justify-content-center\">\r\n                        <div className=\" card rounded shadow\" style={{maxWidth: \"20rem\"}}>\r\n                            <div className=\"card-header bg-success fw-bold text-light py-2\"><BsFlower2 size={35} /></div>\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">J'ajoute une plante</h4>\r\n                                <p className=\"card-text\">Vous pouvez ajouter facilement des plantes dans votre serre virtuelle en quelques clicks!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 mb-3 col-sm-4 mb-5  d-flex justify-content-center\">\r\n                        <div className=\" card rounded shadow\" style={{maxWidth: \"20rem\"}}>\r\n                            <div className=\"card-header bg-success fw-bold text-light py-2\"><BsClipboardData size={35} /></div>\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">Je gère mes plantes</h4>\r\n                                <p className=\"card-text\">Grâce à votre tableau de board vous pouvez facilement gérer les plantes de votre serre virtuelle</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage","\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport { BsFillEnvelopeFill } from \"react-icons/bs\";\r\nimport { BsFillTelephoneForwardFill } from \"react-icons/bs\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Footer = () => {\r\n    \r\n    return(\r\n        <footer className=\"text-center text-lg-start text-muted \">\r\n        \r\n          <section className=\" main-footer pt-4 bg-success\">\r\n            <div className=\"container text-center text-md-start mt-2 text-white\">\r\n              <div className=\"row\">\r\n\r\n                <div className=\"col-md-3 col-lg-4 col-xl-3 mx-auto mb-4 \">\r\n                  <h6 className=\"text-uppercase fw-bold mb-4\">Drink up !</h6>\r\n                  <p> Vos plantes nous diront merci ! Notre inteface intuitive vous permettra d'assurer l'arrosage de vos plantes en toute facilité. </p>\r\n                </div>\r\n \r\n                <div className=\"col-md-3 col-lg-2 col-xl-2 mx-auto mb-4\">\r\n                  <h6 className=\"text-uppercase fw-bold mb-4\"> Accès rapides</h6>\r\n                  <p>\r\n                    <Link to=\"/catalogue\" className=\"link-light\">Nos plantes</Link>\r\n                  </p>\r\n                  <p>\r\n                    <Link to=\"#!\" className=\"link-light\">Nous contacter</Link>\r\n                  </p>\r\n                  <p>\r\n                    <Link to=\"#!\" className=\"link-light\">Politique de confidentialité</Link>\r\n                  </p>\r\n                </div>\r\n               \r\n                <div className=\"col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0 mb-4 \">\r\n                  <h6 className=\"text-uppercase fw-bold mb-4\">\r\n                    Informations de contact\r\n                  </h6>\r\n                  <div className=\"d-flex flex-column align-items-center align-items-md-start\">\r\n                    <div className=\"d-flex justify-content-start\">\r\n                      <BsFillHouseDoorFill size={22} /> \r\n                      <p className=\"mx-2\">69 Route de la verdure</p>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-start\">\r\n                      <BsFillEnvelopeFill size={22} /> \r\n                      <p className=\"mx-2\">drink-up@gmail.com</p>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-start\">\r\n                      <BsFillTelephoneForwardFill size={22} /> \r\n                      <p className=\"mx-2\">06 30 93 62 65</p>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          \r\n          {/* <!-- Copyright --> */}\r\n          <div className=\"text-center p-4 bg-dark\">\r\n            © 2021 Copyright:\r\n            <a className=\"text-reset fw-bold\" >Drink up!</a>\r\n          </div>\r\n          {/* <!-- Copyright --> */}\r\n          </section>\r\n        </footer>\r\n        \r\n    )\r\n}\r\n\r\nexport default Footer;","import { useInjection } from 'inversify-react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field} from 'redux-form'\r\nimport IUserRepository from '../../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../../state';\r\nimport { renderInputField, renderSelectField, renderSwitchField } from '../formFields';\r\nimport { BsPersonCircle } from \"react-icons/bs\";\r\nimport { toast } from 'react-toastify';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n    \r\n    const RegisterForm = ({handleSubmit}) => {\r\n        \r\n        const userRepo: IUserRepository = useInjection(IUserRepository);\r\n        const dispatch = useDispatch();\r\n        const { logIn } = bindActionCreators(actionCreators, dispatch);\r\n\r\n        const submit = async (values) => {\r\n            await userRepo.register({gender: values.gender, firstname: values.firstname, surname: values.surname, email:values.email, password: values.passwordReg, isNotified:values.isNotified});\r\n            logIn({username:values.email, password:values.passwordReg}, userRepo)\r\n            toast.success('Votre compte a été créé avec succes', { delay: 4000 });\r\n        }\r\n        \r\n    return(\r\n        <div className='register-form col-12 '>\r\n            <h2 className='text-light mb-5 fw-normal '>Créer un compte utilisateur</h2>\r\n            <span className=\"text-light fw-normal\"><BsPersonCircle size={60} /></span>\r\n            <form onSubmit={handleSubmit(submit)}>\r\n                <div className=\"form-group\">\r\n                    <Field name='gender' component={renderSelectField} label='Civilité'>\r\n                        <option value='' children=\"Choisir une option\" selected></option>\r\n                        <option value='Madame' children='Madame'></option>\r\n                        <option value='Monsieur' children='Monsieur'></option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='firstname' component={renderInputField} label='Prénom' type='text'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='surname' component={renderInputField} label='Nom' type='text'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='email' component={renderInputField} label='Adresse e-mail' type='email'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='passwordReg' component={renderInputField} label='Mot de passe' type='password'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='passwordReg2' component={renderInputField} label='Confirmez votre mot de passe' type='password'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='isNotified' component={renderSwitchField} label='Je souhaite recevoir les noficiations' type='checkbox' defaultValue={false} />\r\n                </div>\r\n                <div className=' d-flex flex-column-reverse flex-lg-row justify-content-center align-items-center my-5 gap-3'>\r\n                    <Link to={'/'} className=\"btn btn-success  rounded\">Retour</Link>\r\n                    <button type=\"submit\" className=\"btn btn-success rounded\">Valider votre saisie</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'register',\r\n    destroyOnUnmount: true,\r\n    \r\n})(RegisterForm)\r\n\r\n// export default LoginForm;","\r\nimport { useInjection } from 'inversify-react';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionCreators, State } from '../state/index';\r\nimport  { bindActionCreators } from 'redux';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { registerFormData } from '../../application/UserRepositoryImpl';\r\nimport LoginForm from '../components/User/LoginForm';\r\nimport RegisterForm from '../components/User/RegisterForm';\r\nimport { useLocation } from 'react-router';\r\n\r\n\r\nconst RegisterPage = (props) => {\r\n\r\n    return (\r\n    \r\n        <div className='bg-transparent container-fluid p-4 d-flex justify-content-center' id=\"register-page\" >\r\n           <div className='form-container row position-relative container rounded'>\r\n            <div className=\" position-absolute top-0 start-0 bottom-0 end-0 bg-dark opacity-75 rounded\"></div>\r\n                <div className=' position-relative d-flex justify-content-center pt-5 '>\r\n                    <RegisterForm  />\r\n                </div> \r\n            </div>\r\n        </div>\r\n     );\r\n}\r\nexport default RegisterPage;\r\n\r\n\r\n","import GardenerPlant from \"../../domain/entities/GardenerPlant\";\r\nimport Plant, { IPlant } from \"../../domain/entities/Plant\";\r\n\r\nconst Pagination = ({currentPage, itemsPerPage, length, onPageChange }) => {\r\n\r\n    const pageCount: number = Math.ceil(length / itemsPerPage);\r\n    const pages: number[] = []\r\n    for (let i = 1; i <= pageCount; i++ ){\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <nav className=\"d-flex justify-content-center py-4\">\r\n            <ul className=\"pagination success\">\r\n                <li className={`page-item ${currentPage === 1 ? \"disabled\" : \"\"}`}>\r\n                    <button className=\"page-link\" onClick={() => onPageChange(currentPage - 1)}>&laquo;</button>\r\n                </li>\r\n                {pages.map(page => {\r\n                    return <li key={page} className={`page-item ${currentPage === page ? \"active\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={() =>onPageChange(page)}>{page}</button>\r\n                    </li>}\r\n                )}\r\n                \r\n                <li className={`page-item ${currentPage === pageCount ? \"disabled\" : \"\"}`}>\r\n                {/* <a className=\"page-link\" href=\"#\">&raquo;</a> */}\r\n                <button className=\"page-link\" onClick={() =>onPageChange(currentPage + 1)}>&raquo;</button>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\n\r\n// on retourne un tableau qui correspond à une portion définie de notre tableau passé en paramètre\r\nPagination.getData = (items:IPlant[], currentPage: number, itemsPerPage: number): IPlant[] => {\r\n\r\n    const start: number = currentPage * itemsPerPage - itemsPerPage;\r\n    return items.slice(start, start + itemsPerPage)\r\n}\r\n\r\n\r\n\r\nexport default Pagination;","\r\nimport { useInjection } from 'inversify-react';\r\n\r\nimport Pagination from '../components/Pagination';\r\nimport IPlantRepository from '../../domain/adapters/repositories/IPlantRepository';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators, State } from '../state';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { Accordion } from 'react-bootstrap';\r\nimport { BsFillSunFill, BsFillHeartFill, BsFillHandThumbsUpFill, BsInfoCircleFill, BsFillPlusCircleFill} from \"react-icons/bs\";\r\nimport { IPlant } from '../../domain/entities/Plant';\r\nimport GardenerPlant from '../../domain/entities/GardenerPlant';\r\n\r\n\r\n\r\nconst CataloguePage = (props) => {\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n    const { fetchPlants, setCurrentPage} = bindActionCreators(actionCreators, dispatch);\r\n    \r\n\r\n    const plantRepo = useInjection(IPlantRepository);\r\n    const plants: IPlant[] = useSelector((state: State ) => state.plant.plants);\r\n    const isLoading: boolean = useSelector((state: State ) => state.plant.isLoading);\r\n    const currentPage: number = useSelector((state: State ) => state.pagination.currentPage);\r\n\r\n    useEffect(() =>   {\r\n        fetchPlants(plantRepo)\r\n    }, []);\r\n\r\n    // on définit le nombre d'item par page dans notre pagination\r\n    const itemsPerPage: number = 3;\r\n    //on prépare le tableau pour l'affichage de la pagination\r\n    const paginatedPlants : IPlant[] = Pagination.getData(plants, currentPage, itemsPerPage);\r\n\r\n    if (isLoading) {\r\n        return <div className =\"d-flex justify-content-center align-items-center spinner\">\r\n                    <div className=\"spinner-border text-success \" role=\"status\">\r\n                        <span className=\"visually-hidden\">Nous chargeons notre catalogue</span>\r\n                    </div>\r\n                </div>\r\n        } else {\r\n        return  <section className='bg-transparent p-5 container' id=\"catalogue-page\" >\r\n        <header>\r\n            <h1 className=\"pb-5\">Notre catalogue de plantes</h1>\r\n        </header>\r\n        <div className=\"row\">\r\n            <div className=\"col-8\">\r\n                <ul className=\"plant-list gap-2\">\r\n                {paginatedPlants.map((plant) => \r\n                    <li className=\"card mb-4\">\r\n                        <div className=\"row  \">\r\n                            <div className=\"col-md-4\">\r\n                                <img src={plant.image} className=\"card-img\" alt=\"...\" />\r\n                            </div> \r\n                            <div className=\"col-md-8\">\r\n                                <div className=\"card-body relative \">\r\n                                    <div className=\"\">\r\n                                        <h4 className=\"card-title mb-4\">{plant.name}</h4>\r\n                                         <p className=\"card-text\">{plant.description}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <Accordion flush>\r\n                                <Accordion.Item eventKey={plant.id.toString()}>\r\n                                    <Accordion.Header >Informations & Conseils</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <div className=\"d-flex flex-column justify-content-start align-items-start\">\r\n                                            <div className=\"d-flex justify-content-start align-items-start gap-3 pb-2\">\r\n                                                <span className=\"text-success\"><BsFillHandThumbsUpFill size={20}/></span>\r\n                                                <span className=\"fw-bold fs-5 text-dark\">Description</span>\r\n                                            </div>\r\n                                            <p className=\"fs-5 text-start\">{plant.description}</p>  \r\n                                        </div>\r\n                                        <div className=\"d-flex flex-column justify-content-start align-items-start\">\r\n                                            <div className=\"d-flex justify-content-start align-items-start gap-3 pb-2\">\r\n                                                <span className=\"text-success\"><BsFillSunFill size={20}/></span>\r\n                                                <span className=\"fw-bold fs-5 text-dark\">Exposition</span>\r\n                                            </div>\r\n                                            <p className=\"fs-5 text-start\">{plant.exposition}</p>  \r\n                                        </div>\r\n                                        <div className=\"d-flex flex-column justify-content-start align-items-start\">\r\n                                            <div className=\"d-flex justify-content-start align-items-start gap-3 pb-2\">\r\n                                                <span className=\"text-success\"><BsFillHeartFill size={20}/></span>\r\n                                                <span className=\"fw-bold fs-5 text-dark\">Entretien</span>\r\n                                            </div>\r\n                                            <p className=\"fs-5 text-start\">{plant.care}</p>  \r\n                                        </div>\r\n                                        <div className=\"d-flex flex-column justify-content-start align-items-start\">\r\n                                            <div className=\"d-flex justify-content-start align-items-start gap-3 pb-2\">\r\n                                                <span className=\"text-success\"><BsInfoCircleFill size={20}/></span>\r\n                                                <span className=\"fw-bold fs-5 text-dark\">Toxicité</span>\r\n                                            </div>\r\n                                            <p className=\"fs-5 text-start \">{plant.toxicity}</p>  \r\n                                        </div>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                            </Accordion>\r\n                    </li>\r\n                    )}\r\n                </ul>\r\n                <Pagination currentPage={currentPage} itemsPerPage={itemsPerPage} length={plants.length} onPageChange={setCurrentPage}/> \r\n            </div>\r\n            <div className=\"col-4 catalogue-ad display-3 text-white pt-5\">Des plantes des plantes et encore des plantes !</div>\r\n        </div>\r\n    </section>\r\n    }\r\n                    \r\n}\r\n\r\nexport default CataloguePage;\r\n\r\n\r\n\r\n","import { useInjection } from 'inversify-react';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field, formValueSelector} from 'redux-form'\r\nimport IUserRepository from '../../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators, State } from '../../state';\r\nimport { loginFailed } from '../../state/action-creators';\r\nimport { renderHiddenField, renderInputField, renderSelectField, renderDateTimePicker1 } from '../formFields';\r\nimport { BsPersonCircle } from \"react-icons/bs\";\r\nimport IPlantRepository from '../../../domain/adapters/repositories/IPlantRepository';\r\nimport IGardenerPlantRepository from '../../../domain/adapters/repositories/IGardenerPlantRepository';\r\nimport { Link } from 'react-router-dom';\r\nimport DatePicker from \"react-widgets/DatePicker\";\r\nimport \"react-widgets/styles.css\";\r\nimport Moment from 'moment';\r\n// import 'react-widgets/dist/css/react-widgets.css'\r\n\r\n\r\n\r\nconst CreateGardenerPlant = ({handleSubmit}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { fetchPlants, createGardenerPlant} = bindActionCreators(actionCreators, dispatch);\r\n    const plantRepo = useInjection(IPlantRepository);\r\n    const gardenerPlantRepo = useInjection(IGardenerPlantRepository);\r\n    const plants = useSelector((state: State ) => state.plant.plants);\r\n    const isLoading = useSelector((state: State ) => state.plant.isLoading);\r\n\r\n    \r\n    useEffect( () =>   {\r\n        fetchPlants(plantRepo);\r\n    }, []);\r\n\r\n    const submit = async (values) => {\r\n\r\n        const userIRI:string = \"/api/users/\" + values.userId;\r\n        const plantIRI:string = \"/api/plants/\" + values.plantId;\r\n        const wateringDate: string = Moment().format('YYYY-MM-DD')\r\n        console.log(wateringDate);\r\n    \r\n        createGardenerPlant({user:userIRI, plant:plantIRI, nickname: values.nickname, sunlight: values.sunlight, size: values.size, season: values.season, topography: values.topography, location: values.location, lastWateringDate: wateringDate }, gardenerPlantRepo)\r\n    }\r\n\r\n    return(\r\n        <div className='create-gardener-plant-form container d-flex flex-column align-items-center'>\r\n            <div className=\"wrapper \">\r\n\r\n                {isLoading ? (\r\n                <div className =\"d-flex justify-content-center align-items-center mt-5\">\r\n                    <div className=\"d-flex flex-column align-items-center py-5\">\r\n                        <div className=\"spinner-border text-white mb-5\" role=\"status\"></div>\r\n                        <span className=\"visually text-light fs-4\">Chargement en cours</span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                    <>\r\n                    <h2 className='text-light mb-2 fw-normal '>Ajouter une plante à votre serre virtuelle</h2>\r\n                    <span className=\"text-light fw-normal\"><BsPersonCircle size={60} /></span>\r\n                    <p className=\"lead text-light py-5 fw-normal\">Avant d'enregistrer votre plante dans votre serre virtuelle, donnez-nous des informations sur son environnement. Elle vous remerciera !</p>\r\n                    <form onSubmit={handleSubmit(submit)}>\r\n                        <div className=\"form-group\">\r\n                        <Field name='userId' component={renderHiddenField} type='hidden' />\r\n                        </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='plantId' component={renderSelectField} label=\"Choisissez une plante de notre catalogue \">\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            {plants.map((plant) => {\r\n                            return(<option key={plant.id} value={plant.id} children= {plant.name}></option>)\r\n                            })}\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='nickname' component={renderInputField} label='Personnalisez le nom de votre plante' type='text'/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='sunlight' component={renderSelectField} label=\"Définissez l'éclairage de la pièce \">\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Ombragé' children='Ombragé'></option>\r\n                            <option value='Lumineux' children='Lumineux'></option>\r\n                            <option value='Très lumineux' children='Très lumineux'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='size' component={renderSelectField} label='Définissez la taille de votre plante'>\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Petite' children='Petite'></option>\r\n                            <option value='Moyenne' children='Moyenne'></option>\r\n                            <option value='Grande' children='Grande'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='season' component={renderSelectField} label=\"Définissez la saison de l'année\">\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Printemps' children='Printemps'></option>\r\n                            <option value='Eté' children='Eté'></option>\r\n                            <option value='Automne' children='Automne'></option>\r\n                            <option value='Hiver' children='Hiver'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='topography' component={renderSelectField} label='Définissez le relief de votre logement'>\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Bord de mer' children='Bord de mer'></option>\r\n                            <option value='Plaine' children='Plaine'></option>\r\n                            <option value='Plateau' children='Plateau'></option>\r\n                            <option value='Montagne' children='Montagne'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='location' component={renderSelectField} label='Ou se trouve votre plante ?'>\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Intérieur' children='Intérieur'></option>\r\n                            <option value='Extérieur' children='Extérieur'></option>\r\n                        </Field>\r\n                    </div>\r\n                    {/* <div className=\"form-group\">\r\n \r\n                        <div className=\"md-form\">\r\n                          <Field  name=\"wateringDate\" component={renderDateTimePicker1} label =\"Renseignez la dernière date d'arrosage\" showTime={false}></Field>\r\n                        </div> \r\n                    </div> */}\r\n                    \r\n                    <div className=' d-flex justify-content-center gap-5'>\r\n                        <Link to={'/serre-virtuelle'} className=\"btn btn-success my-5 rounded\">Retour</Link>\r\n                        <button type=\"submit\" className=\"btn btn-success my-5 rounded\">Valider votre saisie</button>\r\n                    </div>\r\n                </form></>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default reduxForm({\r\n    \r\n    form: 'create_gardener_plant',\r\n    destroyOnUnmount: true,\r\n    enableReinitialize:true\r\n    \r\n})(CreateGardenerPlant)\r\n    \r\n\r\n","import { useInjection } from \"inversify-react\";\r\nimport IUserRepository from \"../../domain/adapters/repositories/IUserRepository\";\r\nimport User from \"../../domain/entities/user\";\r\nimport CreateGardenerPlant from \"../components/gardenerPlant/CreateGardenerPlant\";\r\n\r\n\r\nconst CreateGardenerPlantPage = (props) => {\r\n    const userRepo = useInjection(IUserRepository);\r\n    const userId = userRepo.getAuthenticatedUserId();\r\n\r\n    return (\r\n        <div className='bg-picture container-fluid p-4 d-flex justify-content-center' id=\"create-garderner-plant-page\" >\r\n        <div className='form-container position-relative rounded'>\r\n         <div className=\"position-absolute top-0 start-0 bottom-0 end-0 bg-dark opacity-75 rounded\"></div>\r\n             <div className='position-relative d-flex justify-content-center pt-5 '>\r\n             {userId ?  <CreateGardenerPlant initialValues={{userId:userId}}/>  : '' }\r\n                    </div> \r\n             </div>\r\n        </div>\r\n        // <div id=\"create-garderner-plant-page\">\r\n        //     {userId ?  <CreateGardenerPlant initialValues={{userId:userId}}/>  : '' }\r\n        // </div>\r\n    );\r\n}\r\n\r\nexport default CreateGardenerPlantPage","import { useInjection } from 'inversify-react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field} from 'redux-form';\r\nimport { actionCreators, State } from '../../state';\r\nimport { renderHiddenField, renderInputField, renderSelectField } from '../formFields';\r\nimport IPlantRepository from '../../../domain/adapters/repositories/IPlantRepository';\r\nimport IGardenerPlantRepository from '../../../domain/adapters/repositories/IGardenerPlantRepository';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaPagelines } from \"react-icons/fa\";\r\n\r\n\r\n\r\nconst UpdateGardenerPlantForm = ({handleSubmit}) => {\r\n    \r\n    const dispatch = useDispatch();\r\n    const { fetchPlants, updateGardenerPlant} = bindActionCreators(actionCreators, dispatch);\r\n    const gardenerPlantRepo = useInjection(IGardenerPlantRepository);\r\n    // const plants = useSelector((state: State ) => state.plant.plants);\r\n    const isLoading = useSelector((state: State ) => state.plant.isLoading);\r\n    const plantRepo = useInjection(IPlantRepository);\r\n    \r\n\r\n    useEffect( () =>   {\r\n        fetchPlants(plantRepo);\r\n    }, []);\r\n\r\n    const submit = async (values) => {\r\n\r\n\r\n        const userIRI = \"/api/users/\" + values.userId;\r\n        const plantIRI = \"/api/plants/\" + values.plantId;\r\n\r\n        updateGardenerPlant(values.gardenerPlantId, {user:userIRI, plant:plantIRI, nickname: values.nickname, sunlight: values.sunlight, size: values.size, season: values.season, topography: values.topography, location: values.location, lastWateringDate: values.lastWateringDate}, gardenerPlantRepo)\r\n    }\r\n    return(\r\n     \r\n            <div className=\"create-gardener-plant-form d-flex flex-column align-items-center my-5 col-12\" >\r\n\r\n                {isLoading ? (\r\n                <div className =\"d-flex justify-content-center align-items-center mt-5\">\r\n                    <div className=\"d-flex flex-column align-items-center py-5\">\r\n                        <div className=\"spinner-border text-white mb-5  \" role=\"status\"></div>\r\n                        <span className=\"visually text-light fs-4\">Chargement en cours</span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                    <>\r\n                <h2 className='text-light mb-5 fw-normal px-5'>Modifier les informations <br></br> de votre plante</h2>\r\n                <span className=\"text-light fw-normal\"><FaPagelines size={60} /></span>\r\n                <form onSubmit={handleSubmit(submit)}>\r\n                    \r\n                    <Field name='gardenerPlantId' component={renderHiddenField} type='hidden' />\r\n                    <Field name='nextWateringDate' component={renderHiddenField} type='hidden' />\r\n                    <Field name='userId' component={renderHiddenField} type='hidden' />\r\n                        <Field name='plantId' component={renderHiddenField} type='hidden' />\r\n                    <Field name='nickname' component={renderInputField} label='Modifier le nom de votre plante' type='text'/>\r\n                    <Field name='sunlight' component={renderSelectField} label=\"Définissez l'éclairage de la pièce \">\r\n                        <option value='' children=\"Choisir une option\" selected></option>\r\n                        <option value='Ombragé' children='Ombragé'></option>\r\n                        <option value='Lumineux' children='Lumineux'></option>\r\n                        <option value='Très lumineux' children='Très lumineux'></option>\r\n                    </Field>\r\n                    <Field name='size' component={renderSelectField} label='Modifier la taille de votre plante'>\r\n                        <option value='' children=\"Choisir une option\" selected></option>\r\n                        <option value='Petite' children='Petite'></option>\r\n                        <option value='Moyenne' children='Moyenne'></option>\r\n                        <option value='Grande' children='Grande'></option>\r\n                    </Field>\r\n                    <Field name='season' component={renderSelectField} label=\"Modifier la saison de l'année\">\r\n                        <option value='' children=\"Choisir une option\" selected></option>\r\n                        <option value='Printemps' children='Printemps'></option>\r\n                        <option value='Eté' children='Eté'></option>\r\n                        <option value='Automne' children='Automne'></option>\r\n                        <option value='Hiver' children='Hiver'></option>\r\n                    </Field>\r\n                    <Field name='topography' component={renderSelectField} label='Modifier le relief de votre logement'>\r\n                        <option value='' children=\"Choisir une option\" selected></option>\r\n                        <option value='Bord de mer' children='Bord de mer'></option>\r\n                        <option value='Plaine' children='Plaine'></option>\r\n                        <option value='Plateau' children='Plateau'></option>\r\n                        <option value='Montagne' children='Montagne'></option>\r\n                    </Field>\r\n                    <Field name='location' component={renderSelectField} label='Ou se trouve votre plante ?'>\r\n                        <option value='' children=\"Choisir une option\" selected></option>\r\n                        <option value='Intérieur' children='Intérieur'></option>\r\n                        <option value='Extérieur' children='Extérieur'></option>\r\n                    </Field>\r\n                    <div className=' d-flex justify-content-center gap-5'>\r\n                        <Link to={'/serre-virtuelle'} className=\"btn btn-success my-5 rounded\">Retour</Link>\r\n                        <button type=\"submit\" className=\"btn btn-success my-5 rounded\">Valider votre saisie</button>\r\n                    </div>\r\n                </form></>)}\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default reduxForm({\r\n    \r\n    form: 'update_gardener_plant',\r\n    destroyOnUnmount: true,\r\n    enableReinitialize:true\r\n    \r\n})(UpdateGardenerPlantForm)\r\n    \r\n\r\n","import { useInjection } from \"inversify-react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport IGardenerPlantRepository from \"../../domain/adapters/repositories/IGardenerPlantRepository\";\r\nimport IPlantRepository from \"../../domain/adapters/repositories/IPlantRepository\";\r\nimport IUserRepository from \"../../domain/adapters/repositories/IUserRepository\";\r\nimport User from \"../../domain/entities/user\";\r\nimport CreateGardenerPlant from \"../components/gardenerPlant/CreateGardenerPlant\";\r\nimport UpdateGardenerPlantForm from \"../components/gardenerPlant/UpdateGardenerPlantForm\";\r\nimport { actionCreators, State } from \"../state\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nexport interface PlantIdFormParams {\r\n    plantId: string\r\n}\r\n\r\nconst GardenerPlantPage = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { fetchUserData } = bindActionCreators(actionCreators, dispatch);\r\n    const userRepo:IUserRepository = useInjection(IUserRepository);\r\n    const userId:number | undefined = userRepo.getAuthenticatedUserId();\r\n\r\n    \r\n    const {plantId}: PlantIdFormParams = useParams();\r\n\r\n    const user: User = useSelector((state: State) => state.login.user);\r\n   \r\n\r\n    // useEffect( () =>   {\r\n    //     fetchUserData(userId, userRepo)\r\n    // }, []);\r\n    \r\n\r\n    if(Object.keys(user).length){\r\n    const gardenerPlant = Object.values(user.gardenerPlants).filter((gardenerPlant) => {\r\n        if (gardenerPlant.id == parseInt(plantId)) {\r\n            return gardenerPlant\r\n        }\r\n    })[0];\r\n\r\n    return (\r\n        <div className='bg-picture container-fluid p-4 d-flex justify-content-center' id=\"gardener-update-page\" >\r\n        <div className='form-container position-relative rounded'>\r\n         <div className=\"position-absolute top-0 start-0 bottom-0 end-0 bg-dark opacity-75 rounded\"></div>\r\n             <div className='position-relative d-flex justify-content-center pt-5 '>\r\n             {userId ?  <UpdateGardenerPlantForm initialValues={{\r\n                    gardenerPlantId:gardenerPlant.id,\r\n                    userId:userId, \r\n                    nickname: gardenerPlant.nickname, \r\n                    plantId: gardenerPlant.cataloguePlantId,\r\n                    sunlight: gardenerPlant.sunlight,\r\n                    size: gardenerPlant.size,\r\n                    season: gardenerPlant.season,\r\n                    topography: gardenerPlant.topography,\r\n                    location: gardenerPlant.location,\r\n                    lastWateringDate: gardenerPlant.lastWateringDate,\r\n                    }} />  : '' }\r\n             </div> \r\n         </div>\r\n     </div>\r\n        // <div id=\"gardener-plant-form-page\">\r\n        //     <div className=\"\">            \r\n                \r\n        //     </div>\r\n        // </div>\r\n    );\r\n    } else {\r\n        return (\r\n\r\n        <div className='bg-transparent container-fluid p-4 d-flex justify-content-center' id=\"register-page\" >\r\n            <div className='form-container row position-relative container rounded'>\r\n                <div className=\" position-absolute top-0 start-0 bottom-0 end-0 bg-dark opacity-75 rounded\"></div>\r\n                    <div className=' position-relative d-flex justify-content-center pt-5 '>\r\n                 {userId ?  <UpdateGardenerPlantForm initialValues={{userId:userId}} />  : '' }\r\n                    </div> \r\n             </div>\r\n        </div>\r\n            // <div id=\"gardener-plant-form-page\">\r\n            //     <div className=\"\">            \r\n                   \r\n            //     </div>\r\n            // </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default GardenerPlantPage","import './App.css';\r\nimport {BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {history} from './view/state/store';\r\nimport { useInjection } from 'inversify-react';\r\nimport IServiceRepository from './domain/adapters/repositories/IServiceRepository';\r\nimport Navbar from './view/components/Navbar';\r\nimport { ConnectedRouter} from 'connected-react-router';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from './view/state';\r\nimport { State } from './view/state/store';\r\nimport DashBoard from './view/pages/DashBoard';\r\nimport LandingPage from './view/pages/LandingPage';\r\nimport Footer from './view/components/footer';\r\nimport RegisterPage from './view/pages/RegisterPage';\r\nimport CataloguePage from './view/pages/CataloguePage';\r\nimport CreateGardenerPlant from './view/components/gardenerPlant/CreateGardenerPlant';\r\nimport CreateGardenerPlantPage from './view/pages/CreateGardenerPlantPage';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport UpdateGardenerPlantForm from './view/components/gardenerPlant/UpdateGardenerPlantForm';\r\nimport GardenerPlantPage from './view/pages/GardenerPlantPage';\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const myCarousel = document.getElementById('olivier')\r\n  console.log(myCarousel)\r\n\r\n// myCarousel.addEventListener('slide.bs.carousel', function () {\r\n//   // do something...\r\n// })\r\n \r\n  const serviceRepo = useInjection(IServiceRepository);\r\n\r\n  //1 - Vérfiie le statut de connexion de l'utilisateur dans le state à l'ouverture de l'application\r\n  const authenticationStatus: boolean = serviceRepo.isAuthenticated();\r\n  // console.log('authentifié au lancement application => ' + authenticationStatus)\r\n\r\n   //2 - Vérfie si un token exite dans le local storage du  navigateur et s'il est valide !\r\n  serviceRepo.setup();\r\n\r\n  // 3 - Mise à jour du state en fonction du statut de connexion\r\n  const dispatch = useDispatch();\r\n  const { setIsAuthenticated} = bindActionCreators(actionCreators, dispatch);  \r\n  // const state = useSelector((state: State) => state);\r\n\r\n  // console.log((state));\r\n  setIsAuthenticated(authenticationStatus);\r\n  const isAuthenticated: boolean = useSelector((state: State) => state.login.isAuthenticated);\r\n  \r\n\r\n\r\n  return (  \r\n    \r\n      <ConnectedRouter history= {history}>\r\n        <Navbar />\r\n        <main className=\"App\">\r\n          <Switch>\r\n            <Route path='/' exact component={LandingPage}/>\r\n            <Route path='/catalogue' exact component={CataloguePage}/>\r\n            <Route path='/enregistrement' exact component={RegisterPage}/>\r\n            <Route path='/serre-virtuelle' render={props => {return isAuthenticated ?  <DashBoard /> : <Redirect to='/' />;}} />\r\n            <Route path='/plantes/ajout' render={() => {return isAuthenticated ?  <CreateGardenerPlantPage /> : <Redirect to='/' />;}} />\r\n            <Route path='/plantes/modification/:plantId' render={() => {return isAuthenticated ?  <GardenerPlantPage /> : <Redirect to='/' />;}} />\r\n          </Switch>\r\n        </main>\r\n        <Footer/>\r\n        <ToastContainer position={toast.POSITION.BOTTOM_RIGHT} autoClose={2000}/>\r\n      </ConnectedRouter>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals =  (onPerfEntry: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\nimport { injectable } from \"inversify\";\r\nimport { toast } from \"react-toastify\";\r\nimport { corsHeadersSetter } from \"../core/utils/corsHeadersSetter\";\r\nimport { requestBuilder } from \"../core/utils/requestBuilder\";\r\nimport IGardenerPlantRepository from \"../domain/adapters/repositories/IGardenerPlantRepository\";\r\n\r\ncorsHeadersSetter(axios);\r\n@injectable()\r\nexport default class GardenerPlantRepositoryImpl implements IGardenerPlantRepository {\r\n\r\n    \r\n    public  registerGardenerPlant = async ({user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate}: registerGardenerPlantFormData): Promise<void> => {\r\n\r\n        const requestUrl: string = requestBuilder('/api/gardener_plants')\r\n        const gardenerPlantDetails:registerGardenerPlantFormData = {user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate};\r\n        console.log(gardenerPlantDetails);\r\n        \r\n        try {\r\n            // axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\r\n            // corsHeadersSeter(axios)\r\n            const data: any = (await axios.post(requestUrl, gardenerPlantDetails)).data\r\n            toast.success('Votre plante a été créée avec succes', { delay: 1500 })\r\n        } catch (error) {\r\n            toast.error('Une erreur est survenue lors de la création de votre plante', { delay: 1500 })\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    public updateGardenerPlant = async (gardenerPlantId:number, {user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate}:updateGardenerPlantFormData): Promise<void> => {\r\n\r\n        const requestUrl = requestBuilder('/api/gardener_plants/' + gardenerPlantId);\r\n        const gardenerPlantDetails: updateGardenerPlantFormData ={user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate};\r\n    \r\n        try {\r\n        // corsHeadersSeter(axios)\r\n        const data: any = (await axios.put(requestUrl, gardenerPlantDetails)).data\r\n        toast.success('Votre plante a été modifiée avec succes', { delay: 1500 })\r\n        } catch (error) {\r\n            toast.error('Une erreur est survenue lors de la modification de votre plante', { delay: 2000 })\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    public deleteGardenerPlant = async (id: number):Promise<void> => {\r\n\r\n        const requestUrl = requestBuilder('/api/gardener_plants/' + id);\r\n\r\n        try {\r\n        // corsHeadersSeter(axios)\r\n        const data: any = (await axios.delete(requestUrl)).data\r\n        toast.success('Votre plante a été supprimée avec succes', { delay: 1500 })\r\n\r\n        } catch (error) {\r\n            toast.error('Une erreur est survenue lors de la suppression de votre plante', { delay: 1500 })\r\n             console.log(error)\r\n        }\r\n    }  \r\n}\r\nexport interface registerGardenerPlantFormData {\r\n    user: string,\r\n    plant: string,\r\n    nickname: string,\r\n    sunlight: string,\r\n    size: string,\r\n    season: string,\r\n    topography: string,\r\n    location: string,\r\n    lastWateringDate: string\r\n}\r\nexport interface updateGardenerPlantFormData {\r\n    user: string,\r\n    plant: string,\r\n    nickname: string,\r\n    sunlight: string,\r\n    size: string,\r\n    season: string,\r\n    topography: string,\r\n    location: string\r\n    lastWateringDate: string\r\n}","\r\n\r\n\r\nexport interface IPlant {\r\n    id: number;\r\n    name: string;\r\n    image: string;\r\n    description: string;\r\n    exposition: string;\r\n    care: string;\r\n    toxicity: string;\r\n    frequency?: number;\r\n    type: string;\r\n}\r\n\r\n\r\nexport default class Plant {\r\n\r\n    id: number;\r\n    name: string;\r\n    image: string;\r\n    description: string;\r\n    exposition: string;\r\n    care: string;\r\n    toxicity: string;\r\n    frequency: number;\r\n    type: string;\r\n\r\n    constructor(id: number, name: string, image: string, description: string, exposition: string, care: string,  toxicity: string, frequency: number, type: string){\r\n        this.id = id;\r\n        this.name = name;\r\n        this.image = image;\r\n        this.description = description;\r\n        this.exposition = exposition;\r\n        this.care = care;\r\n        this.toxicity = toxicity;\r\n        this.frequency = frequency;\r\n        this.type = type;\r\n    }\r\n}\r\n\r\n","import { injectable } from \"inversify\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport IPlantRepository from \"../domain/adapters/repositories/IPlantRepository\";\r\nimport Plant from \"../domain/entities/Plant\";\r\nimport { requestBuilder } from \"../core/utils/requestBuilder\";\r\nimport { corsHeadersSetter } from \"../core/utils/corsHeadersSetter\";\r\n\r\n\r\n\r\n@injectable()\r\nexport default class PlantRepositoryImpl implements IPlantRepository {\r\n\r\n    public getAllPlants = async (): Promise<Plant[] | undefined> => {\r\n        \r\n        const requestUrl: string = requestBuilder(\"/api/plants\")\r\n\r\n        try {\r\n            corsHeadersSetter(axios)\r\n            const data: any = (await axios.get<AxiosResponse>(requestUrl)).data\r\n            // console.log(data['hydra:member'])\r\n            const plantsData: Plant[] = data['hydra:member']\r\n            const plants: Plant[] = plantsData.map( function (plant) {\r\n                return new Plant (plant.id, plant.name, plant.image, plant.description, plant.exposition, plant.care, plant.toxicity,plant.frequency, plant.type)\r\n            })\r\n            return plants;\r\n        } catch (error) {\r\n            \r\n        }\r\n        return;\r\n    }\r\n}\r\n\r\n","import { injectable } from \"inversify\";\r\nimport axios from \"axios\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport IServiceRepository from \"../domain/adapters/repositories/IServiceRepository\";\r\nimport { corsHeadersSetter } from \"../core/utils/corsHeadersSetter\";\r\n\r\ncorsHeadersSetter(axios)\r\n@injectable()\r\nexport default class ServiceRepositoryImpl implements IServiceRepository {\r\n\r\n    // private protocole: string = 'http://';\r\n    // private domain: string = 'drink-up-apiplatform.test:8080';\r\n    // private url: string = this.protocole + this.domain;\r\n\r\n    public setup(){\r\n\r\n        //Vérification existence et validité du token\r\n        const token: string | null | undefined = window.localStorage.getItem('authToken');\r\n\r\n        if ((token !== \"undefined\" && token !== null )){\r\n        const {exp: expiration}: any = jwtDecode(token);\r\n\r\n         if(expiration * 1000 > new Date().getTime()){\r\n            this.setAxiosToken(token);\r\n            }  \r\n        }\r\n    }\r\n\r\n    private setAxiosToken (token:string): void {\r\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\r\n    }\r\n\r\n    public isAuthenticated = (): boolean => {\r\n        const token: any = window.localStorage.getItem('authToken');\r\n\r\n        if (token !== \"undefined\" && token !== null ){\r\n            const {exp: expiration}: any = jwtDecode(token);\r\n            \r\n            if(expiration * 1000 > new Date().getTime()){\r\n                return true;\r\n            }\r\n            return false\r\n        }\r\n        return false;\r\n    }\r\n}","import { Container } from \"inversify\";\r\nimport GardenerPlantRepositoryImpl from \"../application/GardenerPlantRepositoryImpl\";\r\nimport PlantRepositoryImpl from \"../application/PlantRepositoryImpl\";\r\nimport ServiceRepositoryImpl from \"../application/ServiceRepositoryImpl\";\r\nimport UserRepositoryImpl from \"../application/UserRepositoryImpl\";\r\nimport IGardenerPlantRepository from \"../domain/adapters/repositories/IGardenerPlantRepository\";\r\nimport IPlantRepository from \"../domain/adapters/repositories/IPlantRepository\";\r\nimport IServiceRepository from \"../domain/adapters/repositories/IServiceRepository\";\r\nimport IUserRepository from \"../domain/adapters/repositories/IUserRepository\";\r\n\r\n\r\nconst container = new Container();\r\n\r\ncontainer.bind<IUserRepository>(IUserRepository).to(UserRepositoryImpl);\r\ncontainer.bind<IServiceRepository>(IServiceRepository).to(ServiceRepositoryImpl);\r\ncontainer.bind<IPlantRepository>(IPlantRepository).to(PlantRepositoryImpl);\r\ncontainer.bind<IGardenerPlantRepository>(IGardenerPlantRepository).to(GardenerPlantRepositoryImpl);\r\n\r\n\r\nexport default container;","import \"reflect-metadata\"\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { Provider as Container }from 'inversify-react';\r\nimport container from './core/di';\r\nimport store from \"./view/state/store\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Container container={container}>\r\n        <Provider store = {store}>\r\n          <App />\r\n        </Provider>\r\n      </Container>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(() => {});"],"sourceRoot":""}