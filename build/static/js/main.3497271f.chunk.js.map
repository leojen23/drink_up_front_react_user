{"version":3,"sources":["view/state/actions/actionType.ts","view/state/reducers/loginReducer.ts","view/state/reducers/plantReducer.ts","view/state/reducers/paginationReducer.ts","view/state/reducers/gardenerPlantReducer.ts","view/state/store.ts","domain/adapters/repositories/IServiceRepository.ts","domain/adapters/repositories/IUserRepository.tsx","domain/entities/user.tsx","core/utils/requestBuilder.ts","domain/entities/GardenerPlant.ts","application/UserRepositoryImpl.ts","view/state/action-creators/index.ts","view/components/Navbar.tsx","view/components/formFields.tsx","view/components/User/LoginForm.tsx","domain/adapters/repositories/IGardenerPlantRepository.ts","view/pages/DashBoard.tsx","domain/adapters/repositories/IPlantRepository.tsx","view/components/plant/showPlantModal.tsx","view/pages/LandingPage.tsx","view/components/footer.tsx","view/components/User/RegisterForm.tsx","view/pages/RegisterPage.tsx","view/components/Pagination.tsx","view/pages/CataloguePage.tsx","view/components/gardenerPlant/CreateGardenerPlant.tsx","view/pages/CreateGardenerPlantPage.tsx","view/components/gardenerPlant/UpdateGardenerPlantForm.tsx","view/pages/GardenerPlantPage.tsx","App.tsx","reportWebVitals.ts","application/GardenerPlantRepositoryImpl.ts","domain/entities/Plant.tsx","application/PlantRepositoryImpl.ts","application/ServiceRepositoryImpl.ts","core/di.ts","index.tsx"],"names":["ActionType","InitialState","isAuthenticated","user","error","isLoading","loginReducer","state","action","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILED","GET_USER_DATA_REQUEST","GET_USER_DATA_SUCCESS","newState","GET_USER_DATA_FAILURE","SIGNOUT","SET_IS_AUTHENTICATED","status","CREATE_GARDENER_PLANT_REQUEST","CREATE_GARDENER_PLANT_SUCCESS","REMOVE_GARDENER_PLANT","plants","modal","id","image","name","description","exposition","care","toxicity","frequency","pagination","plantReducer","GET_PLANTS_REQUEST","GET_PLANTS_SUCCESS","GET_PLANTS_FAILURE","SET_PLANTS","SET_MODAL","plant","currentPage","paginationReducer","SET_CURRENT_PAGE","gardenerPlantReducer","history","createBrowserHistory","reducers","combineReducers","router","connectRouter","form","formReducer","login","gardenerPlant","store","createStore","applyMiddleware","routerMiddleware","thunk","IServiceRepository","injectable","IUserRepository","User","gender","firstname","surname","isNotified","gardenerPlants","numberOfPlants","numberOfOnDayWaterings","numberOfLateWaterings","numberOfUpToDateWaterings","this","requestBuilder","endpoint","protocole","GardenerPlant","nickname","sunlight","size","season","topography","location","cataloguePlantId","cataloguePlantName","nextWateringDate","lastWateringDate","wateringStatus","wateringFrequency","numberOfLateDays","UserRepositoryImpl","domain","url","getAuthenticatedUserId","token","window","localStorage","getItem","parseJwt","signOut","unsetAxiosToken","removeTokenFromLocalStorage","register","a","email","password","userDetails","axios","post","data","toast","success","delay","console","log","getUserData","requestUrl","get","gardenerPlantsData","map","moment","format","is_notified","totalNumberOfGardenerPlants","numberOnDayWaterings","water","userIRI","plantIRI","wateringDate","gardenerPlantDetails","put","username","credentials","setAxiosToken","storeTokenInLocalStorage","setItem","removeItem","defaults","headers","common","JSON","parse","atob","split","logIn","repo","dispatch","loginRequest","signIn","userId","loginSuccess","push","loginFailed","setIsAuthenticated","logOut","fetchUserData","getUserDataRequest","getUserDataSuccess","getUserDataFailure","waterPlant","userRepo","getState","fetchPlants","getPlantsRequest","getAllPlants","getPlantsSuccess","getPlantsFailure","createGardenerPlant","registerGardenerPlant","updateGardenerPlant","gardenerPlantId","removeGardenerPlant","gardernerPlantId","deleteGardenerPlant","setCurrentPage","setModal","Navbar","useInjection","useDispatch","bindActionCreators","actionCreators","useSelector","isAuth","className","href","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","onClick","renderInputField","input","label","meta","touched","htmlFor","placeholder","renderSelectField","children","renderSwitchField","defaultValue","renderHiddenField","reduxForm","destroyOnUnmount","handleSubmit","onSubmit","values","Field","component","IGardenerPlantRepository","DashBoard","gardenerPlantRepo","Moment","useEffect","role","scope","data-toggle","data-placement","title","length","style","maxWidth","src","alt","to","confirmAlert","message","buttons","confirmValidation","IPlantRepository","ShowPlantModal","props","Modal","aria-labelledby","centered","Header","closeButton","Title","Body","LandingPage","useState","modalShow","setModalShow","plantRepo","Carousel","Item","Caption","Button","variant","show","onHide","target","rel","Footer","submit","passwordReg","value","selected","RegisterPage","Pagination","itemsPerPage","onPageChange","pageCount","Math","ceil","pages","i","page","getData","items","start","slice","CataloguePage","paginatedPlants","Accordion","flush","eventKey","toString","enableReinitialize","plantId","CreateGardenerPlantPage","initialValues","reset","pristine","submitting","GardenerPlantPage","useParams","Object","keys","filter","parseInt","App","myCarousel","document","getElementById","serviceRepo","authenticationStatus","setup","path","exact","render","position","POSITION","BOTTOM_RIGHT","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GardenerPlantRepositoryImpl","delete","Plant","PlantRepositoryImpl","plantsData","ServiceRepositoryImpl","jwtDecode","exp","Date","getTime","container","Container","bind","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.3497271f.chunk.js","sourcesContent":["export enum ActionType {\r\n\r\n\r\n    //LOGIN / USER ACTION TYPES ---------------------------------\r\n    LOGIN_REQUEST = 'LOGIN_REQUEST',\r\n    LOGIN_SUCCESS = \"LOGIN_SUCCESS\",\r\n    LOGIN_FAILED = \"LOGIN_FAILED\",\r\n    SIGNIN = 'SIGNIN',\r\n    REGISTER = 'REGISTER',\r\n    SIGNOUT = 'SIGNOUT',\r\n    SET_IS_AUTHENTICATED = 'SET_IS_AUTHENTICATED',\r\n    GET_USER_DATA_REQUEST = 'GET_USER_DATA_REQUEST',\r\n    GET_USER_DATA_SUCCESS = 'GET_USER_DATA_SUCCESS',\r\n    GET_USER_DATA_FAILURE = 'GET_USER_DATA_FAILURE',\r\n    WATER_PLANT ='WATER_PLANT',\r\n\r\n    //PLANT ACTION TYPES ---------------------------------\r\n\r\n    SET_PLANTS = 'SET_PLANTS',\r\n    SET_MODAL = 'SET_MODAL',\r\n    GET_PLANTS_REQUEST = 'GET_PLANTS_REQUEST',\r\n    GET_PLANTS_SUCCESS = 'GET_PLANTS_SUCCESS',\r\n    GET_PLANTS_FAILURE = 'GET_PLANTS_FAILURE',\r\n\r\n\r\n    //GARDNERPLANT ACTION TYPES ---------------------------------\r\n\r\n    CREATE_GARDENER_PLANT_REQUEST = 'CREATE_GARDENER_PLANT_REQUEST',\r\n    CREATE_GARDENER_PLANT_SUCCESS = 'CREATE_GARDENER_PLANT_SUCCESS',\r\n    CREATE_GARDENER_PLANT_FAILURE = 'CREATE_GARDENER_PLANT_FAILURE',\r\n    REMOVE_GARDENER_PLANT =\"REMOVE_GARDENER_PLANT\",\r\n\r\n\r\n    //PAGINATION ACTION TYPES ---------------------------------\r\n\r\n    SET_CURRENT_PAGE = 'SET_CURRENT_PAGE',\r\n}","import { AnyAction } from \"redux\";\r\nimport User from \"../../../domain/entities/user\";\r\n\r\nimport { Action } from \"../actions/actionInterfaces\";\r\nimport { ActionType } from \"../actions/actionType\";\r\n\r\ninterface LoginState{\r\n    isAuthenticated: boolean,\r\n    user: any,\r\n    error: string | null,\r\n    isLoading: boolean\r\n}\r\n\r\nconst InitialState: LoginState= {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    error: '',\r\n    isLoading: true\r\n}\r\n\r\nconst loginReducer = (state: LoginState = InitialState , action: Action): LoginState => {\r\n    switch (action.type) {\r\n        case ActionType.LOGIN_REQUEST: \r\n        return {\r\n            ...state, \r\n            isLoading: true\r\n        }\r\n        case ActionType.LOGIN_SUCCESS:\r\n            return {\r\n                ...state, \r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                user: action.user\r\n            }\r\n        case ActionType.LOGIN_FAILED:\r\n            return {\r\n                ...state, \r\n                isLoading: false, \r\n                error: action.error\r\n            }\r\n        case ActionType.GET_USER_DATA_REQUEST: \r\n        return {\r\n            ...state, \r\n            isLoading: true\r\n        }\r\n        case ActionType.GET_USER_DATA_SUCCESS:\r\n        \r\n            let newState: LoginState = {\r\n                ...state, \r\n                isLoading: false,\r\n                isAuthenticated: true,\r\n                user: action.user\r\n            }\r\n            // console.log(newState)\r\n            return newState\r\n        case ActionType.GET_USER_DATA_FAILURE:\r\n            return {\r\n                ...state, \r\n                isLoading: false, \r\n                error: action.error\r\n            }\r\n        case ActionType.SIGNOUT:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false\r\n            }\r\n        case ActionType.SET_IS_AUTHENTICATED:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: action.status\r\n        }\r\n\r\n        case ActionType.CREATE_GARDENER_PLANT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n        }\r\n        case ActionType.CREATE_GARDENER_PLANT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n        }\r\n        case ActionType.REMOVE_GARDENER_PLANT:\r\n            return {\r\n                ...state,\r\n                \r\n        }\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default loginReducer;\r\n\r\n","\r\nimport { IPlant } from \"../../../domain/entities/Plant\";\r\nimport { Action } from \"../actions/actionInterfaces\";\r\nimport { ActionType } from \"../actions/actionType\";\r\n\r\ninterface PlantState{\r\n    plants: IPlant[];\r\n    modal: IPlant\r\n    pagination: {\r\n    }\r\n    isLoading: boolean\r\n    error: string\r\n}\r\n\r\nconst InitialState: PlantState= {\r\n    plants: [],\r\n    modal: {\r\n        id: 0 ,\r\n        image: '',\r\n        name:'',\r\n        description:'',\r\n        exposition: '',\r\n        care:'',\r\n        toxicity: '',\r\n        frequency:0,\r\n        type: '',\r\n    },\r\n    pagination:{},\r\n    isLoading: false,\r\n    error: \"\"\r\n}\r\n\r\nconst plantReducer = (state: PlantState = InitialState , action: Action): PlantState => {\r\n    switch (action.type) {\r\n        \r\n        case ActionType.GET_PLANTS_REQUEST: \r\n        return {\r\n            ...state, \r\n            isLoading: true\r\n        }\r\n        case ActionType.GET_PLANTS_SUCCESS: \r\n        return {\r\n            ...state, \r\n            plants: action.plants,\r\n            isLoading: false\r\n        }\r\n        case ActionType.GET_PLANTS_FAILURE: \r\n        return {\r\n            ...state, \r\n            error: action.error\r\n        }\r\n\r\n\r\n        case ActionType.SET_PLANTS: \r\n        return {\r\n            ...state, \r\n            plants: action.plants\r\n        }\r\n        case ActionType.SET_MODAL: \r\n        return {\r\n            ...state, \r\n            modal:action.plant\r\n        }\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default plantReducer;\r\n\r\n","import { Action } from \"../actions/actionInterfaces\";\r\nimport { ActionType } from \"../actions/actionType\";\r\n\r\ninterface PaginationState{\r\n    currentPage: number;\r\n} \r\n\r\nconst InitialState: PaginationState= {\r\n    currentPage: 1\r\n}\r\n\r\nconst paginationReducer = (state: PaginationState = InitialState , action: Action): PaginationState => {\r\n    switch (action.type) {\r\n        \r\n        case ActionType.SET_CURRENT_PAGE: \r\n        return {\r\n            ...state, \r\n            currentPage: action.currentPage\r\n        }\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default paginationReducer;\r\n\r\n","import { actionTypes } from \"redux-form\"\r\nimport { Action } from \"../actions/actionInterfaces\"\r\nimport { ActionType } from \"../actions/actionType\"\r\n\r\ninterface GardenerPlantState{\r\n    isLoading: boolean\r\n    error: string\r\n}\r\n\r\nconst InitialState: GardenerPlantState= {\r\n    isLoading: true,\r\n    error: \"\"\r\n}\r\n\r\nconst gardenerPlantReducer = (state: GardenerPlantState = InitialState , action: Action): GardenerPlantState => {\r\n    switch (action.type) {\r\n        \r\n//         case ActionType.CREATE_GARDENER_PLANT_REQUEST: \r\n//         return {\r\n//             ...state, \r\n//             isLoading: false\r\n//            }  \r\n//         case ActionType.CREATE_GARDENER_PLANT_SUCCESS: \r\n//            return {\r\n//             ...state, \r\n//             isLoading: false\r\n//            }   \r\n//         case ActionType.CREATE_GARDENER_PLANT_FAILURE: \r\n//            return {\r\n//             ...state, \r\n//             error: action.error\r\n//            }   \r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default gardenerPlantReducer;\r\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createBrowserHistory } from 'history';\r\nimport {\r\n    ConnectedRouter,\r\n    connectRouter,\r\n    routerMiddleware\r\n  }from 'connected-react-router';\r\n// import userReducer from \"./reducers/userReducer\";\r\nimport {reducer as formReducer} from 'redux-form';\r\nimport loginReducer from \"./reducers/loginReducer\";\r\nimport plantReducer from \"./reducers/plantReducer\";\r\nimport paginationReducer from \"./reducers/paginationReducer\";\r\nimport gardenerPlantReducer from \"./reducers/gardenerPlantReducer\";\r\n\r\n\r\n\r\nexport const history = createBrowserHistory();\r\nconst reducers =  combineReducers({\r\n  router: connectRouter(history),\r\n  form: formReducer,\r\n  login: loginReducer,\r\n  plant: plantReducer,\r\n  pagination: paginationReducer,\r\n  gardenerPlant: gardenerPlantReducer\r\n})\r\nconst store = createStore(\r\n  reducers,\r\n  applyMiddleware(routerMiddleware(history), thunk)\r\n);\r\n\r\n    \r\n    export default store;\r\n    export type State = ReturnType<typeof reducers>;\r\n    // Infer the `RootState` and `AppDispatch` types from the store itself\r\n//     export type RootState = ReturnType<typeof store.getState>\r\n// // Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\n//     export type AppDispatch = typeof store.dispatch \r\n    ","import { injectable } from \"inversify\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IServiceRepository {\r\n    abstract setup():void;\r\n    abstract isAuthenticated(): boolean\r\n}","import { injectable } from \"inversify\";\r\nimport { registerFormData } from \"../../../application/UserRepositoryImpl\";\r\nimport { IGardenerPlant } from \"../../entities/GardenerPlant\";\r\nimport User from \"../../entities/user\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IUserRepository {\r\n    abstract signIn(username: string, password: string):void;\r\n    abstract register({gender, firstname, surname,email, password, isNotified }: registerFormData):Promise<void>;\r\n    abstract signOut():void;\r\n    abstract getUserData(id: number | undefined): Promise<User | undefined> ;\r\n    abstract getAuthenticatedUserId(): number | undefined;\r\n    abstract water (gardenerPlant:IGardenerPlant, userIRI: string, plantIRI: string, wateringDate: string): Promise<void>;\r\n}","import GardenerPlant from \"./GardenerPlant\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport interface IUser {\r\n    id: number;\r\n    gender: string;\r\n    firstname: string;\r\n    surname: string;\r\n    isNotified: boolean;\r\n    gardenerPlants: GardenerPlant[];\r\n    numberOfPlants: number;\r\n    numberOfOnDayWaterings: number;\r\n    numberOfLateWaterings: number;\r\n    numberOfUpToDateWaterings: number;\r\n}\r\nexport default class User {\r\n\r\n    id: number;\r\n    gender: string;\r\n    firstname: string;\r\n    surname: string;\r\n    isNotified: boolean;\r\n    gardenerPlants: GardenerPlant[];\r\n    numberOfPlants: number;\r\n    numberOfOnDayWaterings: number;\r\n    numberOfLateWaterings: number;\r\n    numberOfUpToDateWaterings: number;\r\n\r\n    constructor(id: number, gender: string, firstname: string, surname: string, isNotified: boolean, gardenerPlants:GardenerPlant[], numberOfPlants: number, numberOfOnDayWaterings: number, numberOfLateWaterings: number, numberOfUpToDateWaterings: number){\r\n        this.id = id;\r\n        this.gender = gender;\r\n        this.firstname = firstname;\r\n        this.surname = surname;\r\n        this.isNotified = isNotified;\r\n        this.gardenerPlants = gardenerPlants;\r\n        this.numberOfPlants = numberOfPlants;\r\n        this.numberOfOnDayWaterings = numberOfOnDayWaterings;\r\n        this.numberOfLateWaterings = numberOfLateWaterings;\r\n        this.numberOfUpToDateWaterings = numberOfUpToDateWaterings;\r\n    }\r\n}\r\n\r\n","export const requestBuilder = (endpoint: string): string => {\r\n    const protocole: string = \"http://\";\r\n    const domain: string = \"drink-up-apiplatform.test:8080\";\r\n    const request: string = protocole + domain + endpoint;\r\n    return request;\r\n}","\r\n\r\nexport default class GardenerPlant implements IGardenerPlant {\r\n\r\n    id: number;\r\n    nickname: string;\r\n    sunlight: string;\r\n    size: string;\r\n    season: string;\r\n    topography: string;\r\n    location: string;\r\n    frequency: number;\r\n    image: string;\r\n    cataloguePlantId: number;\r\n    cataloguePlantName: string;\r\n    nextWateringDate: string;\r\n    lastWateringDate: string;\r\n    wateringStatus: number;\r\n    wateringFrequency: number;\r\n    numberOfLateDays: number;\r\n\r\n    constructor(id: number, nickname: string, sunlight: string, size: string, season: string, topography: string,  location: string, frequency: number, image: string, cataloguePlantId: number,  cataloguePlantName: string, nextWateringDate: string,  lastWateringDate: string, wateringStatus: number,  wateringFrequency: number, numberOfLateDays: number){\r\n        this.id = id;\r\n        this.nickname = nickname;\r\n        this.sunlight = sunlight;\r\n        this.size = size;\r\n        this.season = season;\r\n        this.topography = topography;\r\n        this.location = location;\r\n        this.frequency = frequency;\r\n        this.image = image;\r\n        this.cataloguePlantId = cataloguePlantId;\r\n        this.cataloguePlantName = cataloguePlantName;\r\n        this.nextWateringDate = nextWateringDate\r\n        this.lastWateringDate = lastWateringDate\r\n        this.wateringStatus = wateringStatus\r\n        this.wateringFrequency = wateringFrequency\r\n        this.numberOfLateDays = numberOfLateDays\r\n    }\r\n}\r\n\r\nexport interface IGardenerPlant {\r\n    id: number;\r\n    nickname: string;\r\n    sunlight: string;\r\n    size: string;\r\n    season: string;\r\n    topography: string;\r\n    location: string;\r\n    frequency: number;\r\n    image: string;\r\n    cataloguePlantId: number;\r\n    cataloguePlantName: string;\r\n    nextWateringDate: string;\r\n    lastWateringDate: string;\r\n    wateringStatus: number;\r\n    wateringFrequency: number;\r\n    numberOfLateDays: number;\r\n}\r\n\r\n","import IUserRepository from \"../domain/adapters/repositories/IUserRepository\";\r\nimport User from \"../domain/entities/user\";\r\nimport { injectable } from \"inversify\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport {requestBuilder} from \"../core/utils/requestBuilder\";\r\nimport GardenerPlant, { IGardenerPlant } from \"../domain/entities/GardenerPlant\";\r\nimport { toast } from \"react-toastify\";\r\nimport { isConstructorDeclaration } from \"typescript\";\r\nimport moment from \"moment\";\r\n\r\n@injectable()\r\nexport default class UserRepositoryImpl implements IUserRepository {\r\n\r\n        private protocole: string = 'http://';\r\n        private domain: string = 'drink-up-apiplatform.test:8080';\r\n        private url: string = this.protocole + this.domain;\r\n\r\n        public getAuthenticatedUserId = () :number | undefined =>  {\r\n                const token: string | null = window.localStorage.getItem('authToken');\r\n\r\n                if(token){\r\n                        const data = this.parseJwt(token);\r\n                        const userId: number = data.id;\r\n                        return  userId;\r\n                }\r\n                return undefined;\r\n        }\r\n        public signOut = () => {\r\n                this.unsetAxiosToken();\r\n                this.removeTokenFromLocalStorage();\r\n        }\r\n\r\n        public async signIn (username: string, password: string){\r\n            \r\n            const requestUrl: string = requestBuilder(\"/api/login_check\");\r\n            const credentials: any = {username, password};\r\n            try {\r\n                    const data: any = (await axios.post<AxiosResponse>(requestUrl, credentials)).data\r\n                    const token: string = data.token\r\n                    \r\n                    \r\n            this.setAxiosToken(token);\r\n            this.storeTokenInLocalStorage(token);\r\n\r\n            } catch (error: any) {\r\n                toast.error('une erreur est survenue', { delay: 2000 })\r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n        public  register = async ({email, password, gender, firstname, surname, isNotified}: registerFormData): Promise<void> => {\r\n             \r\n                const apiEndPoint: string = '/api/users'  \r\n                const userDetails:  registerFormData = {email, password, gender, firstname, surname, isNotified  };\r\n                \r\n                try {\r\n                        // console.log('ppl')\r\n                    const data: any = (await axios.post(this.url + apiEndPoint, userDetails)).data\r\n                    toast.success('Votre compte a été créé avec succès !', { delay: 2000 })\r\n                } catch (error) {\r\n                        toast.error(\"Une erreur s'est produite lors de la création de votre compte !\", { delay: 2000 })\r\n                        console.log(error)\r\n                }\r\n\r\n        }\r\n        private storeTokenInLocalStorage (token: string):void {\r\n            window.localStorage.setItem('authToken', token);\r\n        }\r\n        private removeTokenFromLocalStorage ():void {\r\n                \r\n                window.localStorage.removeItem('authToken');\r\n        }\r\n        private setAxiosToken (token:string): void {\r\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\r\n        }\r\n        private unsetAxiosToken (): void {\r\n                delete axios.defaults.headers.common['Authorization'];\r\n        }\r\n\r\n        private parseJwt(token:string){\r\n                try {\r\n                        return JSON.parse(atob(token.split('.')[1]));    \r\n                } catch (error) {\r\n                        return null;     \r\n                }\r\n        }\r\n        public  getUserData = async (id:number | undefined): Promise<User | undefined> => {\r\n                console.log('je passe la encore')\r\n\r\n                const requestUrl: string = requestBuilder('/api/users/'+ id)\r\n                // console.log(requestUrl)\r\n\r\n                try {\r\n                        const data: any= (await axios.get<any>(requestUrl)).data;\r\n                        console.log(data);\r\n                        // console.log(data);\r\n                        const gardenerPlantsData: IGardenerPlant[] = data.gardenerPlants;\r\n                        // console.log(gardenerPlantsData[0].wateringFrequency)\r\n                        const gardenerPlants: GardenerPlant [] = gardenerPlantsData.map(function(gardenerPlant){\r\n                                \r\n                                return new GardenerPlant(gardenerPlant.id, gardenerPlant.nickname, gardenerPlant.sunlight, gardenerPlant.size, gardenerPlant.season, gardenerPlant.topography,gardenerPlant.location, gardenerPlant['plant'].frequency, gardenerPlant['plant'].image, gardenerPlant['plant'].id, gardenerPlant['plant'].name, gardenerPlant.nextWateringDate, moment(gardenerPlant.lastWateringDate).format('YYYY-MM-DD'), gardenerPlant.wateringStatus, gardenerPlant.wateringFrequency, gardenerPlant.numberOfLateDays)\r\n                        })\r\n\r\n                        console.log(gardenerPlants)\r\n                        const user: User | undefined = new User(data.id, data.gender, data.firstname, data.surname, data.is_notified, gardenerPlants, data.totalNumberOfGardenerPlants, data.numberOnDayWaterings, data.numberOfLateWaterings, data.numberOfUpToDateWaterings);\r\n                       \r\n                        return user;\r\n\r\n                }catch(error){\r\n                             \r\n                }\r\n        }\r\n        public water = async (gardenerPlant: IGardenerPlant, userIRI: string, plantIRI:string, wateringDate: string): Promise<void> => {\r\n\r\n                const requestUrl = requestBuilder('/api/gardener_plants/' + gardenerPlant.id);\r\n                // console.log(requestUrl);\r\n                const gardenerPlantDetails = {user: userIRI, plant:plantIRI , nickname: gardenerPlant.nickname, sunlight: gardenerPlant.sunlight, size: gardenerPlant.size, season:gardenerPlant.season, topography:gardenerPlant.topography, location: gardenerPlant.location, lastWateringDate: wateringDate };\r\n        \r\n                try {\r\n                        const data: any = (await axios.put(requestUrl, gardenerPlantDetails)).data\r\n                        console.log(data)\r\n                } catch (error) {\r\n                    toast.error('Une erreur est survenue lors de la modification de votre plante', { delay: 2000 })\r\n                     console.log(error)\r\n                }\r\n            }\r\n\r\n        \r\n}\r\nexport interface registerFormData {\r\n        email: string,\r\n        password: string,\r\n        gender: string,\r\n        firstname: string,\r\n        surname: string,\r\n        isNotified: boolean\r\n        }\r\n\r\n      ","import { ActionType } from \"../actions/actionType\"\r\nimport { Dispatch } from \"redux\";\r\nimport IUserRepository from \"../../../domain/adapters/repositories/IUserRepository\";\r\nimport User, { IUser } from \"../../../domain/entities/user\";\r\nimport { push, replace } from 'connected-react-router'\r\nimport { Action } from \"../actions/actionInterfaces\";\r\nimport { IPlant } from \"../../../domain/entities/Plant\";\r\nimport IPlantRepository from \"../../../domain/adapters/repositories/IPlantRepository\";\r\nimport { useInjection } from \"inversify-react\";\r\nimport IGardenerPlantRepository from \"../../../domain/adapters/repositories/IGardenerPlantRepository\";\r\nimport { registerGardenerPlantFormData, updateGardenerPlantFormData } from \"../../../application/GardenerPlantRepositoryImpl\";\r\nimport { toast } from \"react-toastify\";\r\nimport UserRepositoryImpl from \"../../../application/UserRepositoryImpl\";\r\nimport { IGardenerPlant } from \"../../../domain/entities/GardenerPlant\";\r\n\r\n// const userRepo: IUserRepository = useInjection(IUserRepository);\r\n\r\nexport interface LoginData {\r\n    username: string,\r\n    password: string,\r\n}\r\n\r\nexport const logIn = ({username, password}, repo: IUserRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        dispatch(loginRequest({username, password}));\r\n        await repo.signIn(username, password);\r\n        \r\n        \r\n        const userId: number | undefined = repo.getAuthenticatedUserId();\r\n        const user: User|undefined = await repo.getUserData(userId);\r\n        \r\n        if (user){\r\n            dispatch(loginSuccess(user));\r\n            dispatch(push('/serre-virtuelle'));\r\n            toast.success('Vous êtes connecté(e) à votre serre virtuelle !', { delay: 2000 })\r\n          }else {\r\n              dispatch(loginFailed('une erreur est survenue'))\r\n          }\r\n      }\r\n  }\r\nexport function loginRequest(data: LoginData): Action{\r\n    return { \r\n        type: ActionType.LOGIN_REQUEST\r\n    };\r\n  }\r\nexport function loginSuccess(user: User): Action {\r\n    return { \r\n        type: ActionType.LOGIN_SUCCESS, \r\n        user: user,\r\n    };\r\n}\r\nexport function loginFailed(error: string): Action {\r\n    return { \r\n        type: ActionType.LOGIN_FAILED, \r\n        error: error\r\n    };\r\n}\r\nexport const setIsAuthenticated = (status: boolean) => {\r\n    return {\r\n        type: ActionType.SET_IS_AUTHENTICATED,\r\n        status: status\r\n    }\r\n}\r\nexport const logOut = (repo: IUserRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        repo.signOut();\r\n        dispatch(signOut());\r\n        dispatch(push('/'));\r\n        toast.success('Vous êtes désormais deconnecté(e)', { delay: 1000 })\r\n    }\r\n}\r\nexport const signOut = () =>  ({\r\n        type: ActionType.SIGNOUT,\r\n        isAuthenticated: false\r\n    })\r\n\r\nexport const fetchUserData = (userId: number | undefined, repo: IUserRepository) => {\r\n\r\n    return async (dispatch: Dispatch) =>  {\r\n        dispatch(getUserDataRequest())\r\n        const user: IUser | undefined = await repo.getUserData(userId);\r\n        dispatch(getUserDataSuccess(user));\r\n        // console.log('ça marche aussi')\r\n    }\r\n}\r\n\r\nexport const getUserDataRequest = () =>  ({\r\n    type: ActionType.GET_USER_DATA_REQUEST,\r\n})\r\nexport const getUserDataSuccess= (user: IUser | undefined) =>  ({\r\n    type: ActionType.GET_USER_DATA_SUCCESS,\r\n    user: user\r\n})\r\nexport const getUserDataFailure = (error: string) =>  ({\r\n    type: ActionType.GET_USER_DATA_FAILURE,\r\n    error: error\r\n})\r\n\r\nexport const waterPlant = (gardenerPlant: IGardenerPlant, userRepo: IUserRepository, wateringDate: string) => {\r\n    return async (dispatch: Dispatch, getState) => {\r\n\r\n        const state = getState('login')\r\n        const userId = state.login.user.id\r\n        const userIRI = \"/api/users/\" + userId;\r\n        const plantIRI = \"/api/plants/\" + gardenerPlant.cataloguePlantId;\r\n        await userRepo.water(gardenerPlant, userIRI, plantIRI, wateringDate)\r\n        const user: IUser | undefined = await userRepo.getUserData(userId);\r\n        dispatch(getUserDataSuccess(user));\r\n        dispatch(push('/serre-virtuelle'));\r\n        toast.success('Votre plante a été arrosée et vous remercie !', { delay: 1000 })\r\n    }\r\n}\r\n\r\n\r\n// PLANTS ACTIONS -------------------------------------------------------------------\r\nexport const fetchPlants = (repo: IPlantRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        dispatch(getPlantsRequest())\r\n        const plants: IPlant[] | undefined = await  repo.getAllPlants();\r\n        dispatch(getPlantsSuccess(plants));\r\n        // dispatch(setPlants(plants));\r\n    }\r\n}\r\nexport const getPlantsRequest = () =>  ({\r\n    type: ActionType.GET_PLANTS_REQUEST,\r\n})\r\nexport const getPlantsSuccess = (plants: IPlant[] | undefined) =>  ({\r\n    type: ActionType.GET_PLANTS_SUCCESS,\r\n    plants: plants\r\n})\r\nexport const getPlantsFailure = (error: string) =>  ({\r\n    type: ActionType.GET_PLANTS_FAILURE,\r\n    error: error\r\n})\r\n\r\n\r\n\r\n\r\n// GARDENER PLANTS ACTIONS -------------------------------------------------------------------\r\nexport const createGardenerPlant = ({user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate}: registerGardenerPlantFormData, repo: IGardenerPlantRepository) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        \r\n        await repo.registerGardenerPlant({user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate})\r\n       \r\n        dispatch(push('/serre-virtuelle'));\r\n        toast.success('Votre plante a été créée avec succes', { delay: 1000 })\r\n    }\r\n}\r\nexport const updateGardenerPlant = (gardenerPlantId: number, {user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate}: updateGardenerPlantFormData, repo: IGardenerPlantRepository) => {\r\n    \r\n    return async (dispatch: Dispatch) => {\r\n\r\n        await repo.updateGardenerPlant(gardenerPlantId, {user:user, plant:plant, nickname: nickname, sunlight: sunlight, size: size, season: season, topography: topography, location: location, lastWateringDate: lastWateringDate})\r\n        // console.log('updategardenerplant')\r\n        // console.log('ppl')\r\n        dispatch(push('/serre-virtuelle'));\r\n        toast.success('Votre plante a été modifiée avec succes', { delay: 1000 })\r\n    }\r\n}\r\n// export const createGardenerPlantRequest = () =>  ({\r\n//     type: ActionType.CREATE_GARDENER_PLANT_REQUEST,\r\n// })\r\n// export const createGardenerPlantSuccess = () =>  ({\r\n//     type: ActionType.CREATE_GARDENER_PLANT_SUCCESS\r\n// })\r\n// export const createGardenerPlantFailure = (error: string) =>  ({\r\n//     type: ActionType.CREATE_GARDENER_PLANT_FAILURE,\r\n//     error: error\r\n// })\r\n\r\nexport const removeGardenerPlant = (gardernerPlantId: number, repo: IGardenerPlantRepository, userId) => {\r\n    return async (dispatch: Dispatch) =>  {\r\n        await repo.deleteGardenerPlant(gardernerPlantId)\r\n        const userRepo = new UserRepositoryImpl();\r\n        const user: IUser | undefined = await userRepo.getUserData(userId);\r\n        dispatch(getUserDataSuccess(user));\r\n        toast.success('Votre plante a été supprimée avec succes', { delay: 2000 })\r\n    }\r\n}\r\n\r\n// PAGINATION ACTIONS -------------------------------------------------------------------\r\nexport const setCurrentPage = (currentPage: number) =>  ({\r\n    type: ActionType.SET_CURRENT_PAGE,\r\n    currentPage: currentPage\r\n})\r\n\r\n// LANDING PAGE MODAL ACTIONS -------------------------------------------------------------------\r\nexport const setModal = (plant: IPlant) =>  ({\r\n    type: ActionType.SET_MODAL,\r\n    plant: plant\r\n})","\r\nimport { useInjection } from 'inversify-react';\r\nimport  { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../state';\r\nimport { State } from '../state/store';\r\nimport { SiWeightsandbiases } from \"react-icons/si\";\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport {BrowserRouter as Router, Switch, Route, Redirect, NavLink} from \"react-router-dom\";\r\nimport { toast } from 'react-toastify';\r\nimport User from '../../domain/entities/user';\r\nimport { FaPagelines } from \"react-icons/fa\";\r\n\r\n\r\nconst Navbar = () => {\r\n    \r\n  \r\n    const userRepo = useInjection(IUserRepository);\r\n    const dispatch = useDispatch();\r\n    const { logOut } = bindActionCreators(actionCreators, dispatch);\r\n    const user: User = useSelector((state: State) => state.login.user);\r\n    const isAuth: boolean = useSelector((state: State) => state.login.isAuthenticated);\r\n    \r\n\r\n    return(\r\n        <div className=\"\">\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand d-flex flex-column align-items-center\" href=\"/\">\r\n                        <span className=\"text-success\"><SiWeightsandbiases size={45} /></span>\r\n                        <small className=\"text-success fs-6\">Drink up</small>\r\n                    </a>\r\n                \r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#main-nav\" aria-controls=\"main-nav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"main-nav\">\r\n                        <ul className=\"navbar-nav me-auto\">\r\n                            {isAuth && <>\r\n                            <li className=\"nav-item\">\r\n                            <a className=\"nav-link \" href=\"/serre-virtuelle\">Ma serre virtuelle</a>\r\n                            </li>\r\n                            </>}\r\n                            <li className=\"nav-item\" aria-current=\"page\">\r\n                            <a className=\"nav-link \"  href=\"/catalogue\">Nos Plantes</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">Guide pratique</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">Nous contacter</a>\r\n                            </li>\r\n\r\n                        </ul>\r\n                        {!isAuth && <>\r\n                        <ul className=' navbar-nav ml-auto'>\r\n                            <li className=\"nav-item\">\r\n                                <a href=\"#presentation-login\" onClick={() => {}} className=\"btn btn-success rounded\">Connexion</a>\r\n                            </li>\r\n                        </ul>\r\n                        </>}\r\n                        {isAuth && <>\r\n                        <div className=\"text-dark bg-light d-flex justify-content-center align-items-center p-2 border rounded-circle m-3\">\r\n                            <span className=\"text-dark fw-normal fs-3\">{user.numberOfPlants}</span>\r\n                            <span className=\"text-dark\"><FaPagelines size={25} /></span>\r\n                        </div>\r\n                        <ul className=' navbar-nav ml-auto'>\r\n                            <li className=\"nav-item\">\r\n                                <button onClick={() => {logOut(userRepo)}}className=\"btn btn-outline-success\">Deconnexion</button>\r\n                            </li>\r\n                        </ul>\r\n                        </>}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","\r\n\r\nimport DatePicker from \"react-widgets/DatePicker\";\r\n\r\nexport const renderInputField = ({input, type, label, meta: {touched, error} }:any) => (\r\n    <div className=\"form-group text-light\">\r\n        <label htmlFor={input.name} className=\"form-label mt-4 mr-4 float-start\">{label}</label>\r\n        <input {...input} type={ type } id={input.name} className=\"form-control rounded\" placeholder={label}/>\r\n        {touched && error &&\r\n        <small className='error'>{error}</small>}\r\n    </div>\r\n);\r\nexport const renderSelectField = ({input, type, label, children, meta: {touched, error} }:any) => (\r\n    <div className=\"form-group field text-light\">\r\n        <label htmlFor={input.name} className=\"form-label mt-4 float-start\">{label}</label>\r\n        <select {...input} className='form-select rounded'>\r\n            {children}\r\n        </select>\r\n        {touched && (error && <small className=\"help is-danger\">{error}</small>)}\r\n    </div>\r\n);\r\nexport const renderSwitchField = ({input, type, label, meta: {touched, error}, defaultValue }:any) => (\r\n    <div className=\"form-check form-switch mt-4 text-light\">\r\n        <input {...input} className=\"form-check-input \"  type={type} id={input.name} defaultValue={defaultValue} name='isNotified' />\r\n        <label className=\"form-check-label float-start ml-5\" htmlFor={input.name} >{label}</label>\r\n    </div>\r\n);\r\n\r\nexport const renderHiddenField = ({input, type, meta: {touched, error} }:any) => (\r\n    <div className=\"form-group text-light\">\r\n        <input {...input} type={ type } id={input.name} className=\"form-control rounded\"/>\r\n        {touched && error &&\r\n        <small className='error'>{error}</small>}\r\n    </div>\r\n);\r\n\r\nexport const renderDateTimePicker1 = ({ input: { onChange, value }, showTime }) =>\r\n  <DatePicker \r\n  />\r\n\r\n\r\n\r\n// export const renderDatePicker = ({ input: { onChange, value}, label, showTime }) =>\r\n// <div className=\"form-group text-light\">\r\n//     <input {...input} type={ type } id={input.name} className=\"form-control rounded\"/>{touched && error && <small className='error'>{error}</small>}\r\n//     <label className=\"form-check-label float-start mt-4 ml-5 mb-2\" htmlFor={\"wateringDate\"} >{label}</label>\r\n//     <DatePicker className=\"py-2\"  defaultValue={new Date()} valueEditFormat={{ dateStyle: \"short\" }} valueDisplayFormat={{ dateStyle: \"medium\" }}/>\r\n// </div>\r\n\r\n\r\n\r\n\r\n\r\n// export const renderDatePicker2 = ({input, placeholder, defaultValue, meta: {touched, error} }) =>\r\n// <div className=\"form-group text-light\">\r\n//    <label className=\"form-check-label float-start mt-4 ml-5 mb-2\" htmlFor={\"wateringDate\"} /> \r\n//     <div>\r\n//         <DatePicker {...input} defaultValue={new Date()} dateForm=\"MM/DD/YYYY\" selected={input.value} valueEditFormat={{ dateStyle: \"short\" }} valueDisplayFormat={{ dateStyle: \"medium\" }} />\r\n//         {touched && error && <span>{error}</span>}\r\n//     </div>\r\n//   </div>\r\n\r\n","import { useInjection } from 'inversify-react';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field} from 'redux-form'\r\nimport IUserRepository from '../../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../../state';\r\nimport { renderInputField } from '../formFields';\r\nimport { BsPersonCircle } from \"react-icons/bs\";\r\n\r\n    \r\n    const LoginForm = ({handleSubmit}) => {\r\n        \r\n        const dispatch = useDispatch();\r\n        const { logIn} = bindActionCreators(actionCreators, dispatch);\r\n        const userRepo: IUserRepository = useInjection(IUserRepository);\r\n\r\n        const submit = (values) => {\r\n            \r\n            logIn({username: values.username, password: values.password}, userRepo);\r\n        }\r\n        \r\n    return(\r\n        <div className='login-form mx-5 mt-5 ' id=\"login-form\">\r\n            <div className=\"d-flex justify-content-center mb-3\">\r\n                <span className=\"text-light fw-normal\"><BsPersonCircle size={50} /></span>\r\n            </div>\r\n            <form onSubmit={handleSubmit(submit)}>\r\n                <div className=\"form-group\">\r\n                    <Field name='username' component={renderInputField} label='Adresse e-mail' type='email' />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='password' component={renderInputField} label='Mot de passe' type='password' />\r\n                </div>\r\n                <div className=\"py-2 d-flex justify-content-start\">\r\n                    <a href=\"#\"  className=\"text-white\"><small>Mot de passe oublié ?</small></a>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-outline-light my-5 rounded\">Connexion</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'login',\r\n    destroyOnUnmount: true,\r\n})(LoginForm)\r\n\r\n// export default LoginForm;","import { injectable } from \"inversify\";\r\nimport { registerGardenerPlantFormData, updateGardenerPlantFormData } from \"../../../application/GardenerPlantRepositoryImpl\";\r\nimport GardenerPlant, { IGardenerPlant } from \"../../entities/GardenerPlant\";\r\n\r\n@injectable()\r\nexport default abstract class IGardenerPlantRepository {\r\n    // abstract getAllGardenerPlants():  Promise<GardenerPlant[] | undefined>\r\n    abstract registerGardenerPlant(gardenerPlantDetails:registerGardenerPlantFormData): Promise<void>\r\n    // abstract getGardenerPlantData (gardenerPlantId:string): Promise<void>;\r\n    abstract updateGardenerPlant (gardenerPlantId:number, gardenerPlantDetails:updateGardenerPlantFormData): Promise<void>;\r\n    abstract deleteGardenerPlant(gardenerPlantId:number): Promise<void>\r\n    \r\n}","\r\nimport { useInjection } from 'inversify-react';\r\nimport React, { useEffect } from 'react';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionCreators} from '../state/index';\r\nimport  {bindActionCreators } from 'redux';\r\nimport { IGardenerPlant } from '../../domain/entities/GardenerPlant';\r\nimport {State} from '../state/store'\r\nimport LoginForm from '../components/User/LoginForm';\r\nimport User from '../../domain/entities/user';\r\nimport {  BsFillEmojiWinkFill, BsFillEyeFill, BsFillTrashFill, BsFillPencilFill, BsFillDropletFill, BsEmojiWink} from \"react-icons/bs\";\r\nimport { FaPagelines } from \"react-icons/fa\";\r\nimport IGardenerPlantRepository from '../../domain/adapters/repositories/IGardenerPlantRepository';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { confirmAlert } from 'react-confirm-alert'; // Import\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\r\nimport Moment from 'moment';\r\n\r\n\r\nconst DashBoard = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {fetchUserData, removeGardenerPlant, waterPlant} = bindActionCreators(actionCreators, dispatch);\r\n\r\n    const userRepo: IUserRepository = useInjection(IUserRepository);\r\n    const gardenerPlantRepo: IGardenerPlantRepository = useInjection(IGardenerPlantRepository);\r\n\r\n    const userId: number | undefined = userRepo.getAuthenticatedUserId();\r\n    const user: User = useSelector((state: State) => state.login.user);\r\n    const isAuth: boolean = useSelector((state: State ) => state.login.isAuthenticated);\r\n    const isLoading: boolean = useSelector((state: State ) => state.login.isLoading);\r\n    const errorMsg: string | null  = useSelector((state: State ) => state.login.error);\r\n    const gardenerPlants: IGardenerPlant[] = user.gardenerPlants\r\n    const wateringDate: string = Moment().format('DD-MM-YYYY')\r\n\r\n    // let PlantsInNeed: IGardenerPlant[] = []\r\n    // gardenerPlants.map((gardenerPlant) => {\r\n    //     if(gardenerPlant.wateringStatus == 2 || gardenerPlant.wateringStatus == 3 ){\r\n    //         PlantsInNeed.push(gardenerPlant);\r\n    //     }\r\n    //     return PlantsInNeed;\r\n    // })\r\n    \r\n    console.log(gardenerPlants)\r\n    useEffect( () =>   {\r\n        fetchUserData(userId, userRepo)\r\n    }, []);\r\n\r\n    const confirmValidation = (gardenerPlant, userId) => {\r\n        confirmAlert({\r\n            title: 'Confirmation de suppression',\r\n            message: 'Souhaitez-vous supprimer cette plante de votre serre virtuelle.',\r\n            buttons: [\r\n            {\r\n                label: 'Oui',\r\n                onClick: () =>  removeGardenerPlant(gardenerPlant.id, gardenerPlantRepo, userId )\r\n            },\r\n            {\r\n                label: 'Non',\r\n                onClick: () => {}\r\n            }\r\n            ]\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className='' id=\"dashboard\">\r\n            {isLoading ? (\r\n            <div className =\"d-flex justify-content-center align-items-center spinner\">\r\n                <div className=\"spinner-border text-success \" role=\"status\">\r\n                    {/* <span className=\"visually-hidden\">Chargement en cours ...</span> */}\r\n                </div>\r\n            </div>\r\n                ) : (\r\n            <div> {isAuth ? (\r\n                <>\r\n                <section className=\"hero container-fluid bg-dark border-top border-light\">\r\n                    <div className=\"row h-100 \">\r\n                        <div className=\"col-6 bg-transparent hero-left py-5 text-light\">\r\n                            <div className=\"my-5 mx-5 text-light\">\r\n                                <h1 className=\"display-6 text-light\">Bienvenue <br/>dans votre Serre Virtuelle</h1>\r\n                                <p className=\"lead mt-5 fw-bold\">{user.firstname}&nbsp;{user.surname}</p>\r\n                                <p className=\"py-4\">Depuis votre espace serre virtuelle, vous pouvez gérer l'arrosage de toutes vos plantes en un click !</p>\r\n                            </div>\r\n                            <div>\r\n                                <a href=\"/plantes/ajout\" className=\"btn btn-success rounded\">Ajouter une plante</a>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='col-6 hero-right '>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n                <section className=\"container stats py-5\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <div className=\"pb-5 d-flex justify-content-center align-items-center gap-4\">\r\n                                <span className=\"text-success\"><BsFillEmojiWinkFill size={50} /></span>\r\n                                <h2 className=\" \">L'état de vos plantes en un clin d'oeil !</h2>    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 d-flex justify-content-evenly align-items-center mb-3\">\r\n                            <div className=\"stat-item d-flex justify-content-center align-items-center\">\r\n                                <div className=\" rounded-circle d-flex flex-column border border-2 border-success justify-content-center align-items-center  px-2 h-75 w-75\">\r\n                                    <p className=\"fw-bold text-success\">Plantes<br/> arrosées</p>\r\n                                    <span className=\"fs-1 fw-bold text-success\">{user.numberOfUpToDateWaterings}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"stat-item d-flex justify-content-center align-items-center\">\r\n                                <div className=\" rounded-circle d-flex flex-column border border-2 border-warning justify-content-center align-items-center  px-2 h-75 w-75\">\r\n                                    <p className=\"fw-bold text-warning\">Plantes assoifées</p>\r\n                                    <span className=\"fs-1 fw-bold text-warning\">{user.numberOfOnDayWaterings}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"stat-item d-flex justify-content-center align-items-center\">\r\n                                <div className=\" rounded-circle d-flex flex-column border border-2 border-danger  justify-content-center align-items-center  px-2 h-75 w-75\">\r\n                                    <p className=\"fw-bold text-danger\">Plantes<br/> en péril</p>\r\n                                    <span className=\"fs-1 fw-bold text-danger\">{user.numberOfLateWaterings}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-6 px-4\">\r\n                            <table className=\"table table-hover\">\r\n                                <thead className=\"bg-dark\">\r\n                                    <tr className='text-white'>\r\n                                        <th scope=\"col\">Plante</th>\r\n                                        <th scope=\"col\">Arrosage prévu</th>\r\n                                        <th scope=\"col\">Arroser</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {gardenerPlants.map((gardenerPlant) => {\r\n                                    \r\n                                     if(gardenerPlant.wateringStatus == 3) {\r\n                                         return  <tr key={gardenerPlant.id} className=\"\">\r\n                                         <th scope=\"row\">{gardenerPlant.nickname}</th>\r\n                                         <td className=\" fw-normal\">{gardenerPlant.nextWateringDate}</td>\r\n                                         <button onClick={() => waterPlant(gardenerPlant, userRepo, wateringDate)} type=\"button\" className=\"btn btn-error bg-transparent border-0 mt-3\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Arroser ma plante\">\r\n                                        <BsFillDropletFill size={25} className=\"text-danger\"/>\r\n                                        </button>\r\n                                     </tr>\r\n                                     } else if(gardenerPlant.wateringStatus == 2) {\r\n                                        return  <tr key={gardenerPlant.id} className=\"\">\r\n                                        <th scope=\"row\">{gardenerPlant.nickname}</th>\r\n                                        <td className=\" fw-normal\">{gardenerPlant.nextWateringDate}</td>\r\n                                        <button onClick={() => waterPlant(gardenerPlant, userRepo, wateringDate)} type=\"button\" className=\"btn btn-error bg-transparent border-0 mt-3\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Arroser ma plante\">\r\n                                       <BsFillDropletFill size={25} className=\"text-warning\"/>\r\n                                       </button>\r\n                                    </tr>\r\n                                    } \r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n\r\n\r\n                <section className=\"serre py-5 container-fluid\" > \r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"pb-5 d-flex justify-content-center align-items-center gap-4 \">\r\n                                <span className=\"text-white\"><FaPagelines size={50} /></span>\r\n                                <h2 className=\"text-white display-6 fw-bold \">Toutes les plantes de votre serre virtuelle</h2>    \r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Affichage quand la serre virtuelle est vide  */}\r\n                        { gardenerPlants.length == 0 ? (\r\n                            <div className =\" row d-flex justify-content-center align-items-center\">\r\n                            <div className=\"col-6 border border-2 py-5 bg-light rounded \">\r\n                                <div className=\"mb-4\">\r\n                                    <p className=\"text-dark fw-bolder  fs-3 mx-5\">Votre serre virtuelle est actuellement vide ! </p>\r\n                                    <span className=\"text-success\"><BsEmojiWink size={50} /></span>\r\n                                </div>\r\n                                <div>\r\n                                    <a href=\"/plantes/ajout\" className=\"btn btn-success rounded\">Ajouter une plante</a>\r\n                                </div>\r\n                            </div>\r\n                        </div>) : \r\n\r\n                        // Affichage lorsque la serre virtuelle contient au moins une plante\r\n                        (<div className=\"row\">\r\n                        {gardenerPlants.map((gardenerPlant) => {\r\n                        return <div className=\"col-3 rounded mb-3\">\r\n                                    <div key={gardenerPlant.id} className=\"card border-0 shadow rounded\" style={{maxWidth: '20rem'}}>\r\n\r\n                                                <div className=\"card-header bg-dark d-flex justify-content-center rounded-top align-items-center  \">\r\n                                                    <h5  className=\"text-light mb-0 py-2\">{gardenerPlant.nickname}</h5>\r\n                                                </div>\r\n                                                <div className=\"position-relative\">\r\n                                                    <span className=\"badge bg-success position-absolute bottom-0 end-0 \">{gardenerPlant.cataloguePlantName}</span>\r\n                                                    <img src={gardenerPlant.image} className=\"card-img-top \" alt=\"...\" />\r\n                                                </div>\r\n                                            \r\n\r\n                                                <div className=\"card-body bg-dark py-2\">\r\n                                                    <div className=\"d-flex justify-content-around align-items-center bg-transparent\">\r\n                                                        <Link to={'#'} className=\"btn btn-success  bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Voir la plante\">\r\n                                                            <BsFillEyeFill size={25} className=\"text-light\"/>\r\n                                                        </Link>\r\n                                                        <Link to={`/plantes/modification/${gardenerPlant.id}`} className=\"btn btn-success  bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Modifier les paramètres de ma plante\">\r\n                                                            <BsFillPencilFill size={25} className=\"text-light\"/>\r\n                                                        </Link>\r\n                                                        <button onClick={() => confirmValidation(gardenerPlant, userId)}type=\"button\" className=\"btn btn-success bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"*Supprimer la plante de ma serre virtuelle\">\r\n                                                        <BsFillTrashFill size={25} className=\"text-light\"/>\r\n                                                        </button>\r\n\r\n                                                        {gardenerPlant.wateringStatus == 1 ? \r\n                                                         <div className=\"bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Je n'ai pas soif !\">\r\n                                                         <BsFillDropletFill size={25} className=\"text-success\"/>\r\n                                                         </div> \r\n                                                        : gardenerPlant.wateringStatus == 2 ? \r\n                                                         <button onClick={() => waterPlant(gardenerPlant, userRepo, wateringDate)} type=\"button\" className=\"btn btn-error bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Arroser ma plante\">\r\n                                                         <BsFillDropletFill size={25} className=\"text-warning\"/>\r\n                                                         </button>\r\n                                                         : \r\n                                                         <button onClick={() => waterPlant(gardenerPlant, userRepo, wateringDate)} type=\"button\" className=\"btn btn-error bg-transparent border-0\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Arroser ma plante\">\r\n                                                         <BsFillDropletFill size={25} className=\"text-danger\"/>\r\n                                                         </button> }\r\n                                                    </div>\r\n                                                </div>\r\n                                                {gardenerPlant.wateringStatus == 1 ?\r\n                                                <div className=\"card-footer d-flex justify-content-center bg-success\">\r\n                                                    <small className=\"text-white fw-bold\">Prochain arrosage le : <em>{gardenerPlant.nextWateringDate}</em> </small>\r\n                                                </div>\r\n                                                : gardenerPlant.wateringStatus == 2 ?\r\n                                                <div className=\"card-footer d-flex justify-content-center  bg-warning\">\r\n                                                    <small className=\"text-white fw-bold\">C'est mon jour d'arrosage !</small>\r\n                                                </div>\r\n                                                :\r\n                                                <div className=\"card-footer d-flex justify-content-center bg-danger\">\r\n                                                    {gardenerPlant.numberOfLateDays == 1 ? \r\n                                                    <small className=\"text-white fw-bold\">Vous avez {gardenerPlant.numberOfLateDays} jour de retard</small>\r\n                                                    :\r\n                                                    <small className=\"text-white fw-bold\">Vous avez {gardenerPlant.numberOfLateDays} jours de retard</small>\r\n                                                    }\r\n                                                 </div>\r\n                                                }\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                })}\r\n                        </div>)}\r\n                    </div>\r\n                </section>\r\n                </>\r\n                ) : (\r\n                <LoginForm />\r\n                )}\r\n            </div>\r\n        )}    \r\n    </div>   \r\n    );\r\n}\r\n\r\nexport default DashBoard;\r\n\r\n\r\n","import { injectable } from \"inversify\";\r\nimport { registerFormData } from \"../../../application/UserRepositoryImpl\";\r\nimport Plant from \"../../entities/Plant\";\r\nimport User from \"../../entities/user\";\r\n\r\n\r\n@injectable()\r\nexport default abstract class IPlantRepository {\r\n    abstract getAllPlants(): Promise<Plant[] | undefined> ;\r\n    \r\n}","import Modal from 'react-bootstrap/Modal'\r\nimport ModalDialog from 'react-bootstrap/ModalDialog'\r\nimport ModalHeader from 'react-bootstrap/ModalHeader'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { BsFillSunFill, BsFillHeartFill, BsFillHandThumbsUpFill, BsInfoCircleFill} from \"react-icons/bs\";\r\nimport { useSelector } from 'react-redux';\r\nimport { State } from '../../state';\r\n\r\n\r\nfunction ShowPlantModal(props) {\r\n    \r\n    const plant = useSelector((state: State ) => state.plant.modal);\r\n    // console.log(modal)\r\n\r\n   \r\n    return (\r\n            <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby={\"modal-\" + plant.name}\r\n            centered\r\n            className=\"\"\r\n          >\r\n            <Modal.Header closeButton className=\"bg-success\">\r\n              <Modal.Title id={\"modal-\" + plant.name}>\r\n              <h4 className=\"text-light fs-2\">{plant.name}</h4>\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <img src={plant.image} className=\"img-fluid h-100\" alt=\"...\" />        \r\n                    </div>\r\n                    <div className=\"col-6 d-flex flex-column justify-content-start  fs-6\">\r\n    \r\n                        <div className=\"d-flex justify-content-start gap-3\">\r\n                            <span className=\"text-success\"><BsFillHandThumbsUpFill size={20}/></span>\r\n                            <div>\r\n                                <span className=\"fw-bold text-dark\">Description</span>\r\n                                <p >{plant.description}</p>  \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-start gap-3\">\r\n                            <span className=\"text-success\"><BsFillSunFill size={20}/></span>\r\n                            <div>\r\n                                <span className=\"fw-bold text-dark\">Exposition</span>\r\n                                <p >{plant.exposition}</p>  \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-start gap-3\">\r\n                            <span className=\"text-success\"><BsFillHeartFill size={20}/></span>\r\n                            <div>\r\n                                <span className=\"fw-bold text-dark\">Entretien</span>\r\n                                <p >{plant.care}</p>  \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-start gap-3\">\r\n                            <span className=\"text-success\"><BsInfoCircleFill size={20}/></span>\r\n                            <div>\r\n                                <span className=\"fw-bold text-dark\">Toxicité</span>\r\n                                <p >{plant.toxicity}</p>  \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Modal.Body>\r\n          </Modal>\r\n\r\n\r\n\r\n);\r\n}\r\n  \r\n\r\n  export default ShowPlantModal\r\n  \r\n//   function App() {\r\n//     const [modalShow, setModalShow] = React.useState(false);\r\n  \r\n//     return (\r\n//       <>\r\n//         <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n//           Launch vertically centered modal\r\n//         </Button>\r\n  \r\n//         <MyVerticallyCenteredModal\r\n//           show={modalShow}\r\n//           onHide={() => setModalShow(false)}\r\n//         />\r\n//       </>\r\n//     );\r\n//   }\r\n  \r\n//   render(<App />);","\r\n\r\nimport { useInjection } from 'inversify-react';\r\nimport { useEffect, useState } from 'react';\r\nimport Carousel from 'react-bootstrap/Carousel'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport IPlantRepository from '../../domain/adapters/repositories/IPlantRepository';\r\nimport LoginForm from '../components/User/LoginForm'\r\nimport { actionCreators, State } from '../state';\r\nimport { BsPersonCircle, BsFlower2, BsClipboardData } from \"react-icons/bs\";\r\nimport { FaPagelines } from \"react-icons/fa\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport ShowPlantModal from '../components/plant/showPlantModal';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst LandingPage = (props) => { \r\n\r\n    const dispatch = useDispatch();\r\n    const { fetchPlants, setModal} = bindActionCreators(actionCreators, dispatch);\r\n\r\n    const [modalShow, setModalShow] = useState(false);\r\n    \r\n    const plantRepo = useInjection(IPlantRepository);\r\n    const plants = useSelector((state: State ) => state.plant.plants);\r\n    const isLoading = useSelector((state: State ) => state.plant.isLoading);\r\n    \r\n    useEffect( () =>   {\r\n        fetchPlants(plantRepo)\r\n    }, []);\r\n  \r\n    return(\r\n        <div id=\"landing-page\" className=\"landing-page\">\r\n\r\n            <section className=\"d-flex justify-content-center align-items-center hero min-vh-100 h-auto\" >\r\n                <div className=\"text-white row\">\r\n                    <div className='col-12'>\r\n                        <h1 className=\"main-title my-4 sm-mb-4 text-white f-6\">DRINK UP !</h1>\r\n                        <p className=\"lead mx-5\">Vos plantes vous mennent la vie dure ? <br/> \r\n                        <span className=\"fw-bold text-success\"> Drink up</span> est l'application qu'il vous pour que vos plantes ne manquent plus jamais d'eau. <br/> \r\n                        Rejoignez-vous pour <span className=\"fw-bold text-success fs-lg\">une expérience unique</span>.... enfin presque !</p>\r\n                        <div className=\"p-5 d-flex flex-column flex-sm-row justify-content-center gap-3 gap-sm-5\">\r\n                            <a href=\"/catalogue\" className=\"btn fw-bold border-white btn-success rounded \">Découvrir nos plantes</a>\r\n                            <a href=\"/enregistrement\" className=\"btn fw-bold  btn-outline-light rounded\">Créer un compte</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"presentation-login section-padding bg-dark px-4 mw-50\" id=\"presentation-login\">\r\n                <div className=\"row d-flex justify-content-center \">\r\n                    <div className=\"catalogue col-8 h-auto pb-4\">\r\n\r\n                        <div className=\"d-flex flex-column flex-sm-row justify-content-between align-items-center py-4 \">\r\n                            <h2 className=\"text-center text-sm-start text-light fw-light mb-4 mr-sm-5\">Notre catalogue de plantes</h2>\r\n                            <a href=\"/catalogue\" className=\"btn  w-75 w-sm-100 btn-sm-sm  btn-outline-success rounded\">Toutes nos plantes</a>\r\n                        </div>\r\n\r\n                        {isLoading ? (\r\n                        <div className =\"d-flex justify-content-center align-items-center mt-5\">\r\n                            <div className=\"d-flex flex-column align-items-center py-5\">\r\n\r\n                                <div className=\"spinner-border text-white mb-5  \" role=\"status\"></div>\r\n                                <span className=\"visually text-light fs-4\">Nous chargeons notre catalogue de plantes !</span>\r\n\r\n                            </div>\r\n                        </div>\r\n                        ) : (\r\n\r\n                        <Carousel>\r\n                            {plants.map((plant) => {\r\n                            return <Carousel.Item key={plant.id}>\r\n                            <img className=\"rounded\" src={plant.image} />\r\n                            <Carousel.Caption>\r\n                                <div className =\"d-flex flex-column align-items-stretch justify-content-between\">\r\n                                    <div>\r\n                                        <h3 className=\"py-5 display-3 fw-bold text-white\">{plant.name}</h3>\r\n                                        <p className=\"carousel-description mb-5 fw-medium fs-6 fs-sm-4 \">{plant.description}</p>\r\n                                    </div>\r\n                                    <div className=\"\">\r\n                                        <Button variant=\"primary\" className=\"btn fw-bold border-white btn-success rounded\"  onClick={() => {\r\n                                            // console.log(plant.name)\r\n                                            setModal(plant)\r\n                                            setModalShow(true)} \r\n                                        } >Consulter</Button>\r\n\r\n                                        {/* Modal de presentation de la plante  */}\r\n                                        < ShowPlantModal show={modalShow} onHide={() => setModalShow(false)} />\r\n                                    </div>\r\n                                </div> \r\n                            </Carousel.Caption>\r\n                        </Carousel.Item>})}\r\n                            \r\n                        </Carousel>)}                  \r\n                    </div>\r\n                    <div className=\"login-form col-12 col-sm-4 d-flex align-items-end\">\r\n                        <LoginForm  />\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"easy-steps py-5 px-4\">\r\n                \r\n                <div className=\"row \">\r\n                    <div className=\"col-12 h-auto\">\r\n                        <div className=\"d-flex flex-column justify-content-center gap-3 align-items-center pb-5\">\r\n                            <h2 className=\"fw-normal\">Créer votre serre virtuelle</h2>\r\n                            <span className=\"fw-bold text-success py-2\"><FaPagelines size={45} />...en toute simplicité !</span>\r\n                        </div>\r\n                        <Link to={'/enregistrement'} className=\"btn btn-success my-5 rounded\">Je crée ma serre virtuelle</Link>\r\n                        {/* <a href=\"#\" className=\"btn fw-bold  btn-outline-success rounded mb-5\">Je crée ma serre virtuelle</a> */}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"row procedure-cards py-2 \">\r\n                    \r\n                    <div className=\"col-12 col-sm-4 mb-3  d-flex justify-content-center\">\r\n                        <div className=\" card rounded shadow\" style={{maxWidth: \"20rem\"}}>\r\n                            <div className=\"card-header bg-success fw-bold text-light py-2\"><BsPersonCircle size={35} /></div>\r\n                            <div className=\"card-body\">\r\n                        \r\n                                <h4 className=\"card-title\">Je créer mon compte</h4>\r\n                                <p className=\"card-text\">La sécurité et la confidentialité de vos données sont notre priorité.<br/>\r\n                                <a className=\"link-success\" href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">Politique de confidentialité</a>\r\n                                \r\n                            </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 mb-3 col-sm-4 d-flex justify-content-center\">\r\n                        <div className=\" card rounded shadow\" style={{maxWidth: \"20rem\"}}>\r\n                            <div className=\"card-header bg-success fw-bold text-light py-2\"><BsFlower2 size={35} /></div>\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">J'ajoute une plante</h4>\r\n                                <p className=\"card-text\">Vous pouvez ajouter facilement des plantes dans votre serre virtuelle en quelques clicks!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 mb-3 col-sm-4 d-flex justify-content-center\">\r\n                        <div className=\" card rounded shadow\" style={{maxWidth: \"20rem\"}}>\r\n                            <div className=\"card-header bg-success fw-bold text-light py-2\"><BsClipboardData size={35} /></div>\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">Je gère mes plantes</h4>\r\n                                <p className=\"card-text\">Grâce à votre tableau de board vous pouvez facilement gérer les plantes de votre serre virtuelle</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                    {/* </div> */}\r\n                    \r\n                        {/* <div className=\"col-4\">\r\n                            <img className=\"w-75\" src=\"https://images.unsplash.com/photo-1566664981274-ef2008590fe5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1074&q=80\" alt=\"image d'une serre de jardin\" />\r\n                        </div> */}\r\n                    {/* </div> */}\r\n\r\n            </section>\r\n        \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage","\r\nimport { BsFillHouseDoorFill } from \"react-icons/bs\";\r\nimport { BsFillEnvelopeFill } from \"react-icons/bs\";\r\nimport { BsFillTelephoneForwardFill } from \"react-icons/bs\";\r\n\r\n\r\nconst Footer = () => {\r\n    \r\n    return(\r\n        <footer className=\"text-center text-lg-start text-muted \">\r\n        \r\n          <section className=\" main-footer pt-4 bg-success\">\r\n            <div className=\"container text-center text-md-start mt-2 text-white\">\r\n              <div className=\"row\">\r\n\r\n                <div className=\"col-md-3 col-lg-4 col-xl-3 mx-auto mb-4 \">\r\n                  <h6 className=\"text-uppercase fw-bold mb-4\">Drink up !</h6>\r\n                  <p> Vos plantes nous diront merci ! Notre inteface intuitive vous permettra d'assurer l'arrosage de vos plantes en toute facilité. </p>\r\n                </div>\r\n \r\n                <div className=\"col-md-3 col-lg-2 col-xl-2 mx-auto mb-4\">\r\n                  <h6 className=\"text-uppercase fw-bold mb-4\"> Accès rapides</h6>\r\n                  <p>\r\n                    <a href=\"#!\" className=\"link-light\">Nos plantes</a>\r\n                  </p>\r\n                  <p>\r\n                    <a href=\"#!\" className=\"link-light\">Nous contacter</a>\r\n                  </p>\r\n                  <p>\r\n                    <a href=\"#!\" className=\"link-light\">Politique de confidentialité</a>\r\n                  </p>\r\n                </div>\r\n               \r\n                <div className=\"col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0 mb-4 \">\r\n                  <h6 className=\"text-uppercase fw-bold mb-4\">\r\n                    Informations de contact\r\n                  </h6>\r\n                  <div className=\"d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex justify-content-start\">\r\n                      <BsFillHouseDoorFill size={22} /> \r\n                      <p className=\"mx-2\">69 Route de la verdure</p>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-start\">\r\n                      <BsFillEnvelopeFill size={22} /> \r\n                      <p className=\"mx-2\">drink-up@gmail.com</p>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-start\">\r\n                      <BsFillTelephoneForwardFill size={22} /> \r\n                      <p className=\"mx-2\">06 30 93 62 65</p>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          \r\n         \r\n        \r\n          {/* <!-- Copyright --> */}\r\n          <div className=\"text-center p-4 bg-dark\">\r\n            © 2021 Copyright:\r\n            <a className=\"text-reset fw-bold\" >Drink up!</a>\r\n          </div>\r\n          {/* <!-- Copyright --> */}\r\n          </section>\r\n        </footer>\r\n        \r\n    )\r\n}\r\n\r\nexport default Footer;","import { useInjection } from 'inversify-react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field} from 'redux-form'\r\nimport IUserRepository from '../../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators } from '../../state';\r\nimport { renderInputField, renderSelectField, renderSwitchField } from '../formFields';\r\nimport { BsPersonCircle } from \"react-icons/bs\";\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\n    \r\n    const RegisterForm = ({handleSubmit}) => {\r\n        \r\n        const userRepo: IUserRepository = useInjection(IUserRepository);\r\n        const dispatch = useDispatch();\r\n        const { logIn } = bindActionCreators(actionCreators, dispatch);\r\n\r\n        const submit = async (values) => {\r\n            await userRepo.register({gender: values.gender, firstname: values.firstname, surname: values.surname, email:values.email, password: values.passwordReg, isNotified:values.isNotified});\r\n            logIn({username:values.email, password:values.passwordReg}, userRepo)\r\n            toast.success('Votre compte a été créé avec succes', { delay: 4000 });\r\n        }\r\n        \r\n    return(\r\n        <div className='register-form '>\r\n            <h2 className='text-light mb-5 fw-normal '>Créer un compte utilisateur</h2>\r\n            <span className=\"text-light fw-normal\"><BsPersonCircle size={60} /></span>\r\n            <form onSubmit={handleSubmit(submit)}>\r\n                <div className=\"form-group\">\r\n                    <Field name='gender' component={renderSelectField} label='Civilité'>\r\n                        <option value='' children=\"Choisir une option\" selected></option>\r\n                        <option value='Madame' children='Madame'></option>\r\n                        <option value='Monsieur' children='Monsieur'></option>\r\n                    </Field>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='firstname' component={renderInputField} label='Prénom' type='text'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='surname' component={renderInputField} label='Nom' type='text'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='email' component={renderInputField} label='Adresse e-mail' type='email'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='passwordReg' component={renderInputField} label='Mot de passe' type='password'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='passwordReg2' component={renderInputField} label='Confirmez votre mot de passe' type='password'/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Field name='isNotified' component={renderSwitchField} label='Je souhaite recevoir les noficiations' type='checkbox' defaultValue={false} />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-success my-5 rounded\">Connexion</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'register',\r\n    destroyOnUnmount: true,\r\n    \r\n})(RegisterForm)\r\n\r\n// export default LoginForm;","\r\nimport { useInjection } from 'inversify-react';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actionCreators, State } from '../state/index';\r\nimport  { bindActionCreators } from 'redux';\r\nimport IUserRepository from '../../domain/adapters/repositories/IUserRepository';\r\nimport { registerFormData } from '../../application/UserRepositoryImpl';\r\nimport LoginForm from '../components/User/LoginForm';\r\nimport RegisterForm from '../components/User/RegisterForm';\r\n\r\n\r\nconst RegisterPage = (props) => {\r\n\r\n    return (\r\n    \r\n        <div className='bg-transparent p-5' id=\"register-page\" >\r\n           <div className=' position-relative container w-75 rounded'>\r\n            <div className=\"position-absolute top-0 start-0 bottom-0 end-0 bg-dark opacity-75 rounded\"></div>\r\n\r\n                <div className='position-relative d-flex justify-content-center pt-5 '>\r\n                    <RegisterForm  />\r\n                </div> \r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default RegisterPage;\r\n\r\n\r\n","import GardenerPlant from \"../../domain/entities/GardenerPlant\";\r\nimport Plant, { IPlant } from \"../../domain/entities/Plant\";\r\n\r\nconst Pagination = ({currentPage, itemsPerPage, length, onPageChange }) => {\r\n\r\n    const pageCount: number = Math.ceil(length / itemsPerPage);\r\n    const pages: number[] = []\r\n    for (let i = 1; i <= pageCount; i++ ){\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <nav className=\"d-flex justify-content-center py-4\">\r\n            <ul className=\"pagination success\">\r\n                <li className={`page-item ${currentPage === 1 ? \"disabled\" : \"\"}`}>\r\n                    <button className=\"page-link\" onClick={() => onPageChange(currentPage - 1)}>&laquo;</button>\r\n                </li>\r\n                {pages.map(page => {\r\n                    return <li key={page} className={`page-item ${currentPage === page ? \"active\" : \"\"}`}>\r\n                        <button className=\"page-link\" onClick={() =>onPageChange(page)}>{page}</button>\r\n                    </li>}\r\n                )}\r\n                \r\n                <li className={`page-item ${currentPage === pageCount ? \"disabled\" : \"\"}`}>\r\n                {/* <a className=\"page-link\" href=\"#\">&raquo;</a> */}\r\n                <button className=\"page-link\" onClick={() =>onPageChange(currentPage + 1)}>&raquo;</button>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\n\r\n// on retourne un tableau qui correspond à une portion définie de notre tableau passé en paramètre\r\nPagination.getData = (items:IPlant[], currentPage: number, itemsPerPage: number): IPlant[] => {\r\n\r\n    const start: number = currentPage * itemsPerPage - itemsPerPage;\r\n    return items.slice(start, start + itemsPerPage)\r\n}\r\n\r\n\r\n\r\nexport default Pagination;","\r\nimport { useInjection } from 'inversify-react';\r\n\r\nimport Pagination from '../components/Pagination';\r\nimport IPlantRepository from '../../domain/adapters/repositories/IPlantRepository';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators, State } from '../state';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { Accordion } from 'react-bootstrap';\r\nimport { BsFillSunFill, BsFillHeartFill, BsFillHandThumbsUpFill, BsInfoCircleFill, BsFillPlusCircleFill} from \"react-icons/bs\";\r\nimport { IPlant } from '../../domain/entities/Plant';\r\nimport GardenerPlant from '../../domain/entities/GardenerPlant';\r\n\r\n\r\n\r\nconst CataloguePage = (props) => {\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n    const { fetchPlants, setCurrentPage} = bindActionCreators(actionCreators, dispatch);\r\n    \r\n\r\n    const plantRepo = useInjection(IPlantRepository);\r\n    const plants: IPlant[] = useSelector((state: State ) => state.plant.plants);\r\n    const isLoading: boolean = useSelector((state: State ) => state.plant.isLoading);\r\n    const currentPage: number = useSelector((state: State ) => state.pagination.currentPage);\r\n\r\n    useEffect(() =>   {\r\n        fetchPlants(plantRepo)\r\n    }, []);\r\n\r\n    // on définit le nombre d'item par page dans notre pagination\r\n    const itemsPerPage: number = 3;\r\n    //on prépare le tableau pour l'affichage de la pagination\r\n    const paginatedPlants : IPlant[] = Pagination.getData(plants, currentPage, itemsPerPage);\r\n\r\n    if (isLoading) {\r\n        return <div className =\"d-flex justify-content-center align-items-center spinner\">\r\n                    <div className=\"spinner-border text-success \" role=\"status\">\r\n                        <span className=\"visually-hidden\">Nous chargeons notre catalogue</span>\r\n                    </div>\r\n                </div>\r\n        } else {\r\n        return  <section className='bg-transparent p-5 container' id=\"catalogue-page\" >\r\n        <header>\r\n            <h1 className=\"pb-5\">Notre catalogue de plantes</h1>\r\n        </header>\r\n        <div className=\"row\">\r\n            <div className=\"col-8\">\r\n                <ul className=\"plant-list gap-2\">\r\n                {paginatedPlants.map((plant) => \r\n                    <li className=\"card mb-4\">\r\n                        <div className=\"row  \">\r\n                            <div className=\"col-md-4\">\r\n                                <img src={plant.image} className=\"card-img\" alt=\"...\" />\r\n                            </div> \r\n                            <div className=\"col-md-8\">\r\n                                <div className=\"card-body relative \">\r\n                                    <div className=\"\">\r\n                                        <h4 className=\"card-title mb-4\">{plant.name}</h4>\r\n                                         <p className=\"card-text\">{plant.description}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <Accordion flush>\r\n                                <Accordion.Item eventKey={plant.id.toString()}>\r\n                                    <Accordion.Header >Informations & Conseils</Accordion.Header>\r\n                                    <Accordion.Body>\r\n                                        <div className=\"d-flex flex-column justify-content-start align-items-start\">\r\n                                            <div className=\"d-flex justify-content-start align-items-start gap-3 pb-2\">\r\n                                                <span className=\"text-success\"><BsFillHandThumbsUpFill size={20}/></span>\r\n                                                <span className=\"fw-bold fs-5 text-dark\">Description</span>\r\n                                            </div>\r\n                                            <p className=\"fs-5 text-start\">{plant.description}</p>  \r\n                                        </div>\r\n                                        <div className=\"d-flex flex-column justify-content-start align-items-start\">\r\n                                            <div className=\"d-flex justify-content-start align-items-start gap-3 pb-2\">\r\n                                                <span className=\"text-success\"><BsFillSunFill size={20}/></span>\r\n                                                <span className=\"fw-bold fs-5 text-dark\">Exposition</span>\r\n                                            </div>\r\n                                            <p className=\"fs-5 text-start\">{plant.exposition}</p>  \r\n                                        </div>\r\n                                        <div className=\"d-flex flex-column justify-content-start align-items-start\">\r\n                                            <div className=\"d-flex justify-content-start align-items-start gap-3 pb-2\">\r\n                                                <span className=\"text-success\"><BsFillHeartFill size={20}/></span>\r\n                                                <span className=\"fw-bold fs-5 text-dark\">Entretien</span>\r\n                                            </div>\r\n                                            <p className=\"fs-5 text-start\">{plant.care}</p>  \r\n                                        </div>\r\n                                        <div className=\"d-flex flex-column justify-content-start align-items-start\">\r\n                                            <div className=\"d-flex justify-content-start align-items-start gap-3 pb-2\">\r\n                                                <span className=\"text-success\"><BsInfoCircleFill size={20}/></span>\r\n                                                <span className=\"fw-bold fs-5 text-dark\">Toxicité</span>\r\n                                            </div>\r\n                                            <p className=\"fs-5 text-start \">{plant.toxicity}</p>  \r\n                                        </div>\r\n                                    </Accordion.Body>\r\n                                </Accordion.Item>\r\n                            </Accordion>\r\n                    </li>\r\n                    )}\r\n                </ul>\r\n                <Pagination currentPage={currentPage} itemsPerPage={itemsPerPage} length={plants.length} onPageChange={setCurrentPage}/> \r\n            </div>\r\n            <div className=\"col-4 catalogue-ad display-3 text-white pt-5\">Des plantes des plantes et encore des plantes !</div>\r\n        </div>\r\n    </section>\r\n    }\r\n                    \r\n}\r\n\r\nexport default CataloguePage;\r\n\r\n\r\n\r\n","import { useInjection } from 'inversify-react';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field, formValueSelector} from 'redux-form'\r\nimport IUserRepository from '../../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators, State } from '../../state';\r\nimport { loginFailed } from '../../state/action-creators';\r\nimport { renderHiddenField, renderInputField, renderSelectField, renderDateTimePicker1 } from '../formFields';\r\nimport { BsPersonCircle } from \"react-icons/bs\";\r\nimport IPlantRepository from '../../../domain/adapters/repositories/IPlantRepository';\r\nimport IGardenerPlantRepository from '../../../domain/adapters/repositories/IGardenerPlantRepository';\r\nimport { Link } from 'react-router-dom';\r\nimport DatePicker from \"react-widgets/DatePicker\";\r\nimport \"react-widgets/styles.css\";\r\nimport Moment from 'moment';\r\n// import 'react-widgets/dist/css/react-widgets.css'\r\n\r\n\r\n\r\nconst CreateGardenerPlant = ({handleSubmit}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { fetchPlants, createGardenerPlant} = bindActionCreators(actionCreators, dispatch);\r\n    const plantRepo = useInjection(IPlantRepository);\r\n    const gardenerPlantRepo = useInjection(IGardenerPlantRepository);\r\n    const plants = useSelector((state: State ) => state.plant.plants);\r\n    const isLoading = useSelector((state: State ) => state.plant.isLoading);\r\n\r\n    \r\n    useEffect( () =>   {\r\n        fetchPlants(plantRepo);\r\n    }, []);\r\n\r\n    const submit = async (values) => {\r\n\r\n        const userIRI = \"/api/users/\" + values.userId;\r\n        const plantIRI = \"/api/plants/\" + values.plantId;\r\n        const wateringDate: string = Moment().format('YYYY-MM-DD')\r\n        console.log(wateringDate);\r\n    \r\n        createGardenerPlant({user:userIRI, plant:plantIRI, nickname: values.nickname, sunlight: values.sunlight, size: values.size, season: values.season, topography: values.topography, location: values.location, lastWateringDate: wateringDate }, gardenerPlantRepo)\r\n    }\r\n\r\n    return(\r\n        <div className='create-gardener-plant-form container d-flex flex-column align-items-center my-5'>\r\n            <div className=\"wrapper bg-dark px-5 w-75 \">\r\n\r\n                {isLoading ? (\r\n                <div className =\"d-flex justify-content-center align-items-center mt-5\">\r\n                    <div className=\"d-flex flex-column align-items-center py-5\">\r\n\r\n                        <div className=\"spinner-border text-white mb-5  \" role=\"status\"></div>\r\n                        <span className=\"visually text-light fs-4\">Chargement en cours</span>\r\n\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                <form onSubmit={handleSubmit(submit)}>\r\n                     <div className=\"form-group\">\r\n                        <Field name='userId' component={renderHiddenField} type='hidden' />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='plantId' component={renderSelectField} label=\"Choisissez une plante de notre catalogue \">\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            {plants.map((plant) => {\r\n                            return(<option key={plant.id} value={plant.id} children= {plant.name}></option>)\r\n                            })}\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='nickname' component={renderInputField} label='Personnalisez le nom de votre plante' type='text'/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='sunlight' component={renderSelectField} label=\"Définissez l'éclairage de la pièce \">\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Ombragé' children='Ombragé'></option>\r\n                            <option value='Lumineux' children='Lumineux'></option>\r\n                            <option value='Très lumineux' children='Très lumineux'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='size' component={renderSelectField} label='Définissez la taille de votre plante'>\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Petite' children='Petite'></option>\r\n                            <option value='Moyenne' children='Moyenne'></option>\r\n                            <option value='Grande' children='Grande'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='season' component={renderSelectField} label=\"Définissez la saison de l'année\">\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Printemps' children='Printemps'></option>\r\n                            <option value='Eté' children='Eté'></option>\r\n                            <option value='Automne' children='Automne'></option>\r\n                            <option value='Hiver' children='Hiver'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='topography' component={renderSelectField} label='Définissez le relief de votre logement'>\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Bord de mer' children='Bord de mer'></option>\r\n                            <option value='Plaine' children='Plaine'></option>\r\n                            <option value='Plateau' children='Plateau'></option>\r\n                            <option value='Montagne' children='Montagne'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='location' component={renderSelectField} label='Ou se trouve votre plante ?'>\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Intérieur' children='Intérieur'></option>\r\n                            <option value='Extérieur' children='Extérieur'></option>\r\n                        </Field>\r\n                    </div>\r\n                    {/* <div className=\"form-group\">\r\n \r\n                        <div className=\"md-form\">\r\n                          <Field  name=\"wateringDate\" component={renderDateTimePicker1} label =\"Renseignez la dernière date d'arrosage\" showTime={false}></Field>\r\n                        </div> \r\n                    </div> */}\r\n                    \r\n                    <div className=' d-flex justify-content-center gap-5'>\r\n                        <Link to={'/serre-virtuelle'} className=\"btn btn-success my-5 rounded\">Retour</Link>\r\n                        <button type=\"submit\" className=\"btn btn-success my-5 rounded\">Valider votre saisie</button>\r\n                    </div>\r\n                </form>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default reduxForm({\r\n    \r\n    form: 'create_gardener_plant',\r\n    destroyOnUnmount: true,\r\n    enableReinitialize:true\r\n    \r\n})(CreateGardenerPlant)\r\n    \r\n\r\n","import { useInjection } from \"inversify-react\";\r\nimport IUserRepository from \"../../domain/adapters/repositories/IUserRepository\";\r\nimport User from \"../../domain/entities/user\";\r\nimport CreateGardenerPlant from \"../components/gardenerPlant/CreateGardenerPlant\";\r\n\r\n\r\nconst CreateGardenerPlantPage = (props) => {\r\n    // console.log(props)\r\n    const userRepo = useInjection(IUserRepository);\r\n    const userId = userRepo.getAuthenticatedUserId();\r\n\r\n    return (\r\n        <div id=\"create-garderner-plant-page\">\r\n            {userId ?  <CreateGardenerPlant initialValues={{userId:userId}} />  : '' }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateGardenerPlantPage","import { useInjection } from 'inversify-react';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { reduxForm, Field, formValueSelector} from 'redux-form'\r\nimport IUserRepository from '../../../domain/adapters/repositories/IUserRepository';\r\nimport { actionCreators, State } from '../../state';\r\nimport { loginFailed } from '../../state/action-creators';\r\nimport { renderHiddenField, renderInputField, renderSelectField } from '../formFields';\r\nimport { BsPersonCircle } from \"react-icons/bs\";\r\nimport IPlantRepository from '../../../domain/adapters/repositories/IPlantRepository';\r\nimport IGardenerPlantRepository from '../../../domain/adapters/repositories/IGardenerPlantRepository';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst UpdateGardenerPlantForm = ({handleSubmit, error, reset, pristine, submitting}) => {\r\n    // console.log(props.match.params.id);\r\n    \r\n    // props.match.params.id\r\n    const dispatch = useDispatch();\r\n    const { fetchPlants, updateGardenerPlant} = bindActionCreators(actionCreators, dispatch);\r\n    const gardenerPlantRepo = useInjection(IGardenerPlantRepository);\r\n    const plants = useSelector((state: State ) => state.plant.plants);\r\n    const isLoading = useSelector((state: State ) => state.plant.isLoading);\r\n    const plantRepo = useInjection(IPlantRepository);\r\n    \r\n\r\n    useEffect( () =>   {\r\n        fetchPlants(plantRepo);\r\n    }, []);\r\n\r\n    const submit = async (values) => {\r\n\r\n        console.log( values)\r\n\r\n\r\n        const userIRI = \"/api/users/\" + values.userId;\r\n        const plantIRI = \"/api/plants/\" + values.plantId;\r\n\r\n        updateGardenerPlant(values.gardenerPlantId, {user:userIRI, plant:plantIRI, nickname: values.nickname, sunlight: values.sunlight, size: values.size, season: values.season, topography: values.topography, location: values.location, lastWateringDate: values.lastWateringDate}, gardenerPlantRepo)\r\n    }\r\n    return(\r\n        <div className='create-gardener-plant-form container d-flex flex-column align-items-center my-5'>\r\n            <div className=\"wrapper bg-dark px-5 w-75 \">\r\n\r\n                {isLoading ? (\r\n                <div className =\"d-flex justify-content-center align-items-center mt-5\">\r\n                    <div className=\"d-flex flex-column align-items-center py-5\">\r\n                        <div className=\"spinner-border text-white mb-5  \" role=\"status\"></div>\r\n                        <span className=\"visually text-light fs-4\">Chargement en cours</span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                <form onSubmit={handleSubmit(submit)}>\r\n                    <div className=\"form-group\">\r\n                        <Field name='gardenerPlantId' component={renderHiddenField} type='hidden' />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='nextWateringDate' component={renderHiddenField} type='hidden' />\r\n                    </div>\r\n                     <div className=\"form-group\">\r\n                        <Field name='userId' component={renderHiddenField} type='hidden' />\r\n                    </div>\r\n                     <div className=\"form-group\">\r\n                        <Field name='plantId' component={renderHiddenField} type='hidden' />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='nickname' component={renderInputField} label='Modifier le nom de votre plante' type='text'/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='sunlight' component={renderSelectField} label=\"Définissez l'éclairage de la pièce \">\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Ombragé' children='Ombragé'></option>\r\n                            <option value='Lumineux' children='Lumineux'></option>\r\n                            <option value='Très lumineux' children='Très lumineux'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='size' component={renderSelectField} label='Modifier la taille de votre plante'>\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Petite' children='Petite'></option>\r\n                            <option value='Moyenne' children='Moyenne'></option>\r\n                            <option value='Grande' children='Grande'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='season' component={renderSelectField} label=\"Modifier la saison de l'année\">\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Printemps' children='Printemps'></option>\r\n                            <option value='Eté' children='Eté'></option>\r\n                            <option value='Automne' children='Automne'></option>\r\n                            <option value='Hiver' children='Hiver'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='topography' component={renderSelectField} label='Modifier le relief de votre logement'>\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Bord de mer' children='Bord de mer'></option>\r\n                            <option value='Plaine' children='Plaine'></option>\r\n                            <option value='Plateau' children='Plateau'></option>\r\n                            <option value='Montagne' children='Montagne'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <Field name='location' component={renderSelectField} label='Ou se trouve votre plante ?'>\r\n                            <option value='' children=\"Choisir une option\" selected></option>\r\n                            <option value='Intérieur' children='Intérieur'></option>\r\n                            <option value='Extérieur' children='Extérieur'></option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=' d-flex justify-content-center gap-5'>\r\n                        <Link to={'/serre-virtuelle'} className=\"btn btn-success my-5 rounded\">Retour</Link>\r\n                        <button type=\"submit\" className=\"btn btn-success my-5 rounded\">Valider votre saisie</button>\r\n                        {/* <button type=\"button\" className=\"btn btn-success my-5 rounded\"  disabled={pristine || submitting} onClick={reset('update_gardener_plant')}>Tout effacer</button> */}\r\n                        \r\n                    </div>\r\n                </form>)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default reduxForm({\r\n    \r\n    form: 'update_gardener_plant',\r\n    destroyOnUnmount: true,\r\n    enableReinitialize:true\r\n    \r\n})(UpdateGardenerPlantForm)\r\n    \r\n\r\n","import { useInjection } from \"inversify-react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport IGardenerPlantRepository from \"../../domain/adapters/repositories/IGardenerPlantRepository\";\r\nimport IPlantRepository from \"../../domain/adapters/repositories/IPlantRepository\";\r\nimport IUserRepository from \"../../domain/adapters/repositories/IUserRepository\";\r\nimport User from \"../../domain/entities/user\";\r\nimport CreateGardenerPlant from \"../components/gardenerPlant/CreateGardenerPlant\";\r\nimport UpdateGardenerPlantForm from \"../components/gardenerPlant/UpdateGardenerPlantForm\";\r\nimport { actionCreators, State } from \"../state\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nexport interface PlantIdFormParams {\r\n    plantId: string\r\n}\r\n\r\nconst GardenerPlantPage = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { fetchUserData } = bindActionCreators(actionCreators, dispatch);\r\n    const userRepo:IUserRepository = useInjection(IUserRepository);\r\n    const userId:number | undefined = userRepo.getAuthenticatedUserId();\r\n    const {plantId}: PlantIdFormParams = useParams();\r\n    const user: User = useSelector((state: State) => state.login.user);\r\n   \r\n\r\n    useEffect( () =>   {\r\n        fetchUserData(userId, userRepo)\r\n    }, []);\r\n    \r\n\r\n    if(Object.keys(user).length){\r\n    const gardenerPlant = Object.values(user.gardenerPlants).filter((gardenerPlant) => {\r\n        if (gardenerPlant.id == parseInt(plantId)) {\r\n            return gardenerPlant\r\n        }\r\n    })[0];\r\n\r\n    console.log(gardenerPlant.lastWateringDate)\r\n    // return;\r\n    \r\n    return (\r\n        <div id=\"gardener-plant-form-page\">\r\n            <div className=\"\">            \r\n                {userId ?  <UpdateGardenerPlantForm initialValues={{\r\n                    gardenerPlantId:gardenerPlant.id,\r\n                    userId:userId, \r\n                    nickname: gardenerPlant.nickname, \r\n                    plantId: gardenerPlant.cataloguePlantId,\r\n                    sunlight: gardenerPlant.sunlight,\r\n                    size: gardenerPlant.size,\r\n                    season: gardenerPlant.season,\r\n                    topography: gardenerPlant.topography,\r\n                    location: gardenerPlant.location,\r\n                    lastWateringDate: gardenerPlant.lastWateringDate,\r\n                    }} />  : '' }\r\n            </div>\r\n        </div>\r\n    );\r\n    } else {\r\n        return (\r\n            <div id=\"gardener-plant-form-page\">\r\n                <div className=\"\">            \r\n                    {userId ?  <UpdateGardenerPlantForm initialValues={{userId:userId}} />  : '' }\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default GardenerPlantPage","import './App.css';\r\nimport {BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {history} from './view/state/store';\r\nimport { useInjection } from 'inversify-react';\r\nimport IServiceRepository from './domain/adapters/repositories/IServiceRepository';\r\nimport Navbar from './view/components/Navbar';\r\nimport { ConnectedRouter} from 'connected-react-router';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from './view/state';\r\nimport { State } from './view/state/store';\r\nimport DashBoard from './view/pages/DashBoard';\r\nimport Create from './view/components/User/create';\r\nimport LandingPage from './view/pages/LandingPage';\r\nimport Footer from './view/components/footer';\r\nimport RegisterPage from './view/pages/RegisterPage';\r\nimport CataloguePage from './view/pages/CataloguePage';\r\nimport CreateGardenerPlant from './view/components/gardenerPlant/CreateGardenerPlant';\r\nimport CreateGardenerPlantPage from './view/pages/CreateGardenerPlantPage';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport UpdateGardenerPlantForm from './view/components/gardenerPlant/UpdateGardenerPlantForm';\r\nimport GardenerPlantPage from './view/pages/GardenerPlantPage';\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const myCarousel = document.getElementById('olivier')\r\n  console.log(myCarousel)\r\n\r\n// myCarousel.addEventListener('slide.bs.carousel', function () {\r\n//   // do something...\r\n// })\r\n \r\n  const serviceRepo = useInjection(IServiceRepository);\r\n\r\n  //1 - Vérfiie le statut de connexion de l'utilisateur dans le state à l'ouverture de l'application\r\n  const authenticationStatus: boolean = serviceRepo.isAuthenticated();\r\n  console.log('authentifié au lancement application => ' + authenticationStatus)\r\n\r\n   //2 - Vérfie si un token exite dans le local storage du  navigateur et s'il est valide !\r\n  serviceRepo.setup();\r\n\r\n  // 3 - Mise à jour du state en fonction du statut de connexion\r\n  const dispatch = useDispatch();\r\n  const { setIsAuthenticated} = bindActionCreators(actionCreators, dispatch);  \r\n  // const state = useSelector((state: State) => state);\r\n\r\n  // console.log((state));\r\n  setIsAuthenticated(authenticationStatus);\r\n  const isAuthenticated: boolean = useSelector((state: State) => state.login.isAuthenticated);\r\n  console.log('Etat du status de connexion dans state => ' + isAuthenticated)\r\n\r\n\r\n  return (  \r\n    \r\n      <ConnectedRouter history= {history}>\r\n        <Navbar/>\r\n        <main className=\"App\">\r\n          <Switch>\r\n            <Route path='/' exact component={LandingPage}/>\r\n            <Route path='/catalogue' exact component={CataloguePage}/>\r\n            <Route path='/enregistrement' exact component={RegisterPage}/>\r\n            <Route path='/serre-virtuelle' render={props => {return isAuthenticated ?  <DashBoard /> : <Redirect to='/' />;}} />\r\n            {/* <Route path='/utilisateur/enregistrement' render={props => {return isAuthenticated ?  <Create /> : <Redirect to='/' />;}} /> */}\r\n            <Route path='/plantes/ajout' render={() => {return isAuthenticated ?  <CreateGardenerPlantPage /> : <Redirect to='/' />;}} />\r\n            <Route path='/plantes/modification/:plantId' render={() => {return isAuthenticated ?  <GardenerPlantPage /> : <Redirect to='/' />;}} />\r\n          </Switch>\r\n        </main>\r\n        <Footer/>\r\n        <ToastContainer position={toast.POSITION.BOTTOM_RIGHT} autoClose={2000}/>\r\n      </ConnectedRouter>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals =  (onPerfEntry: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\nimport { injectable } from \"inversify\";\r\nimport { toast } from \"react-toastify\";\r\nimport { requestBuilder } from \"../core/utils/requestBuilder\";\r\nimport IGardenerPlantRepository from \"../domain/adapters/repositories/IGardenerPlantRepository\";\r\n\r\n\r\n@injectable()\r\nexport default class GardenerPlantRepositoryImpl implements IGardenerPlantRepository {\r\n\r\n\r\n    public  registerGardenerPlant = async ({user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate}: registerGardenerPlantFormData): Promise<void> => {\r\n\r\n        const requestUrl: string = requestBuilder('/api/gardener_plants')\r\n        const gardenerPlantDetails:registerGardenerPlantFormData = {user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate};\r\n        console.log(gardenerPlantDetails);\r\n        \r\n        \r\n        try {\r\n            const data: any = (await axios.post(requestUrl, gardenerPlantDetails)).data\r\n        } catch (error) {\r\n            toast.error('Une erreur est survenue lors de la création de votre plante', { delay: 2000 })\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    public updateGardenerPlant = async (gardenerPlantId:number, {user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate}:updateGardenerPlantFormData): Promise<void> => {\r\n\r\n        console.log('je suis dans le repo');\r\n        const requestUrl = requestBuilder('/api/gardener_plants/' + gardenerPlantId);\r\n        const gardenerPlantDetails: updateGardenerPlantFormData ={user, plant, nickname, sunlight, size, season, topography, location, lastWateringDate};\r\n\r\n        console.log(gardenerPlantDetails)\r\n    \r\n        try {\r\n        const data: any = (await axios.put(requestUrl, gardenerPlantDetails)).data\r\n        } catch (error) {\r\n            toast.error('Une erreur est survenue lors de la modification de votre plante', { delay: 2000 })\r\n             console.log(error)\r\n        }\r\n    }\r\n\r\n    public deleteGardenerPlant = async (id: number):Promise<void> => {\r\n\r\n        const requestUrl = requestBuilder('/api/gardener_plants/' + id);\r\n        try {\r\n        const data: any = (await axios.delete(requestUrl)).data\r\n        toast.success('Votre plante a été supprimée avec succes', { delay: 4000 })\r\n        } catch (error) {\r\n            toast.error('Une erreur est survenue lors de la suppression de votre plante', { delay: 2000 })\r\n             console.log(error)\r\n        }\r\n    }  \r\n}\r\nexport interface registerGardenerPlantFormData {\r\n    user: string,\r\n    plant: string,\r\n    nickname: string,\r\n    sunlight: string,\r\n    size: string,\r\n    season: string,\r\n    topography: string,\r\n    location: string,\r\n    lastWateringDate: string\r\n}\r\nexport interface updateGardenerPlantFormData {\r\n    user: string,\r\n    plant: string,\r\n    nickname: string,\r\n    sunlight: string,\r\n    size: string,\r\n    season: string,\r\n    topography: string,\r\n    location: string\r\n    lastWateringDate: string\r\n}","\r\n\r\n\r\nexport interface IPlant {\r\n    id: number;\r\n    name: string;\r\n    image: string;\r\n    description: string;\r\n    exposition: string;\r\n    care: string;\r\n    toxicity: string;\r\n    frequency?: number;\r\n    type: string;\r\n}\r\n\r\n\r\nexport default class Plant {\r\n\r\n    id: number;\r\n    name: string;\r\n    image: string;\r\n    description: string;\r\n    exposition: string;\r\n    care: string;\r\n    toxicity: string;\r\n    frequency: number;\r\n    type: string;\r\n\r\n    constructor(id: number, name: string, image: string, description: string, exposition: string, care: string,  toxicity: string, frequency: number, type: string){\r\n        this.id = id;\r\n        this.name = name;\r\n        this.image = image;\r\n        this.description = description;\r\n        this.exposition = exposition;\r\n        this.care = care;\r\n        this.toxicity = toxicity;\r\n        this.frequency = frequency;\r\n        this.type = type;\r\n    }\r\n}\r\n\r\n","import { injectable } from \"inversify\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport IPlantRepository from \"../domain/adapters/repositories/IPlantRepository\";\r\nimport Plant from \"../domain/entities/Plant\";\r\nimport { requestBuilder } from \"../core/utils/requestBuilder\";\r\n\r\n\r\n\r\n@injectable()\r\nexport default class PlantRepositoryImpl implements IPlantRepository {\r\n\r\n    public getAllPlants = async (): Promise<Plant[] | undefined> => {\r\n        \r\n        const requestUrl: string = requestBuilder(\"/api/plants\")\r\n\r\n        try {\r\n            const data: any = (await axios.get<AxiosResponse>(requestUrl)).data\r\n            // console.log(data['hydra:member'])\r\n            const plantsData: Plant[] = data['hydra:member']\r\n            const plants: Plant[] = plantsData.map( function (plant) {\r\n                return new Plant (plant.id, plant.name, plant.image, plant.description, plant.exposition, plant.care, plant.toxicity,plant.frequency, plant.type)\r\n            })\r\n            return plants;\r\n        } catch (error) {\r\n            \r\n        }\r\n        return;\r\n    }\r\n}\r\n\r\n","import { injectable } from \"inversify\";\r\nimport axios from \"axios\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport IServiceRepository from \"../domain/adapters/repositories/IServiceRepository\";\r\n\r\n\r\n@injectable()\r\nexport default class ServiceRepositoryImpl implements IServiceRepository {\r\n\r\n    // private protocole: string = 'http://';\r\n    // private domain: string = 'drink-up-apiplatform.test:8080';\r\n    // private url: string = this.protocole + this.domain;\r\n\r\n    public setup(){\r\n\r\n        //Vérification existence et validité du token\r\n        const token: string | null | undefined = window.localStorage.getItem('authToken');\r\n\r\n        if ((token !== \"undefined\" && token !== null )){\r\n        const {exp: expiration}: any = jwtDecode(token);\r\n\r\n         if(expiration * 1000 > new Date().getTime()){\r\n            this.setAxiosToken(token);\r\n            }  \r\n        }\r\n    }\r\n\r\n    private setAxiosToken (token:string): void {\r\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\r\n    }\r\n\r\n    public isAuthenticated = (): boolean => {\r\n        const token: any = window.localStorage.getItem('authToken');\r\n\r\n        if (token !== \"undefined\" && token !== null ){\r\n            const {exp: expiration}: any = jwtDecode(token);\r\n            \r\n            if(expiration * 1000 > new Date().getTime()){\r\n                return true;\r\n            }\r\n            return false\r\n        }\r\n        return false;\r\n    }\r\n}","import { Container } from \"inversify\";\r\nimport GardenerPlantRepositoryImpl from \"../application/GardenerPlantRepositoryImpl\";\r\nimport PlantRepositoryImpl from \"../application/PlantRepositoryImpl\";\r\nimport ServiceRepositoryImpl from \"../application/ServiceRepositoryImpl\";\r\nimport UserRepositoryImpl from \"../application/UserRepositoryImpl\";\r\nimport IGardenerPlantRepository from \"../domain/adapters/repositories/IGardenerPlantRepository\";\r\nimport IPlantRepository from \"../domain/adapters/repositories/IPlantRepository\";\r\nimport IServiceRepository from \"../domain/adapters/repositories/IServiceRepository\";\r\nimport IUserRepository from \"../domain/adapters/repositories/IUserRepository\";\r\n\r\n\r\nconst container = new Container();\r\n\r\ncontainer.bind<IUserRepository>(IUserRepository).to(UserRepositoryImpl);\r\ncontainer.bind<IServiceRepository>(IServiceRepository).to(ServiceRepositoryImpl);\r\ncontainer.bind<IPlantRepository>(IPlantRepository).to(PlantRepositoryImpl);\r\ncontainer.bind<IGardenerPlantRepository>(IGardenerPlantRepository).to(GardenerPlantRepositoryImpl);\r\n\r\n\r\nexport default container;","import \"reflect-metadata\"\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { Provider as Container }from 'inversify-react';\r\nimport container from './core/di';\r\nimport store from \"./view/state/store\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Container container={container}>\r\n        <Provider store = {store}>\r\n          <App />\r\n        </Provider>\r\n      </Container>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(() => {});"],"sourceRoot":""}